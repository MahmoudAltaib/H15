
Layered_Arch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ec  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000688  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000443  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001770  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043d  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000280  00000000  00000000  00001c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001ef5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  64:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Set_bit>:
	{
		Reset_bit(PORT_address , u8Pin_index);
		return 1;
	}
	return 0;
}
  6c:	e8 2f       	mov	r30, r24
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	21 e0       	ldi	r18, 0x01	; 1
  74:	30 e0       	ldi	r19, 0x00	; 0
  76:	02 c0       	rjmp	.+4      	; 0x7c <Set_bit+0x10>
  78:	22 0f       	add	r18, r18
  7a:	33 1f       	adc	r19, r19
  7c:	6a 95       	dec	r22
  7e:	e2 f7       	brpl	.-8      	; 0x78 <Set_bit+0xc>
  80:	28 2b       	or	r18, r24
  82:	20 83       	st	Z, r18
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	08 95       	ret

00000088 <Reset_bit>:
  88:	e8 2f       	mov	r30, r24
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <Reset_bit+0x10>
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	6a 95       	dec	r22
  9a:	e2 f7       	brpl	.-8      	; 0x94 <Reset_bit+0xc>
  9c:	20 95       	com	r18
  9e:	28 23       	and	r18, r24
  a0:	20 83       	st	Z, r18
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	08 95       	ret

000000a6 <Pin_mode>:
  a6:	41 11       	cpse	r20, r1
  a8:	0f c0       	rjmp	.+30     	; 0xc8 <Pin_mode+0x22>
  aa:	e8 2f       	mov	r30, r24
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	22 91       	ld	r18, -Z
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <Pin_mode+0x14>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <Pin_mode+0x10>
  be:	80 95       	com	r24
  c0:	82 23       	and	r24, r18
  c2:	80 83       	st	Z, r24
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	08 95       	ret
  c8:	41 30       	cpi	r20, 0x01	; 1
  ca:	71 f4       	brne	.+28     	; 0xe8 <Pin_mode+0x42>
  cc:	e8 2f       	mov	r30, r24
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	22 91       	ld	r18, -Z
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <Pin_mode+0x36>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <Pin_mode+0x32>
  e0:	82 2b       	or	r24, r18
  e2:	80 83       	st	Z, r24
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	08 95       	ret
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	08 95       	ret

000000ec <Pin_read>:

extern void Pin_read(uint8_t PORT_address , uint8_t u8Pin_index ,volatile uint8_t *u8Pin_reading)
{
	*u8Pin_reading = (*(volatile uint8_t *)(PORT_address - 2)) & (1<<u8Pin_index) ;
  ec:	e8 2f       	mov	r30, r24
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	32 97       	sbiw	r30, 0x02	; 2
  f2:	20 81       	ld	r18, Z
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <Pin_read+0x12>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <Pin_read+0xe>
 102:	82 23       	and	r24, r18
 104:	fa 01       	movw	r30, r20
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <main>:
#include "GPIO_Driver.h"
#include "AMIT_Board.h"
#include "AMIT_Layout.h"

int main(void)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	1f 92       	push	r1
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t u8Pin_reading = 0;
 114:	19 82       	std	Y+1, r1	; 0x01
	
  Pin_mode(PORT4 , AMIT_LED1 , OUTPUT);
 116:	41 e0       	ldi	r20, 0x01	; 1
 118:	65 e0       	ldi	r22, 0x05	; 5
 11a:	82 e3       	ldi	r24, 0x32	; 50
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <Pin_mode>
  Pin_mode(PORT4 , PUSH_BUTTON0 , INPUT);
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	82 e3       	ldi	r24, 0x32	; 50
 126:	0e 94 53 00 	call	0xa6	; 0xa6 <Pin_mode>
  Reset_bit(PORT4 , AMIT_LED1);
 12a:	65 e0       	ldi	r22, 0x05	; 5
 12c:	82 e3       	ldi	r24, 0x32	; 50
 12e:	0e 94 44 00 	call	0x88	; 0x88 <Reset_bit>
  
    while (1) 
    {
		Pin_read(PORT4 , PUSH_BUTTON0 ,&u8Pin_reading );
 132:	ae 01       	movw	r20, r28
 134:	4f 5f       	subi	r20, 0xFF	; 255
 136:	5f 4f       	sbci	r21, 0xFF	; 255
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	82 e3       	ldi	r24, 0x32	; 50
 13c:	0e 94 76 00 	call	0xec	; 0xec <Pin_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	80 e7       	ldi	r24, 0x70	; 112
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x3c>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x46>
 150:	00 00       	nop
		_delay_ms(50);
		
		Pin_read(PORT4 , PUSH_BUTTON0 ,&u8Pin_reading );
 152:	ae 01       	movw	r20, r28
 154:	4f 5f       	subi	r20, 0xFF	; 255
 156:	5f 4f       	sbci	r21, 0xFF	; 255
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	82 e3       	ldi	r24, 0x32	; 50
 15c:	0e 94 76 00 	call	0xec	; 0xec <Pin_read>
		
		if (u8Pin_reading != 0)
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	88 23       	and	r24, r24
 164:	29 f0       	breq	.+10     	; 0x170 <main+0x66>
		{
			Set_bit(PORT4 , AMIT_LED1);
 166:	65 e0       	ldi	r22, 0x05	; 5
 168:	82 e3       	ldi	r24, 0x32	; 50
 16a:	0e 94 36 00 	call	0x6c	; 0x6c <Set_bit>
 16e:	e1 cf       	rjmp	.-62     	; 0x132 <main+0x28>
		}
		else
		{
			Reset_bit(PORT4 , AMIT_LED1);
 170:	65 e0       	ldi	r22, 0x05	; 5
 172:	82 e3       	ldi	r24, 0x32	; 50
 174:	0e 94 44 00 	call	0x88	; 0x88 <Reset_bit>
 178:	dc cf       	rjmp	.-72     	; 0x132 <main+0x28>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
