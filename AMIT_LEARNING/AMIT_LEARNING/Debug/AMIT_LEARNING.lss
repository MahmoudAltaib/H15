
AMIT_LEARNING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000570  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fb7  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8b  00000000  00000000  0000273b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f66  00000000  00000000  000032c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  0000422c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061f  00000000  00000000  00004530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f2f  00000000  00000000  00004b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005a7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 36       	cpi	r26, 0x61	; 97
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
  8a:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUZZER_OFF>:
	Pin_set(BUZZER_PORT , BUZZER_PIN_NUMBER);
}

extern void BUZZER_OFF()
{
	Pin_reset(BUZZER_PORT , BUZZER_PIN_NUMBER);
  92:	64 e0       	ldi	r22, 0x04	; 4
  94:	82 e3       	ldi	r24, 0x32	; 50
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Pin_reset>
  9c:	08 95       	ret

0000009e <RW_STATE>:
	
	for (u8Count = 0; u8Count < u8Size ; u8Count ++)
	{
		LCD_DATA(pu8Data[u8Count]);
	}
}
  9e:	cf 93       	push	r28
  a0:	c8 2f       	mov	r28, r24
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	42 e0       	ldi	r20, 0x02	; 2
  a6:	67 e3       	ldi	r22, 0x37	; 55
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	88 e3       	ldi	r24, 0x38	; 56
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
  b2:	c1 11       	cpse	r28, r1
  b4:	06 c0       	rjmp	.+12     	; 0xc2 <RW_STATE+0x24>
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	88 e3       	ldi	r24, 0x38	; 56
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Pin_reset>
  c0:	07 c0       	rjmp	.+14     	; 0xd0 <RW_STATE+0x32>
  c2:	c1 30       	cpi	r28, 0x01	; 1
  c4:	29 f4       	brne	.+10     	; 0xd0 <RW_STATE+0x32>
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	88 e3       	ldi	r24, 0x38	; 56
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Pin_set>
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <RS_STATE>:
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	41 e0       	ldi	r20, 0x01	; 1
  dc:	67 e3       	ldi	r22, 0x37	; 55
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	88 e3       	ldi	r24, 0x38	; 56
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
  e8:	c1 11       	cpse	r28, r1
  ea:	06 c0       	rjmp	.+12     	; 0xf8 <RS_STATE+0x24>
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	88 e3       	ldi	r24, 0x38	; 56
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Pin_reset>
  f6:	07 c0       	rjmp	.+14     	; 0x106 <RS_STATE+0x32>
  f8:	c1 30       	cpi	r28, 0x01	; 1
  fa:	29 f4       	brne	.+10     	; 0x106 <RS_STATE+0x32>
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	88 e3       	ldi	r24, 0x38	; 56
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Pin_set>
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <ENABLE_STATE>:
 10a:	cf 93       	push	r28
 10c:	c8 2f       	mov	r28, r24
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	43 e0       	ldi	r20, 0x03	; 3
 112:	67 e3       	ldi	r22, 0x37	; 55
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	88 e3       	ldi	r24, 0x38	; 56
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
 11e:	c1 11       	cpse	r28, r1
 120:	06 c0       	rjmp	.+12     	; 0x12e <ENABLE_STATE+0x24>
 122:	63 e0       	ldi	r22, 0x03	; 3
 124:	88 e3       	ldi	r24, 0x38	; 56
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Pin_reset>
 12c:	07 c0       	rjmp	.+14     	; 0x13c <ENABLE_STATE+0x32>
 12e:	c1 30       	cpi	r28, 0x01	; 1
 130:	29 f4       	brne	.+10     	; 0x13c <ENABLE_STATE+0x32>
 132:	63 e0       	ldi	r22, 0x03	; 3
 134:	88 e3       	ldi	r24, 0x38	; 56
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Pin_set>
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <HIGH_TO_LOW_PULSE>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 85 00 	call	0x10a	; 0x10a <ENABLE_STATE>
 146:	84 e1       	ldi	r24, 0x14	; 20
 148:	8a 95       	dec	r24
 14a:	f1 f7       	brne	.-4      	; 0x148 <HIGH_TO_LOW_PULSE+0x8>
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 85 00 	call	0x10a	; 0x10a <ENABLE_STATE>
 152:	80 e5       	ldi	r24, 0x50	; 80
 154:	8a 95       	dec	r24
 156:	f1 f7       	brne	.-4      	; 0x154 <HIGH_TO_LOW_PULSE+0x14>
 158:	08 95       	ret

0000015a <LCD_COMMAND>:
 15a:	cf 93       	push	r28
 15c:	c8 2f       	mov	r28, r24
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	9c b3       	in	r25, 0x1c	; 28
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	99 27       	eor	r25, r25
 166:	2c 2f       	mov	r18, r28
 168:	20 7f       	andi	r18, 0xF0	; 240
 16a:	82 2b       	or	r24, r18
 16c:	9c bb       	out	0x1c, r25	; 28
 16e:	8b bb       	out	0x1b, r24	; 27
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 6a 00 	call	0xd4	; 0xd4 <RS_STATE>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 4f 00 	call	0x9e	; 0x9e <RW_STATE>
 17c:	0e 94 a0 00 	call	0x140	; 0x140 <HIGH_TO_LOW_PULSE>
 180:	20 e1       	ldi	r18, 0x10	; 16
 182:	c2 9f       	mul	r28, r18
 184:	c0 01       	movw	r24, r0
 186:	11 24       	eor	r1, r1
 188:	9c bb       	out	0x1c, r25	; 28
 18a:	8b bb       	out	0x1b, r24	; 27
 18c:	0e 94 a0 00 	call	0x140	; 0x140 <HIGH_TO_LOW_PULSE>
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <LCD_INIT>:

extern void LCD_INIT()
{
	Pin_mode(RW_PORT, RW_DDR , RW_PIN_NUMBER , OUTPUT);
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	42 e0       	ldi	r20, 0x02	; 2
 198:	67 e3       	ldi	r22, 0x37	; 55
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	88 e3       	ldi	r24, 0x38	; 56
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
	Pin_mode(RS_PORT, RS_DDR , RS_PIN_NUMBER , OUTPUT);
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	67 e3       	ldi	r22, 0x37	; 55
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	88 e3       	ldi	r24, 0x38	; 56
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
	Pin_mode(ENABLE_PORT, ENABLE_DDR , ENABLE_PIN_NUMBER , OUTPUT);
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	43 e0       	ldi	r20, 0x03	; 3
 1b8:	67 e3       	ldi	r22, 0x37	; 55
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	88 e3       	ldi	r24, 0x38	; 56
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
	
	Pin_mode(D4_PORT, D4_DDR , D4_PIN_NUMBER , OUTPUT);
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	44 e0       	ldi	r20, 0x04	; 4
 1c8:	6a e3       	ldi	r22, 0x3A	; 58
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	8b e3       	ldi	r24, 0x3B	; 59
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
	Pin_mode(D5_PORT, D5_DDR , D5_PIN_NUMBER , OUTPUT);
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	45 e0       	ldi	r20, 0x05	; 5
 1d8:	6a e3       	ldi	r22, 0x3A	; 58
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	8b e3       	ldi	r24, 0x3B	; 59
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
	Pin_mode(D6_PORT, D6_DDR , D6_PIN_NUMBER , OUTPUT);
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	46 e0       	ldi	r20, 0x06	; 6
 1e8:	6a e3       	ldi	r22, 0x3A	; 58
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	8b e3       	ldi	r24, 0x3B	; 59
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
	Pin_mode(D7_PORT, D7_DDR , D7_PIN_NUMBER , OUTPUT);
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	47 e0       	ldi	r20, 0x07	; 7
 1f8:	6a e3       	ldi	r22, 0x3A	; 58
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	8b e3       	ldi	r24, 0x3B	; 59
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
	
	ENABLE_STATE(ENABLE_LOW);
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 85 00 	call	0x10a	; 0x10a <ENABLE_STATE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	8f e6       	ldi	r24, 0x6F	; 111
 20c:	97 e1       	ldi	r25, 0x17	; 23
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_INIT+0x7a>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_INIT+0x80>
 214:	00 00       	nop
	_delay_us(2000);
	
	LCD_COMMAND(INITIALIZE_COMMAND_1); 
 216:	83 e3       	ldi	r24, 0x33	; 51
 218:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_COMMAND>
 21c:	8b e2       	ldi	r24, 0x2B	; 43
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <LCD_INIT+0x8c>
 224:	00 c0       	rjmp	.+0      	; 0x226 <LCD_INIT+0x92>
 226:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(INITIALIZE_COMMAND_2); 
 228:	82 e3       	ldi	r24, 0x32	; 50
 22a:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_COMMAND>
 22e:	8b e2       	ldi	r24, 0x2B	; 43
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCD_INIT+0x9e>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_INIT+0xa4>
 238:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(BIT_MODE4); 
 23a:	88 e2       	ldi	r24, 0x28	; 40
 23c:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_COMMAND>
 240:	8b e2       	ldi	r24, 0x2B	; 43
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <LCD_INIT+0xb0>
 248:	00 c0       	rjmp	.+0      	; 0x24a <LCD_INIT+0xb6>
 24a:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(DISPLAY_ON_CURSOR_BLINKING); 
 24c:	8f e0       	ldi	r24, 0x0F	; 15
 24e:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_COMMAND>
 252:	8b e2       	ldi	r24, 0x2B	; 43
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <LCD_INIT+0xc2>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <LCD_INIT+0xc8>
 25c:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(CLEAR_DISPLAY); 
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_COMMAND>
 264:	8f e6       	ldi	r24, 0x6F	; 111
 266:	97 e1       	ldi	r25, 0x17	; 23
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <LCD_INIT+0xd4>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <LCD_INIT+0xda>
 26e:	00 00       	nop
	_delay_us(2000);
	LCD_COMMAND(SHIFT_CURSOR_RIGHT); 
 270:	86 e0       	ldi	r24, 0x06	; 6
 272:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_COMMAND>
 276:	8b e2       	ldi	r24, 0x2B	; 43
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <LCD_INIT+0xe6>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <LCD_INIT+0xec>
 280:	00 00       	nop
 282:	08 95       	ret

00000284 <LED_ON>:

#include "LEDS_INTERFACE.h"

extern void LED_ON(uint8_t u8LED_Number)
{
	if (u8LED_Number == LED1)
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	31 f4       	brne	.+12     	; 0x294 <LED_ON+0x10>
	{
		Pin_set(LED1_PORT , LED1_PIN_NUMBER);
 288:	65 e0       	ldi	r22, 0x05	; 5
 28a:	82 e3       	ldi	r24, 0x32	; 50
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Pin_set>
 292:	08 95       	ret
	}
	else if (u8LED_Number == LED2)
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	31 f4       	brne	.+12     	; 0x2a4 <LED_ON+0x20>
	{
		Pin_set(LED2_PORT , LED2_PIN_NUMBER);
 298:	66 e0       	ldi	r22, 0x06	; 6
 29a:	82 e3       	ldi	r24, 0x32	; 50
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Pin_set>
 2a2:	08 95       	ret
	}
	else if (u8LED_Number == LED3)
 2a4:	83 30       	cpi	r24, 0x03	; 3
 2a6:	29 f4       	brne	.+10     	; 0x2b2 <LED_ON+0x2e>
	{
		Pin_set(LED3_PORT , LED3_PIN_NUMBER);
 2a8:	67 e0       	ldi	r22, 0x07	; 7
 2aa:	82 e3       	ldi	r24, 0x32	; 50
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Pin_set>
 2b2:	08 95       	ret

000002b4 <LED_OFF>:
	}
}

extern void LED_OFF(uint8_t u8LED_Number)
{
	if (u8LED_Number == LED1)
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	31 f4       	brne	.+12     	; 0x2c4 <LED_OFF+0x10>
	{
		Pin_reset(LED1_PORT , LED1_PIN_NUMBER);
 2b8:	65 e0       	ldi	r22, 0x05	; 5
 2ba:	82 e3       	ldi	r24, 0x32	; 50
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Pin_reset>
 2c2:	08 95       	ret
	}
	else if (u8LED_Number == LED2)
 2c4:	82 30       	cpi	r24, 0x02	; 2
 2c6:	31 f4       	brne	.+12     	; 0x2d4 <LED_OFF+0x20>
	{
		Pin_reset(LED2_PORT , LED2_PIN_NUMBER);
 2c8:	66 e0       	ldi	r22, 0x06	; 6
 2ca:	82 e3       	ldi	r24, 0x32	; 50
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Pin_reset>
 2d2:	08 95       	ret
	}
	else if (u8LED_Number == LED3)
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	29 f4       	brne	.+10     	; 0x2e2 <LED_OFF+0x2e>
	{
		Pin_reset(LED3_PORT , LED3_PIN_NUMBER);
 2d8:	67 e0       	ldi	r22, 0x07	; 7
 2da:	82 e3       	ldi	r24, 0x32	; 50
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Pin_reset>
 2e2:	08 95       	ret

000002e4 <RELAY_OFF>:
	Pin_set(RELAY_PORT , RELAY_PIN_NUMBER);
}

extern void RELAY_OFF()
{
	Pin_reset(RELAY_PORT , RELAY_PIN_NUMBER);
 2e4:	63 e0       	ldi	r22, 0x03	; 3
 2e6:	82 e3       	ldi	r24, 0x32	; 50
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Pin_reset>
 2ee:	08 95       	ret

000002f0 <main>:
int main(void)
{	
	// OUTPUTS
	
		// LEDS
	Pin_mode(LED1_PORT , LED1_DDR , LED1_PIN_NUMBER , OUTPUT);
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	45 e0       	ldi	r20, 0x05	; 5
 2f4:	61 e3       	ldi	r22, 0x31	; 49
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	82 e3       	ldi	r24, 0x32	; 50
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
	Pin_mode(LED2_PORT , LED2_DDR , LED2_PIN_NUMBER , OUTPUT);
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	46 e0       	ldi	r20, 0x06	; 6
 304:	61 e3       	ldi	r22, 0x31	; 49
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	82 e3       	ldi	r24, 0x32	; 50
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
	Pin_mode(LED3_PORT , LED3_DDR , LED3_PIN_NUMBER , OUTPUT);
 310:	21 e0       	ldi	r18, 0x01	; 1
 312:	47 e0       	ldi	r20, 0x07	; 7
 314:	61 e3       	ldi	r22, 0x31	; 49
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	82 e3       	ldi	r24, 0x32	; 50
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
		
		//BUZZER
	Pin_mode(BUZZER_PORT , BUZZER_DDR , BUZZER_PIN_NUMBER , OUTPUT);
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	44 e0       	ldi	r20, 0x04	; 4
 324:	61 e3       	ldi	r22, 0x31	; 49
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	82 e3       	ldi	r24, 0x32	; 50
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
		
		//RELAY
	Pin_mode(RELAY_PORT , RELAY_DDR , RELAY_PIN_NUMBER , OUTPUT);
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	43 e0       	ldi	r20, 0x03	; 3
 334:	61 e3       	ldi	r22, 0x31	; 49
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	82 e3       	ldi	r24, 0x32	; 50
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
	Pin_mode(SEGMENT_D_PORT , SEGMENT_D_DDR , SEGMENT_D_PIN_NUMBER , OUTPUT);
	*/
	// INPUTS

		// BUTTONS
	Pin_mode(BUTTON0_PORT , BUTTON0_DDR , BUTTON0_PIN_NUMBER , INPUT);
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	61 e3       	ldi	r22, 0x31	; 49
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	82 e3       	ldi	r24, 0x32	; 50
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
	Pin_mode(BUTTON1_PORT , BUTTON1_DDR , BUTTON1_PIN_NUMBER , INPUT);
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	61 e3       	ldi	r22, 0x31	; 49
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	82 e3       	ldi	r24, 0x32	; 50
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>
	Pin_mode(BUTTON2_PORT , BUTTON2_DDR , BUTTON2_PIN_NUMBER , INPUT);
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	42 e0       	ldi	r20, 0x02	; 2
 364:	61 e3       	ldi	r22, 0x31	; 49
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	82 e3       	ldi	r24, 0x32	; 50
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Pin_mode>

	// Setting initial states
	
	LED_OFF(LED1);
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LED_OFF>
	LED_OFF(LED2);
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LED_OFF>
	LED_OFF(LED3);
 37c:	83 e0       	ldi	r24, 0x03	; 3
 37e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LED_OFF>
	BUZZER_OFF();
 382:	0e 94 49 00 	call	0x92	; 0x92 <BUZZER_OFF>
	RELAY_OFF();
 386:	0e 94 72 01 	call	0x2e4	; 0x2e4 <RELAY_OFF>
	/*SEGMENT_RESET();*/
	LCD_INIT();
 38a:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_INIT>
		else
		{
			KEYPAD_WITH_LCD();
		}*/
		
		LED_ON(LED1);
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 42 01 	call	0x284	; 0x284 <LED_ON>
		T0_DELAY_ms(2000);
 394:	60 ed       	ldi	r22, 0xD0	; 208
 396:	77 e0       	ldi	r23, 0x07	; 7
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 4a 02 	call	0x494	; 0x494 <T0_DELAY_ms>
		LED_OFF(LED1);
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LED_OFF>
		T0_DELAY_ms(2000);
 3a6:	60 ed       	ldi	r22, 0xD0	; 208
 3a8:	77 e0       	ldi	r23, 0x07	; 7
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 4a 02 	call	0x494	; 0x494 <T0_DELAY_ms>
 3b2:	ed cf       	rjmp	.-38     	; 0x38e <main+0x9e>

000003b4 <Pin_set>:
	(*(volatile uint8_t *) (PORT_address)) &= ~(1<<Pin_index);
}

extern void Pin_toggle( unsigned int PORT_address , uint8_t Pin_index)
{
	(*(volatile uint8_t *) (PORT_address)) ^= (1<<Pin_index);
 3b4:	fc 01       	movw	r30, r24
 3b6:	40 81       	ld	r20, Z
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <Pin_set+0xe>
 3be:	22 0f       	add	r18, r18
 3c0:	33 1f       	adc	r19, r19
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <Pin_set+0xa>
 3c6:	24 2b       	or	r18, r20
 3c8:	20 83       	st	Z, r18
 3ca:	08 95       	ret

000003cc <Pin_reset>:
 3cc:	fc 01       	movw	r30, r24
 3ce:	90 81       	ld	r25, Z
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <Pin_reset+0xe>
 3d6:	22 0f       	add	r18, r18
 3d8:	33 1f       	adc	r19, r19
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <Pin_reset+0xa>
 3de:	20 95       	com	r18
 3e0:	29 23       	and	r18, r25
 3e2:	20 83       	st	Z, r18
 3e4:	08 95       	ret

000003e6 <Pin_mode>:
}

extern void Pin_mode(unsigned int PORT_address , unsigned int DDR_address , uint8_t Pin_index , uint8_t Pin_state)
{
	if (Pin_state == INPUT)
 3e6:	21 11       	cpse	r18, r1
 3e8:	12 c0       	rjmp	.+36     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	{
		(*(volatile uint8_t *)(DDR_address)) &= ~(1<<Pin_index) ;
 3ea:	fb 01       	movw	r30, r22
 3ec:	50 81       	ld	r21, Z
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <Pin_mode+0x12>
 3f4:	22 0f       	add	r18, r18
 3f6:	33 1f       	adc	r19, r19
 3f8:	4a 95       	dec	r20
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <Pin_mode+0xe>
 3fc:	32 2f       	mov	r19, r18
 3fe:	30 95       	com	r19
 400:	35 23       	and	r19, r21
 402:	30 83       	st	Z, r19
		(*(volatile uint8_t *)(PORT_address)) |= (1<<Pin_index); // To activate the pull up resistor
 404:	fc 01       	movw	r30, r24
 406:	30 81       	ld	r19, Z
 408:	23 2b       	or	r18, r19
 40a:	20 83       	st	Z, r18
 40c:	08 95       	ret
	}
	else if (Pin_state == OUTPUT)
 40e:	21 30       	cpi	r18, 0x01	; 1
 410:	59 f4       	brne	.+22     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	{
		(*(volatile uint8_t *)(DDR_address )) |= (1<<Pin_index) ;
 412:	fb 01       	movw	r30, r22
 414:	20 81       	ld	r18, Z
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	4a 95       	dec	r20
 422:	e2 f7       	brpl	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 424:	82 2b       	or	r24, r18
 426:	80 83       	st	Z, r24
 428:	08 95       	ret

0000042a <TIMER0_SET_PRESCALE_64>:
	TCCR_0 |= 0x03 ;
}

extern void TIMER0_STOP()
{
	TCCR_0 = 0x00;
 42a:	83 b7       	in	r24, 0x33	; 51
 42c:	94 b7       	in	r25, 0x34	; 52
 42e:	14 be       	out	0x34, r1	; 52
 430:	13 be       	out	0x33, r1	; 51
 432:	83 b7       	in	r24, 0x33	; 51
 434:	94 b7       	in	r25, 0x34	; 52
 436:	14 be       	out	0x34, r1	; 52
 438:	13 be       	out	0x33, r1	; 51
 43a:	83 b7       	in	r24, 0x33	; 51
 43c:	94 b7       	in	r25, 0x34	; 52
 43e:	14 be       	out	0x34, r1	; 52
 440:	13 be       	out	0x33, r1	; 51
 442:	83 b7       	in	r24, 0x33	; 51
 444:	94 b7       	in	r25, 0x34	; 52
 446:	83 60       	ori	r24, 0x03	; 3
 448:	94 bf       	out	0x34, r25	; 52
 44a:	83 bf       	out	0x33, r24	; 51
 44c:	08 95       	ret

0000044e <TIMER0_DISABLE_IOVERFLOW>:
}

extern void TIMER0_DISABLE_IOVERFLOW()
{
	TCIMSK &= ( 1<< TOIE0);	
 44e:	89 b7       	in	r24, 0x39	; 57
 450:	9a b7       	in	r25, 0x3a	; 58
 452:	81 70       	andi	r24, 0x01	; 1
 454:	99 27       	eor	r25, r25
 456:	9a bf       	out	0x3a, r25	; 58
 458:	89 bf       	out	0x39, r24	; 57
 45a:	08 95       	ret

0000045c <T0_DEINIT>:
	sei();  // Enable global interrupt
}

extern void T0_DEINIT(void)
{
	gu8Flag = 0;
 45c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>
	
	TCNT_0 = 0 ;  // Reset counter
 460:	13 be       	out	0x33, r1	; 51
 462:	12 be       	out	0x32, r1	; 50
	TCCR_0 |= 0x03 ;
}

extern void TIMER0_STOP()
{
	TCCR_0 = 0x00;
 464:	14 be       	out	0x34, r1	; 52
 466:	13 be       	out	0x33, r1	; 51
{
	gu8Flag = 0;
	
	TCNT_0 = 0 ;  // Reset counter
	TIMER0_STOP();
	TIMER0_DISABLE_IOVERFLOW();
 468:	0e 94 27 02 	call	0x44e	; 0x44e <TIMER0_DISABLE_IOVERFLOW>
	
	cli();  // Disable global interrupt 
 46c:	f8 94       	cli
 46e:	08 95       	ret

00000470 <TIMER0_ENABLE_IOVERFLOW>:
	TCIMSK &= ( 1<< TOIE0);	
}

extern void TIMER0_ENABLE_IOVERFLOW()
{
	TCIMSK |= (1 << TOIE0);
 470:	89 b7       	in	r24, 0x39	; 57
 472:	9a b7       	in	r25, 0x3a	; 58
 474:	81 60       	ori	r24, 0x01	; 1
 476:	9a bf       	out	0x3a, r25	; 58
 478:	89 bf       	out	0x39, r24	; 57
 47a:	08 95       	ret

0000047c <T0_INIT>:
}


extern void T0_INIT(void)
{
	gu8Flag = 0;
 47c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>
	
	TCNT_0 = 68 ;  // 256-188 (number of maximum counts ) - ( number of needed counts)
 480:	84 e4       	ldi	r24, 0x44	; 68
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	93 bf       	out	0x33, r25	; 51
 486:	82 bf       	out	0x32, r24	; 50
	TIMER0_SET_PRESCALE_64();
 488:	0e 94 15 02 	call	0x42a	; 0x42a <TIMER0_SET_PRESCALE_64>
	TIMER0_ENABLE_IOVERFLOW();
 48c:	0e 94 38 02 	call	0x470	; 0x470 <TIMER0_ENABLE_IOVERFLOW>
	
	sei();  // Enable global interrupt
 490:	78 94       	sei
 492:	08 95       	ret

00000494 <T0_DELAY_ms>:
#include "TIMER0/TIMER0.h"

volatile static uint8_t gu8Flag = 0;

extern void T0_DELAY_ms(uint32_t u32Delay_time)
{
 494:	cf 92       	push	r12
 496:	df 92       	push	r13
 498:	ef 92       	push	r14
 49a:	ff 92       	push	r15
 49c:	6b 01       	movw	r12, r22
 49e:	7c 01       	movw	r14, r24
	while (u32Delay_time != 0)
 4a0:	67 2b       	or	r22, r23
 4a2:	68 2b       	or	r22, r24
 4a4:	69 2b       	or	r22, r25
 4a6:	91 f0       	breq	.+36     	; 0x4cc <T0_DELAY_ms+0x38>
	{
		T0_INIT();
 4a8:	0e 94 3e 02 	call	0x47c	; 0x47c <T0_INIT>
		
		while (gu8Flag == 0);
 4ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 4b0:	88 23       	and	r24, r24
 4b2:	e1 f3       	breq	.-8      	; 0x4ac <T0_DELAY_ms+0x18>
		
		u32Delay_time -- ;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	c8 1a       	sub	r12, r24
 4b8:	d1 08       	sbc	r13, r1
 4ba:	e1 08       	sbc	r14, r1
 4bc:	f1 08       	sbc	r15, r1
		
		T0_DEINIT();
 4be:	0e 94 2e 02 	call	0x45c	; 0x45c <T0_DEINIT>

volatile static uint8_t gu8Flag = 0;

extern void T0_DELAY_ms(uint32_t u32Delay_time)
{
	while (u32Delay_time != 0)
 4c2:	c1 14       	cp	r12, r1
 4c4:	d1 04       	cpc	r13, r1
 4c6:	e1 04       	cpc	r14, r1
 4c8:	f1 04       	cpc	r15, r1
 4ca:	71 f7       	brne	.-36     	; 0x4a8 <T0_DELAY_ms+0x14>
		
		u32Delay_time -- ;
		
		T0_DEINIT();
	}
}
 4cc:	ff 90       	pop	r15
 4ce:	ef 90       	pop	r14
 4d0:	df 90       	pop	r13
 4d2:	cf 90       	pop	r12
 4d4:	08 95       	ret

000004d6 <__vector_11>:
{
	TCIMSK |= (1 << TOIE0);
}

ISR(TIMER0_OVF_vect)
{
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	8f 93       	push	r24
	gu8Flag ++ ;
 4e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 4e6:	8f 5f       	subi	r24, 0xFF	; 255
 4e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
 4ec:	8f 91       	pop	r24
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <_exit>:
 4f8:	f8 94       	cli

000004fa <__stop_program>:
 4fa:	ff cf       	rjmp	.-2      	; 0x4fa <__stop_program>
