
AMIT_LEARNING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000006fa  0000076e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001d0  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000026d8  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b68  00000000  00000000  000030a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001150  00000000  00000000  00003c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a4  00000000  00000000  00004d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ad  00000000  00000000  00005100  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014de  00000000  00000000  000057ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  00006c8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <main>
  8a:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUTTON0_READ>:
 */ 

#include "BUTTON_INTERFACE.h"

extern void BUTTON0_READ(uint8_t *pu8Reading)
{
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	1f 92       	push	r1
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	7c 01       	movw	r14, r24
	uint8_t u8Temp = 0;
  a6:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Num_of_correct_checks = 0;
	
	Pin_read(BUTTON0_PIN , BUTTON0_PIN_NUMBER , &u8Temp);
  a8:	ae 01       	movw	r20, r28
  aa:	4f 5f       	subi	r20, 0xFF	; 255
  ac:	5f 4f       	sbci	r21, 0xFF	; 255
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	80 e3       	ldi	r24, 0x30	; 48
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Pin_read>
	
	if (u8Temp != 0)
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	88 23       	and	r24, r24
  bc:	b9 f0       	breq	.+46     	; 0xec <BUTTON0_READ+0x5a>
  be:	16 e9       	ldi	r17, 0x96	; 150
  c0:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
		{
			Pin_read(BUTTON0_PIN , BUTTON0_PIN_NUMBER , &u8Temp);
  c2:	ae 01       	movw	r20, r28
  c4:	4f 5f       	subi	r20, 0xFF	; 255
  c6:	5f 4f       	sbci	r21, 0xFF	; 255
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	80 e3       	ldi	r24, 0x30	; 48
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Pin_read>
			
			if (u8Temp != 0)
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	81 11       	cpse	r24, r1
			{
				u8Num_of_correct_checks ++ ;
  d6:	0f 5f       	subi	r16, 0xFF	; 255
  d8:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(BUTTON0_PIN , BUTTON0_PIN_NUMBER , &u8Temp);
	
	if (u8Temp != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
  da:	99 f7       	brne	.-26     	; 0xc2 <BUTTON0_READ+0x30>
			{
				
			}
		}
		
		if (u8Num_of_correct_checks == NUMBER_OF_CHECKS)
  dc:	06 39       	cpi	r16, 0x96	; 150
  de:	19 f4       	brne	.+6      	; 0xe6 <BUTTON0_READ+0x54>
		{
			*pu8Reading = u8Temp;
  e0:	f7 01       	movw	r30, r14
  e2:	80 83       	st	Z, r24
  e4:	05 c0       	rjmp	.+10     	; 0xf0 <BUTTON0_READ+0x5e>
		}
		else
		{
			*pu8Reading = 0;
  e6:	f7 01       	movw	r30, r14
  e8:	10 82       	st	Z, r1
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <BUTTON0_READ+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
  ec:	f7 01       	movw	r30, r14
  ee:	10 82       	st	Z, r1
	}
	
}
  f0:	0f 90       	pop	r0
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	1f 91       	pop	r17
  f8:	0f 91       	pop	r16
  fa:	ff 90       	pop	r15
  fc:	ef 90       	pop	r14
  fe:	08 95       	ret

00000100 <BUTTON1_READ>:

extern void BUTTON1_READ(uint8_t *pu8Reading)
{
 100:	ef 92       	push	r14
 102:	ff 92       	push	r15
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	7c 01       	movw	r14, r24
	uint8_t u8Temp = 0;
 114:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Num_of_correct_checks = 0;
	
	Pin_read(BUTTON1_PIN , BUTTON1_PIN_NUMBER , &u8Temp);
 116:	ae 01       	movw	r20, r28
 118:	4f 5f       	subi	r20, 0xFF	; 255
 11a:	5f 4f       	sbci	r21, 0xFF	; 255
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	80 e3       	ldi	r24, 0x30	; 48
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Pin_read>
	
	if (u8Temp != 0)
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	88 23       	and	r24, r24
 12a:	b9 f0       	breq	.+46     	; 0x15a <BUTTON1_READ+0x5a>
 12c:	16 e9       	ldi	r17, 0x96	; 150
 12e:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
		{
			Pin_read(BUTTON1_PIN , BUTTON1_PIN_NUMBER , &u8Temp);
 130:	ae 01       	movw	r20, r28
 132:	4f 5f       	subi	r20, 0xFF	; 255
 134:	5f 4f       	sbci	r21, 0xFF	; 255
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Pin_read>
			
			if (u8Temp != 0)
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	81 11       	cpse	r24, r1
			{
				u8Num_of_correct_checks ++ ;
 144:	0f 5f       	subi	r16, 0xFF	; 255
 146:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(BUTTON1_PIN , BUTTON1_PIN_NUMBER , &u8Temp);
	
	if (u8Temp != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
 148:	99 f7       	brne	.-26     	; 0x130 <BUTTON1_READ+0x30>
			{
				
			}
		}
		
		if (u8Num_of_correct_checks == NUMBER_OF_CHECKS)
 14a:	06 39       	cpi	r16, 0x96	; 150
 14c:	19 f4       	brne	.+6      	; 0x154 <BUTTON1_READ+0x54>
		{
			*pu8Reading = u8Temp;
 14e:	f7 01       	movw	r30, r14
 150:	80 83       	st	Z, r24
 152:	05 c0       	rjmp	.+10     	; 0x15e <BUTTON1_READ+0x5e>
		}
		else
		{
			*pu8Reading = 0;
 154:	f7 01       	movw	r30, r14
 156:	10 82       	st	Z, r1
 158:	02 c0       	rjmp	.+4      	; 0x15e <BUTTON1_READ+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
 15a:	f7 01       	movw	r30, r14
 15c:	10 82       	st	Z, r1
	}
}
 15e:	0f 90       	pop	r0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	ff 90       	pop	r15
 16a:	ef 90       	pop	r14
 16c:	08 95       	ret

0000016e <BUTTON2_READ>:

extern void BUTTON2_READ(uint8_t *pu8Reading)
{
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	1f 92       	push	r1
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	7c 01       	movw	r14, r24
	uint8_t u8Temp = 0;
 182:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Num_of_correct_checks = 0;
	
	Pin_read(BUTTON2_PIN , BUTTON2_PIN_NUMBER , &u8Temp);
 184:	ae 01       	movw	r20, r28
 186:	4f 5f       	subi	r20, 0xFF	; 255
 188:	5f 4f       	sbci	r21, 0xFF	; 255
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	80 e3       	ldi	r24, 0x30	; 48
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Pin_read>
	
	if (u8Temp != 0)
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	88 23       	and	r24, r24
 198:	b9 f0       	breq	.+46     	; 0x1c8 <BUTTON2_READ+0x5a>
 19a:	16 e9       	ldi	r17, 0x96	; 150
 19c:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
		{
			Pin_read(BUTTON2_PIN , BUTTON2_PIN_NUMBER , &u8Temp);
 19e:	ae 01       	movw	r20, r28
 1a0:	4f 5f       	subi	r20, 0xFF	; 255
 1a2:	5f 4f       	sbci	r21, 0xFF	; 255
 1a4:	62 e0       	ldi	r22, 0x02	; 2
 1a6:	80 e3       	ldi	r24, 0x30	; 48
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Pin_read>
			
			if (u8Temp != 0)
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	81 11       	cpse	r24, r1
			{
				u8Num_of_correct_checks ++ ;
 1b2:	0f 5f       	subi	r16, 0xFF	; 255
 1b4:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(BUTTON2_PIN , BUTTON2_PIN_NUMBER , &u8Temp);
	
	if (u8Temp != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
 1b6:	99 f7       	brne	.-26     	; 0x19e <BUTTON2_READ+0x30>
			{
				
			}
		}
		
		if (u8Num_of_correct_checks == NUMBER_OF_CHECKS)
 1b8:	06 39       	cpi	r16, 0x96	; 150
 1ba:	19 f4       	brne	.+6      	; 0x1c2 <BUTTON2_READ+0x54>
		{
			*pu8Reading = u8Temp;
 1bc:	f7 01       	movw	r30, r14
 1be:	80 83       	st	Z, r24
 1c0:	05 c0       	rjmp	.+10     	; 0x1cc <BUTTON2_READ+0x5e>
		}
		else
		{
			*pu8Reading = 0;
 1c2:	f7 01       	movw	r30, r14
 1c4:	10 82       	st	Z, r1
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <BUTTON2_READ+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
 1c8:	f7 01       	movw	r30, r14
 1ca:	10 82       	st	Z, r1
	}
 1cc:	0f 90       	pop	r0
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	08 95       	ret

000001dc <BUZZER_OFF>:
	Pin_set(BUZZER_PORT , BUZZER_PIN_NUMBER);
}

extern void BUZZER_OFF()
{
	Pin_reset(BUZZER_PORT , BUZZER_PIN_NUMBER);
 1dc:	64 e0       	ldi	r22, 0x04	; 4
 1de:	82 e3       	ldi	r24, 0x32	; 50
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 3f 03 	call	0x67e	; 0x67e <Pin_reset>
 1e6:	08 95       	ret

000001e8 <RW_STATE>:
 */ 

#include "LCD_INTERFACE.h"

extern void RW_STATE(uint8_t u8State)
{
 1e8:	cf 93       	push	r28
 1ea:	c8 2f       	mov	r28, r24
	Pin_mode(RW_PORT, RW_DDR , RW_PIN_NUMBER , OUTPUT);
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	42 e0       	ldi	r20, 0x02	; 2
 1f0:	67 e3       	ldi	r22, 0x37	; 55
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	88 e3       	ldi	r24, 0x38	; 56
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>

	if (u8State == RW_WRITE)
 1fc:	c1 11       	cpse	r28, r1
 1fe:	06 c0       	rjmp	.+12     	; 0x20c <RW_STATE+0x24>
	{
		Pin_reset(RW_PORT , RW_PIN_NUMBER);
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	88 e3       	ldi	r24, 0x38	; 56
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 3f 03 	call	0x67e	; 0x67e <Pin_reset>
 20a:	07 c0       	rjmp	.+14     	; 0x21a <RW_STATE+0x32>
	}
	else if (u8State == RW_READ)
 20c:	c1 30       	cpi	r28, 0x01	; 1
 20e:	29 f4       	brne	.+10     	; 0x21a <RW_STATE+0x32>
	{
		Pin_set(RW_PORT , RW_PIN_NUMBER);
 210:	62 e0       	ldi	r22, 0x02	; 2
 212:	88 e3       	ldi	r24, 0x38	; 56
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 33 03 	call	0x666	; 0x666 <Pin_set>
	}
	else
	{
		
	}
}
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <RS_STATE>:

extern void RS_STATE(uint8_t u8State)
{
 21e:	cf 93       	push	r28
 220:	c8 2f       	mov	r28, r24
	Pin_mode(RS_PORT, RS_DDR , RS_PIN_NUMBER , OUTPUT);
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	67 e3       	ldi	r22, 0x37	; 55
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	88 e3       	ldi	r24, 0x38	; 56
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>

	if (u8State == RS_COMMAND)
 232:	c1 11       	cpse	r28, r1
 234:	06 c0       	rjmp	.+12     	; 0x242 <RS_STATE+0x24>
	{
		Pin_reset(RS_PORT , RS_PIN_NUMBER);
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	88 e3       	ldi	r24, 0x38	; 56
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 3f 03 	call	0x67e	; 0x67e <Pin_reset>
 240:	07 c0       	rjmp	.+14     	; 0x250 <RS_STATE+0x32>
	}
	else if (u8State == RS_DATA)
 242:	c1 30       	cpi	r28, 0x01	; 1
 244:	29 f4       	brne	.+10     	; 0x250 <RS_STATE+0x32>
	{
		Pin_set(RS_PORT , RS_PIN_NUMBER);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	88 e3       	ldi	r24, 0x38	; 56
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 33 03 	call	0x666	; 0x666 <Pin_set>
	}
	else
	{
		
	}
}
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <ENABLE_STATE>:

extern void ENABLE_STATE(uint8_t u8State)
{
 254:	cf 93       	push	r28
 256:	c8 2f       	mov	r28, r24
	Pin_mode(ENABLE_PORT, ENABLE_DDR , ENABLE_PIN_NUMBER , OUTPUT);
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	43 e0       	ldi	r20, 0x03	; 3
 25c:	67 e3       	ldi	r22, 0x37	; 55
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	88 e3       	ldi	r24, 0x38	; 56
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>

	if (u8State == ENABLE_LOW)
 268:	c1 11       	cpse	r28, r1
 26a:	06 c0       	rjmp	.+12     	; 0x278 <ENABLE_STATE+0x24>
	{
		Pin_reset(ENABLE_PORT , ENABLE_PIN_NUMBER);
 26c:	63 e0       	ldi	r22, 0x03	; 3
 26e:	88 e3       	ldi	r24, 0x38	; 56
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 3f 03 	call	0x67e	; 0x67e <Pin_reset>
 276:	07 c0       	rjmp	.+14     	; 0x286 <ENABLE_STATE+0x32>
	}
	else if (u8State == ENABLE_HIGH)
 278:	c1 30       	cpi	r28, 0x01	; 1
 27a:	29 f4       	brne	.+10     	; 0x286 <ENABLE_STATE+0x32>
	{
		Pin_set(ENABLE_PORT , ENABLE_PIN_NUMBER);
 27c:	63 e0       	ldi	r22, 0x03	; 3
 27e:	88 e3       	ldi	r24, 0x38	; 56
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 33 03 	call	0x666	; 0x666 <Pin_set>
	}
	else
	{
		
	}
}
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <HIGH_TO_LOW_PULSE>:

extern void HIGH_TO_LOW_PULSE()
{
	ENABLE_STATE(ENABLE_HIGH);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 2a 01 	call	0x254	; 0x254 <ENABLE_STATE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 290:	8a e1       	ldi	r24, 0x1A	; 26
 292:	8a 95       	dec	r24
 294:	f1 f7       	brne	.-4      	; 0x292 <HIGH_TO_LOW_PULSE+0x8>
 296:	00 c0       	rjmp	.+0      	; 0x298 <HIGH_TO_LOW_PULSE+0xe>
	_delay_us(PULSE_WIDTH);
	ENABLE_STATE(ENABLE_LOW);
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 2a 01 	call	0x254	; 0x254 <ENABLE_STATE>
 29e:	8a e6       	ldi	r24, 0x6A	; 106
 2a0:	8a 95       	dec	r24
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <HIGH_TO_LOW_PULSE+0x16>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <HIGH_TO_LOW_PULSE+0x1c>
 2a6:	08 95       	ret

000002a8 <LCD_COMMAND>:
	_delay_us(20);  
}

extern void LCD_COMMAND(uint8_t u8Command)
{
 2a8:	cf 93       	push	r28
 2aa:	c8 2f       	mov	r28, r24
	*((unsigned int *)(D4_PORT)) =(*((unsigned int *)(D4_PORT)) & 0x0F) | (u8Command & 0xF0) ;
 2ac:	8b b3       	in	r24, 0x1b	; 27
 2ae:	9c b3       	in	r25, 0x1c	; 28
 2b0:	8f 70       	andi	r24, 0x0F	; 15
 2b2:	99 27       	eor	r25, r25
 2b4:	2c 2f       	mov	r18, r28
 2b6:	20 7f       	andi	r18, 0xF0	; 240
 2b8:	82 2b       	or	r24, r18
 2ba:	9c bb       	out	0x1c, r25	; 28
 2bc:	8b bb       	out	0x1b, r24	; 27
	RS_STATE(RS_COMMAND);
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 0f 01 	call	0x21e	; 0x21e <RS_STATE>
	RW_STATE(RW_WRITE);
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <RW_STATE>
	HIGH_TO_LOW_PULSE();
 2ca:	0e 94 45 01 	call	0x28a	; 0x28a <HIGH_TO_LOW_PULSE>
	
	 *((unsigned int *)(D4_PORT)) = u8Command << 4;
 2ce:	20 e1       	ldi	r18, 0x10	; 16
 2d0:	c2 9f       	mul	r28, r18
 2d2:	c0 01       	movw	r24, r0
 2d4:	11 24       	eor	r1, r1
 2d6:	9c bb       	out	0x1c, r25	; 28
 2d8:	8b bb       	out	0x1b, r24	; 27
	 HIGH_TO_LOW_PULSE();
 2da:	0e 94 45 01 	call	0x28a	; 0x28a <HIGH_TO_LOW_PULSE>
}
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <LCD_DATA>:

extern void LCD_DATA(uint8_t u8Data)
{
 2e2:	cf 93       	push	r28
 2e4:	c8 2f       	mov	r28, r24
	*((unsigned int *)(D4_PORT)) = (*((unsigned int *)(D4_PORT)) & 0x0F) | (u8Data & 0xF0) ;
 2e6:	8b b3       	in	r24, 0x1b	; 27
 2e8:	9c b3       	in	r25, 0x1c	; 28
 2ea:	8f 70       	andi	r24, 0x0F	; 15
 2ec:	99 27       	eor	r25, r25
 2ee:	2c 2f       	mov	r18, r28
 2f0:	20 7f       	andi	r18, 0xF0	; 240
 2f2:	82 2b       	or	r24, r18
 2f4:	9c bb       	out	0x1c, r25	; 28
 2f6:	8b bb       	out	0x1b, r24	; 27
	RS_STATE(RS_DATA);
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 0f 01 	call	0x21e	; 0x21e <RS_STATE>
	RW_STATE(RW_WRITE);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <RW_STATE>
	HIGH_TO_LOW_PULSE();
 304:	0e 94 45 01 	call	0x28a	; 0x28a <HIGH_TO_LOW_PULSE>
	
	*((unsigned int *)(D4_PORT)) = u8Data << 4;
 308:	20 e1       	ldi	r18, 0x10	; 16
 30a:	c2 9f       	mul	r28, r18
 30c:	c0 01       	movw	r24, r0
 30e:	11 24       	eor	r1, r1
 310:	9c bb       	out	0x1c, r25	; 28
 312:	8b bb       	out	0x1b, r24	; 27
	HIGH_TO_LOW_PULSE();
 314:	0e 94 45 01 	call	0x28a	; 0x28a <HIGH_TO_LOW_PULSE>
}
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <LCD_DATA_STRING>:

extern void LCD_DATA_STRING(uint8_t *pu8Data , uint8_t u8Size)
{
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
	uint8_t u8Count = 0;
	
	for (u8Count = 0; u8Count <u8Size ; u8Count ++)
 324:	66 23       	and	r22, r22
 326:	71 f0       	breq	.+28     	; 0x344 <LCD_DATA_STRING+0x28>
 328:	ec 01       	movw	r28, r24
 32a:	61 50       	subi	r22, 0x01	; 1
 32c:	06 2f       	mov	r16, r22
 32e:	10 e0       	ldi	r17, 0x00	; 0
 330:	0f 5f       	subi	r16, 0xFF	; 255
 332:	1f 4f       	sbci	r17, 0xFF	; 255
 334:	08 0f       	add	r16, r24
 336:	19 1f       	adc	r17, r25
	{
		LCD_DATA(pu8Data[u8Count]);
 338:	89 91       	ld	r24, Y+
 33a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_DATA>

extern void LCD_DATA_STRING(uint8_t *pu8Data , uint8_t u8Size)
{
	uint8_t u8Count = 0;
	
	for (u8Count = 0; u8Count <u8Size ; u8Count ++)
 33e:	c0 17       	cp	r28, r16
 340:	d1 07       	cpc	r29, r17
 342:	d1 f7       	brne	.-12     	; 0x338 <LCD_DATA_STRING+0x1c>
	{
		LCD_DATA(pu8Data[u8Count]);
	}
}
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	08 95       	ret

0000034e <LCD_INIT>:

extern void LCD_INIT()
{
	Pin_mode(RW_PORT, RW_DDR , RW_PIN_NUMBER , OUTPUT);
 34e:	21 e0       	ldi	r18, 0x01	; 1
 350:	42 e0       	ldi	r20, 0x02	; 2
 352:	67 e3       	ldi	r22, 0x37	; 55
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	88 e3       	ldi	r24, 0x38	; 56
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
	Pin_mode(RS_PORT, RS_DDR , RS_PIN_NUMBER , OUTPUT);
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	67 e3       	ldi	r22, 0x37	; 55
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	88 e3       	ldi	r24, 0x38	; 56
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
	Pin_mode(ENABLE_PORT, ENABLE_DDR , ENABLE_PIN_NUMBER , OUTPUT);
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	43 e0       	ldi	r20, 0x03	; 3
 372:	67 e3       	ldi	r22, 0x37	; 55
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	88 e3       	ldi	r24, 0x38	; 56
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
	
	Pin_mode(D4_PORT, D4_DDR , D4_PIN_NUMBER , OUTPUT);
 37e:	21 e0       	ldi	r18, 0x01	; 1
 380:	44 e0       	ldi	r20, 0x04	; 4
 382:	6a e3       	ldi	r22, 0x3A	; 58
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	8b e3       	ldi	r24, 0x3B	; 59
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
	Pin_mode(D5_PORT, D5_DDR , D5_PIN_NUMBER , OUTPUT);
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	45 e0       	ldi	r20, 0x05	; 5
 392:	6a e3       	ldi	r22, 0x3A	; 58
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	8b e3       	ldi	r24, 0x3B	; 59
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
	Pin_mode(D6_PORT, D6_DDR , D6_PIN_NUMBER , OUTPUT);
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	46 e0       	ldi	r20, 0x06	; 6
 3a2:	6a e3       	ldi	r22, 0x3A	; 58
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	8b e3       	ldi	r24, 0x3B	; 59
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
	Pin_mode(D7_PORT, D7_DDR , D7_PIN_NUMBER , OUTPUT);
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	47 e0       	ldi	r20, 0x07	; 7
 3b2:	6a e3       	ldi	r22, 0x3A	; 58
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	8b e3       	ldi	r24, 0x3B	; 59
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
	
	ENABLE_STATE(ENABLE_LOW);
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	0e 94 2a 01 	call	0x254	; 0x254 <ENABLE_STATE>
 3c4:	8f e3       	ldi	r24, 0x3F	; 63
 3c6:	9f e1       	ldi	r25, 0x1F	; 31
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <LCD_INIT+0x7a>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <LCD_INIT+0x80>
 3ce:	00 00       	nop
	_delay_us(2000);
	
	LCD_COMMAND(0x33); // 4-bit mode
 3d0:	83 e3       	ldi	r24, 0x33	; 51
 3d2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_COMMAND>
 3d6:	8f e8       	ldi	r24, 0x8F	; 143
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <LCD_INIT+0x8c>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <LCD_INIT+0x92>
 3e0:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(0x32); // 4-bit mode
 3e2:	82 e3       	ldi	r24, 0x32	; 50
 3e4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_COMMAND>
 3e8:	8f e8       	ldi	r24, 0x8F	; 143
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <LCD_INIT+0x9e>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <LCD_INIT+0xa4>
 3f2:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(0x28); // 4-bit mode
 3f4:	88 e2       	ldi	r24, 0x28	; 40
 3f6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_COMMAND>
 3fa:	8f e8       	ldi	r24, 0x8F	; 143
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <LCD_INIT+0xb0>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(0x0e); // display on , cursor on
 406:	8e e0       	ldi	r24, 0x0E	; 14
 408:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_COMMAND>
 40c:	8f e8       	ldi	r24, 0x8F	; 143
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 416:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(0x01); // Clear LCD
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_COMMAND>
 41e:	8f e3       	ldi	r24, 0x3F	; 63
 420:	9f e1       	ldi	r25, 0x1F	; 31
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 428:	00 00       	nop
	_delay_us(2000);
	LCD_COMMAND(0x06); // Shift cursor right
 42a:	86 e0       	ldi	r24, 0x06	; 6
 42c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_COMMAND>
 430:	8f e8       	ldi	r24, 0x8F	; 143
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop
 43c:	08 95       	ret

0000043e <LED_OFF>:
	}
}

extern void LED_OFF(uint8_t u8LED_Number)
{
	if (u8LED_Number == LED1)
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	31 f4       	brne	.+12     	; 0x44e <LED_OFF+0x10>
	{
		Pin_reset(LED1_PORT , LED1_PIN_NUMBER);
 442:	65 e0       	ldi	r22, 0x05	; 5
 444:	82 e3       	ldi	r24, 0x32	; 50
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 3f 03 	call	0x67e	; 0x67e <Pin_reset>
 44c:	08 95       	ret
	}
	else if (u8LED_Number == LED2)
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	31 f4       	brne	.+12     	; 0x45e <LED_OFF+0x20>
	{
		Pin_reset(LED2_PORT , LED2_PIN_NUMBER);
 452:	66 e0       	ldi	r22, 0x06	; 6
 454:	82 e3       	ldi	r24, 0x32	; 50
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 3f 03 	call	0x67e	; 0x67e <Pin_reset>
 45c:	08 95       	ret
	}
	else if (u8LED_Number == LED3)
 45e:	83 30       	cpi	r24, 0x03	; 3
 460:	29 f4       	brne	.+10     	; 0x46c <LED_OFF+0x2e>
	{
		Pin_reset(LED3_PORT , LED3_PIN_NUMBER);
 462:	67 e0       	ldi	r22, 0x07	; 7
 464:	82 e3       	ldi	r24, 0x32	; 50
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 3f 03 	call	0x67e	; 0x67e <Pin_reset>
 46c:	08 95       	ret

0000046e <RELAY_OFF>:
	Pin_set(RELAY_PORT , RELAY_PIN_NUMBER);
}

extern void RELAY_OFF()
{
	Pin_reset(RELAY_PORT , RELAY_PIN_NUMBER);
 46e:	63 e0       	ldi	r22, 0x03	; 3
 470:	82 e3       	ldi	r24, 0x32	; 50
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 3f 03 	call	0x67e	; 0x67e <Pin_reset>
 478:	08 95       	ret

0000047a <BCD_PIN_RESET>:
	}
}

extern void BCD_PIN_RESET(uint8_t u8Pin_number)
{
	if (u8Pin_number == BCD_A)
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	31 f4       	brne	.+12     	; 0x48a <BCD_PIN_RESET+0x10>
	{
	Pin_reset(SEGMENT_A_PORT , SEGMENT_A_PIN_NUMBER);
 47e:	64 e0       	ldi	r22, 0x04	; 4
 480:	85 e3       	ldi	r24, 0x35	; 53
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 3f 03 	call	0x67e	; 0x67e <Pin_reset>
 488:	08 95       	ret
	}
	else if (u8Pin_number == BCD_B)
 48a:	82 30       	cpi	r24, 0x02	; 2
 48c:	31 f4       	brne	.+12     	; 0x49a <BCD_PIN_RESET+0x20>
	{
	Pin_reset(SEGMENT_B_PORT , SEGMENT_B_PIN_NUMBER);
 48e:	65 e0       	ldi	r22, 0x05	; 5
 490:	85 e3       	ldi	r24, 0x35	; 53
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 3f 03 	call	0x67e	; 0x67e <Pin_reset>
 498:	08 95       	ret
	}
	else if (u8Pin_number == BCD_C)
 49a:	83 30       	cpi	r24, 0x03	; 3
 49c:	31 f4       	brne	.+12     	; 0x4aa <BCD_PIN_RESET+0x30>
	{
	Pin_reset(SEGMENT_C_PORT , SEGMENT_C_PIN_NUMBER);
 49e:	66 e0       	ldi	r22, 0x06	; 6
 4a0:	85 e3       	ldi	r24, 0x35	; 53
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 3f 03 	call	0x67e	; 0x67e <Pin_reset>
 4a8:	08 95       	ret
	}
	else if (u8Pin_number == BCD_D)
 4aa:	84 30       	cpi	r24, 0x04	; 4
 4ac:	29 f4       	brne	.+10     	; 0x4b8 <BCD_PIN_RESET+0x3e>
	{
	Pin_reset(SEGMENT_D_PORT , SEGMENT_D_PIN_NUMBER);
 4ae:	67 e0       	ldi	r22, 0x07	; 7
 4b0:	85 e3       	ldi	r24, 0x35	; 53
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 3f 03 	call	0x67e	; 0x67e <Pin_reset>
 4b8:	08 95       	ret

000004ba <SEGMENT_RESET>:
	}
}

extern void SEGMENT_RESET()
{
	BCD_PIN_RESET(BCD_A);
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	0e 94 3d 02 	call	0x47a	; 0x47a <BCD_PIN_RESET>
	BCD_PIN_RESET(BCD_B);
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	0e 94 3d 02 	call	0x47a	; 0x47a <BCD_PIN_RESET>
	BCD_PIN_RESET(BCD_C);
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	0e 94 3d 02 	call	0x47a	; 0x47a <BCD_PIN_RESET>
	BCD_PIN_RESET(BCD_D);
 4cc:	84 e0       	ldi	r24, 0x04	; 4
 4ce:	0e 94 3d 02 	call	0x47a	; 0x47a <BCD_PIN_RESET>
 4d2:	08 95       	ret

000004d4 <main>:

uint8_t u8Segment7_number1 = 0;
uint8_t u8Segment7_number2 = 0;

int main(void)
{	
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
 4dc:	a3 97       	sbiw	r28, 0x23	; 35
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	f8 94       	cli
 4e2:	de bf       	out	0x3e, r29	; 62
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	cd bf       	out	0x3d, r28	; 61
	// OUTPUTS
	
		// LEDS
		Pin_mode(LED1_PORT , LED1_DDR , LED1_PIN_NUMBER , OUTPUT);
 4e8:	21 e0       	ldi	r18, 0x01	; 1
 4ea:	45 e0       	ldi	r20, 0x05	; 5
 4ec:	61 e3       	ldi	r22, 0x31	; 49
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	82 e3       	ldi	r24, 0x32	; 50
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
		Pin_mode(LED2_PORT , LED2_DDR , LED2_PIN_NUMBER , OUTPUT);
 4f8:	21 e0       	ldi	r18, 0x01	; 1
 4fa:	46 e0       	ldi	r20, 0x06	; 6
 4fc:	61 e3       	ldi	r22, 0x31	; 49
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	82 e3       	ldi	r24, 0x32	; 50
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
		Pin_mode(LED3_PORT , LED3_DDR , LED3_PIN_NUMBER , OUTPUT);
 508:	21 e0       	ldi	r18, 0x01	; 1
 50a:	47 e0       	ldi	r20, 0x07	; 7
 50c:	61 e3       	ldi	r22, 0x31	; 49
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	82 e3       	ldi	r24, 0x32	; 50
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
		
		//BUZZER
		Pin_mode(BUZZER_PORT , BUZZER_DDR , BUZZER_PIN_NUMBER , OUTPUT);
 518:	21 e0       	ldi	r18, 0x01	; 1
 51a:	44 e0       	ldi	r20, 0x04	; 4
 51c:	61 e3       	ldi	r22, 0x31	; 49
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	82 e3       	ldi	r24, 0x32	; 50
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
		
		//RELAY
		Pin_mode(RELAY_PORT , RELAY_DDR , RELAY_PIN_NUMBER , OUTPUT);
 528:	21 e0       	ldi	r18, 0x01	; 1
 52a:	43 e0       	ldi	r20, 0x03	; 3
 52c:	61 e3       	ldi	r22, 0x31	; 49
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	82 e3       	ldi	r24, 0x32	; 50
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
		
		//7SEGMENT
		Pin_mode(SEGMENT1_ENABLE_PORT , SEGMENT1_ENABLE_DDR , SEGMENT1_ENABLE_PIN_NUMBER , OUTPUT);
 538:	21 e0       	ldi	r18, 0x01	; 1
 53a:	42 e0       	ldi	r20, 0x02	; 2
 53c:	64 e3       	ldi	r22, 0x34	; 52
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	85 e3       	ldi	r24, 0x35	; 53
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
		Pin_mode(SEGMENT2_ENABLE_PORT , SEGMENT2_ENABLE_DDR , SEGMENT2_ENABLE_PIN_NUMBER , OUTPUT);
 548:	21 e0       	ldi	r18, 0x01	; 1
 54a:	43 e0       	ldi	r20, 0x03	; 3
 54c:	64 e3       	ldi	r22, 0x34	; 52
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	85 e3       	ldi	r24, 0x35	; 53
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
		Pin_mode(SEGMENT_A_PORT , SEGMENT_A_DDR , SEGMENT_A_PIN_NUMBER , OUTPUT);
 558:	21 e0       	ldi	r18, 0x01	; 1
 55a:	44 e0       	ldi	r20, 0x04	; 4
 55c:	64 e3       	ldi	r22, 0x34	; 52
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	85 e3       	ldi	r24, 0x35	; 53
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
		Pin_mode(SEGMENT_B_PORT , SEGMENT_B_DDR , SEGMENT_B_PIN_NUMBER , OUTPUT);
 568:	21 e0       	ldi	r18, 0x01	; 1
 56a:	45 e0       	ldi	r20, 0x05	; 5
 56c:	64 e3       	ldi	r22, 0x34	; 52
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	85 e3       	ldi	r24, 0x35	; 53
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
		Pin_mode(SEGMENT_C_PORT , SEGMENT_C_DDR , SEGMENT_C_PIN_NUMBER , OUTPUT);
 578:	21 e0       	ldi	r18, 0x01	; 1
 57a:	46 e0       	ldi	r20, 0x06	; 6
 57c:	64 e3       	ldi	r22, 0x34	; 52
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	85 e3       	ldi	r24, 0x35	; 53
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
		Pin_mode(SEGMENT_D_PORT , SEGMENT_D_DDR , SEGMENT_D_PIN_NUMBER , OUTPUT);
 588:	21 e0       	ldi	r18, 0x01	; 1
 58a:	47 e0       	ldi	r20, 0x07	; 7
 58c:	64 e3       	ldi	r22, 0x34	; 52
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	85 e3       	ldi	r24, 0x35	; 53
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
		
	// INPUTS
	Pin_mode(BUTTON0_PORT , BUTTON0_DDR , BUTTON0_PIN_NUMBER , INPUT);
 598:	20 e0       	ldi	r18, 0x00	; 0
 59a:	40 e0       	ldi	r20, 0x00	; 0
 59c:	61 e3       	ldi	r22, 0x31	; 49
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	82 e3       	ldi	r24, 0x32	; 50
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
	Pin_mode(BUTTON1_PORT , BUTTON1_DDR , BUTTON1_PIN_NUMBER , INPUT);
 5a8:	20 e0       	ldi	r18, 0x00	; 0
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	61 e3       	ldi	r22, 0x31	; 49
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	82 e3       	ldi	r24, 0x32	; 50
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>
	Pin_mode(BUTTON2_PORT , BUTTON2_DDR , BUTTON2_PIN_NUMBER , INPUT);
 5b8:	20 e0       	ldi	r18, 0x00	; 0
 5ba:	42 e0       	ldi	r20, 0x02	; 2
 5bc:	61 e3       	ldi	r22, 0x31	; 49
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	82 e3       	ldi	r24, 0x32	; 50
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 4c 03 	call	0x698	; 0x698 <Pin_mode>

	// Setting initial states
	
	LED_OFF(LED1);
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 1f 02 	call	0x43e	; 0x43e <LED_OFF>
	LED_OFF(LED2);
 5ce:	82 e0       	ldi	r24, 0x02	; 2
 5d0:	0e 94 1f 02 	call	0x43e	; 0x43e <LED_OFF>
	LED_OFF(LED3);
 5d4:	83 e0       	ldi	r24, 0x03	; 3
 5d6:	0e 94 1f 02 	call	0x43e	; 0x43e <LED_OFF>
	BUZZER_OFF();
 5da:	0e 94 ee 00 	call	0x1dc	; 0x1dc <BUZZER_OFF>
	RELAY_OFF();
 5de:	0e 94 37 02 	call	0x46e	; 0x46e <RELAY_OFF>

	SEGMENT_RESET();
 5e2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <SEGMENT_RESET>
	
	LCD_INIT();
 5e6:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_INIT>
		
	unsigned char u8Statement1[16] = {"Hello World !!.."};
 5ea:	80 e1       	ldi	r24, 0x10	; 16
 5ec:	e0 e6       	ldi	r30, 0x60	; 96
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	de 01       	movw	r26, r28
 5f2:	11 96       	adiw	r26, 0x01	; 1
 5f4:	01 90       	ld	r0, Z+
 5f6:	0d 92       	st	X+, r0
 5f8:	8a 95       	dec	r24
 5fa:	e1 f7       	brne	.-8      	; 0x5f4 <main+0x120>
	unsigned char u8Statement2[16] = {"Oh Muther Futher"};
 5fc:	80 e1       	ldi	r24, 0x10	; 16
 5fe:	e1 e7       	ldi	r30, 0x71	; 113
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	de 01       	movw	r26, r28
 604:	51 96       	adiw	r26, 0x11	; 17
 606:	01 90       	ld	r0, Z+
 608:	0d 92       	st	X+, r0
 60a:	8a 95       	dec	r24
 60c:	e1 f7       	brne	.-8      	; 0x606 <main+0x132>
		uint8_t u8Button0_reading = 0;
 60e:	19 a2       	std	Y+33, r1	; 0x21
		uint8_t u8Button1_reading = 0;
 610:	1a a2       	std	Y+34, r1	; 0x22
		uint8_t u8Button2_reading = 0;
 612:	1b a2       	std	Y+35, r1	; 0x23
		{
			BUTTON0_READ(&u8Button0_reading);
			BUTTON1_READ(&u8Button1_reading);
			BUTTON2_READ(&u8Button2_reading);
			
		} while ((u8Button0_reading == 0) & (u8Button1_reading == 0) & (u8Button2_reading == 0) );
 614:	11 e0       	ldi	r17, 0x01	; 1
 616:	00 e0       	ldi	r16, 0x00	; 0
		uint8_t u8Button1_reading = 0;
		uint8_t u8Button2_reading = 0;
		
	while (1)
	{
		LCD_DATA_STRING(u8Statement1 , 16);
 618:	60 e1       	ldi	r22, 0x10	; 16
 61a:	ce 01       	movw	r24, r28
 61c:	01 96       	adiw	r24, 0x01	; 1
 61e:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_DATA_STRING>
		LCD_DATA_STRING(u8Statement2 , 16);
 622:	60 e1       	ldi	r22, 0x10	; 16
 624:	ce 01       	movw	r24, r28
 626:	41 96       	adiw	r24, 0x11	; 17
 628:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_DATA_STRING>
		do 
		{
			BUTTON0_READ(&u8Button0_reading);
 62c:	ce 01       	movw	r24, r28
 62e:	81 96       	adiw	r24, 0x21	; 33
 630:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON0_READ>
			BUTTON1_READ(&u8Button1_reading);
 634:	ce 01       	movw	r24, r28
 636:	82 96       	adiw	r24, 0x22	; 34
 638:	0e 94 80 00 	call	0x100	; 0x100 <BUTTON1_READ>
			BUTTON2_READ(&u8Button2_reading);
 63c:	ce 01       	movw	r24, r28
 63e:	83 96       	adiw	r24, 0x23	; 35
 640:	0e 94 b7 00 	call	0x16e	; 0x16e <BUTTON2_READ>
			
		} while ((u8Button0_reading == 0) & (u8Button1_reading == 0) & (u8Button2_reading == 0) );
 644:	91 2f       	mov	r25, r17
 646:	89 a1       	ldd	r24, Y+33	; 0x21
 648:	81 11       	cpse	r24, r1
 64a:	90 2f       	mov	r25, r16
 64c:	81 2f       	mov	r24, r17
 64e:	2a a1       	ldd	r18, Y+34	; 0x22
 650:	21 11       	cpse	r18, r1
 652:	80 2f       	mov	r24, r16
 654:	89 23       	and	r24, r25
 656:	01 f3       	breq	.-64     	; 0x618 <main+0x144>
 658:	81 2f       	mov	r24, r17
 65a:	9b a1       	ldd	r25, Y+35	; 0x23
 65c:	91 11       	cpse	r25, r1
 65e:	80 2f       	mov	r24, r16
 660:	81 11       	cpse	r24, r1
 662:	e4 cf       	rjmp	.-56     	; 0x62c <main+0x158>
 664:	d9 cf       	rjmp	.-78     	; 0x618 <main+0x144>

00000666 <Pin_set>:
	(*(volatile uint8_t *) (PORT_address)) &= ~(1<<Pin_index);
}

extern void Pin_toggle( unsigned int PORT_address , uint8_t Pin_index)
{
	(*(volatile uint8_t *) (PORT_address)) ^= (1<<Pin_index);
 666:	fc 01       	movw	r30, r24
 668:	40 81       	ld	r20, Z
 66a:	21 e0       	ldi	r18, 0x01	; 1
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <Pin_set+0xe>
 670:	22 0f       	add	r18, r18
 672:	33 1f       	adc	r19, r19
 674:	6a 95       	dec	r22
 676:	e2 f7       	brpl	.-8      	; 0x670 <Pin_set+0xa>
 678:	24 2b       	or	r18, r20
 67a:	20 83       	st	Z, r18
 67c:	08 95       	ret

0000067e <Pin_reset>:
 67e:	fc 01       	movw	r30, r24
 680:	90 81       	ld	r25, Z
 682:	21 e0       	ldi	r18, 0x01	; 1
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <Pin_reset+0xe>
 688:	22 0f       	add	r18, r18
 68a:	33 1f       	adc	r19, r19
 68c:	6a 95       	dec	r22
 68e:	e2 f7       	brpl	.-8      	; 0x688 <Pin_reset+0xa>
 690:	20 95       	com	r18
 692:	29 23       	and	r18, r25
 694:	20 83       	st	Z, r18
 696:	08 95       	ret

00000698 <Pin_mode>:
}

extern void Pin_mode(unsigned int PORT_address , unsigned int DDR_address , uint8_t Pin_index , uint8_t Pin_state)
{
	if (Pin_state == INPUT)
 698:	21 11       	cpse	r18, r1
 69a:	12 c0       	rjmp	.+36     	; 0x6c0 <Pin_mode+0x28>
	{
		(*(volatile uint8_t *)(DDR_address)) &= ~(1<<Pin_index) ;
 69c:	fb 01       	movw	r30, r22
 69e:	50 81       	ld	r21, Z
 6a0:	21 e0       	ldi	r18, 0x01	; 1
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <Pin_mode+0x12>
 6a6:	22 0f       	add	r18, r18
 6a8:	33 1f       	adc	r19, r19
 6aa:	4a 95       	dec	r20
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <Pin_mode+0xe>
 6ae:	32 2f       	mov	r19, r18
 6b0:	30 95       	com	r19
 6b2:	35 23       	and	r19, r21
 6b4:	30 83       	st	Z, r19
		(*(volatile uint8_t *)(PORT_address)) |= (1<<Pin_index); // To activate the pull up resistor
 6b6:	fc 01       	movw	r30, r24
 6b8:	30 81       	ld	r19, Z
 6ba:	23 2b       	or	r18, r19
 6bc:	20 83       	st	Z, r18
 6be:	08 95       	ret
	}
	else if (Pin_state == OUTPUT)
 6c0:	21 30       	cpi	r18, 0x01	; 1
 6c2:	59 f4       	brne	.+22     	; 0x6da <Pin_mode+0x42>
	{
		(*(volatile uint8_t *)(DDR_address )) |= (1<<Pin_index) ;
 6c4:	fb 01       	movw	r30, r22
 6c6:	20 81       	ld	r18, Z
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <Pin_mode+0x3a>
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	4a 95       	dec	r20
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <Pin_mode+0x36>
 6d6:	82 2b       	or	r24, r18
 6d8:	80 83       	st	Z, r24
 6da:	08 95       	ret

000006dc <Pin_read>:

extern void Pin_read(unsigned int PIN_address , uint8_t u8Pin_index , volatile uint8_t *pu8PORT_reading)
{
	uint8_t u8Temp = 0;
	
	u8Temp = (*(volatile uint8_t *)(PIN_address)) & (1 << u8Pin_index) ;
 6dc:	fc 01       	movw	r30, r24
 6de:	20 81       	ld	r18, Z
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <Pin_read+0xe>
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	6a 95       	dec	r22
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <Pin_read+0xa>
 6ee:	82 23       	and	r24, r18
	
	*pu8PORT_reading = u8Temp ;
 6f0:	fa 01       	movw	r30, r20
 6f2:	80 83       	st	Z, r24
 6f4:	08 95       	ret

000006f6 <_exit>:
 6f6:	f8 94       	cli

000006f8 <__stop_program>:
 6f8:	ff cf       	rjmp	.-2      	; 0x6f8 <__stop_program>
