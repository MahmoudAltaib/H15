
AMIT_LEARNING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001104  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000266  00800060  00001104  00001198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  008002c6  008002c6  000013fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000043bb  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001107  00000000  00000000  00005bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000208c  00000000  00000000  00006cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a0  00000000  00000000  00008d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d57  00000000  00000000  000094ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002573  00000000  00000000  0000a243  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000c7b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3e       	cpi	r26, 0xEC	; 236
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 82 06 	call	0xd04	; 0xd04 <main>
      8a:	0c 94 80 08 	jmp	0x1100	; 0x1100 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BT_STRING_COMPARE>:
extern uint8_t BT_STRING_COMPARE(char *pucBT_received_data , char *pucBT_instructions , uint8_t u8Size)
{
	uint8_t u8Count = 0 ;
	uint8_t u8Number_of_correct_checks = 0;
	
	for (u8Count = 0 ; u8Count < u8Size ; u8Count ++)
      92:	44 23       	and	r20, r20
      94:	a1 f0       	breq	.+40     	; 0xbe <BT_STRING_COMPARE+0x2c>
	{
		if (pucBT_received_data[u8Count] == pucBT_instructions[u8Count])
      96:	fc 01       	movw	r30, r24
      98:	30 81       	ld	r19, Z
      9a:	fb 01       	movw	r30, r22
      9c:	20 81       	ld	r18, Z
      9e:	32 13       	cpse	r19, r18
      a0:	10 c0       	rjmp	.+32     	; 0xc2 <BT_STRING_COMPARE+0x30>
      a2:	dc 01       	movw	r26, r24
      a4:	11 96       	adiw	r26, 0x01	; 1
      a6:	31 96       	adiw	r30, 0x01	; 1
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	04 c0       	rjmp	.+8      	; 0xb4 <BT_STRING_COMPARE+0x22>
      ac:	2d 91       	ld	r18, X+
      ae:	81 91       	ld	r24, Z+
      b0:	28 13       	cpse	r18, r24
      b2:	08 c0       	rjmp	.+16     	; 0xc4 <BT_STRING_COMPARE+0x32>
		{
			u8Number_of_correct_checks ++ ;
      b4:	9f 5f       	subi	r25, 0xFF	; 255
extern uint8_t BT_STRING_COMPARE(char *pucBT_received_data , char *pucBT_instructions , uint8_t u8Size)
{
	uint8_t u8Count = 0 ;
	uint8_t u8Number_of_correct_checks = 0;
	
	for (u8Count = 0 ; u8Count < u8Size ; u8Count ++)
      b6:	49 13       	cpse	r20, r25
      b8:	f9 cf       	rjmp	.-14     	; 0xac <BT_STRING_COMPARE+0x1a>
	{
		if (pucBT_received_data[u8Count] == pucBT_instructions[u8Count])
		{
			u8Number_of_correct_checks ++ ;
      ba:	94 2f       	mov	r25, r20
      bc:	03 c0       	rjmp	.+6      	; 0xc4 <BT_STRING_COMPARE+0x32>
}

extern uint8_t BT_STRING_COMPARE(char *pucBT_received_data , char *pucBT_instructions , uint8_t u8Size)
{
	uint8_t u8Count = 0 ;
	uint8_t u8Number_of_correct_checks = 0;
      be:	94 2f       	mov	r25, r20
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <BT_STRING_COMPARE+0x32>
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	49 13       	cpse	r20, r25
      c8:	80 e0       	ldi	r24, 0x00	; 0
	} 
	else
	{
		return 0 ;
	}
}
      ca:	08 95       	ret

000000cc <BT_TEST_LEDS>:
extern void BT_TEST_LEDS()
{
	LCD_COMMAND(CLEAR_DISPLAY);
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d2:	8f e6       	ldi	r24, 0x6F	; 111
      d4:	97 e1       	ldi	r25, 0x17	; 23
      d6:	01 97       	sbiw	r24, 0x01	; 1
      d8:	f1 f7       	brne	.-4      	; 0xd6 <BT_TEST_LEDS+0xa>
      da:	00 c0       	rjmp	.+0      	; 0xdc <BT_TEST_LEDS+0x10>
      dc:	00 00       	nop
	_delay_us(2000);
	LCD_COMMAND(SHIFT_CURSOR_RIGHT);
      de:	86 e0       	ldi	r24, 0x06	; 6
      e0:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
      e4:	8b e2       	ldi	r24, 0x2B	; 43
      e6:	91 e0       	ldi	r25, 0x01	; 1
      e8:	01 97       	sbiw	r24, 0x01	; 1
      ea:	f1 f7       	brne	.-4      	; 0xe8 <BT_TEST_LEDS+0x1c>
      ec:	00 c0       	rjmp	.+0      	; 0xee <BT_TEST_LEDS+0x22>
      ee:	00 00       	nop
	_delay_us(100);
	
	LCD_COMMAND(FIRST_LINE_START);
      f0:	80 e8       	ldi	r24, 0x80	; 128
      f2:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
	LCD_DATA_CERTAIN_STRING("Testing LEDS..." , 15);
      f6:	6f e0       	ldi	r22, 0x0F	; 15
      f8:	80 ed       	ldi	r24, 0xD0	; 208
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 6f 05 	call	0xade	; 0xade <LCD_DATA_CERTAIN_STRING>
	
	USART_TRANSMIT_CERTAIN_STRING("Testing LEDS...\n" , 17);
     100:	61 e1       	ldi	r22, 0x11	; 17
     102:	80 ee       	ldi	r24, 0xE0	; 224
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	
	LEDS_FLASH();
     10a:	0e 94 30 06 	call	0xc60	; 0xc60 <LEDS_FLASH>
     10e:	08 95       	ret

00000110 <BT_TEST_BUZZER>:
}
extern void BT_TEST_BUZZER()
{
	LCD_COMMAND(CLEAR_DISPLAY);
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     116:	8f e6       	ldi	r24, 0x6F	; 111
     118:	97 e1       	ldi	r25, 0x17	; 23
     11a:	01 97       	sbiw	r24, 0x01	; 1
     11c:	f1 f7       	brne	.-4      	; 0x11a <BT_TEST_BUZZER+0xa>
     11e:	00 c0       	rjmp	.+0      	; 0x120 <BT_TEST_BUZZER+0x10>
     120:	00 00       	nop
	_delay_us(2000);
	LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     122:	86 e0       	ldi	r24, 0x06	; 6
     124:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     128:	8b e2       	ldi	r24, 0x2B	; 43
     12a:	91 e0       	ldi	r25, 0x01	; 1
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <BT_TEST_BUZZER+0x1c>
     130:	00 c0       	rjmp	.+0      	; 0x132 <BT_TEST_BUZZER+0x22>
     132:	00 00       	nop
	_delay_us(100);
	
	LCD_COMMAND(FIRST_LINE_START);
     134:	80 e8       	ldi	r24, 0x80	; 128
     136:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
	LCD_DATA_CERTAIN_STRING("Testing BUZZER.." , 16);
     13a:	60 e1       	ldi	r22, 0x10	; 16
     13c:	81 ef       	ldi	r24, 0xF1	; 241
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 6f 05 	call	0xade	; 0xade <LCD_DATA_CERTAIN_STRING>
	
	USART_TRANSMIT_CERTAIN_STRING("Testing BUZZER...\n" , 19);
     144:	63 e1       	ldi	r22, 0x13	; 19
     146:	82 e0       	ldi	r24, 0x02	; 2
     148:	91 e0       	ldi	r25, 0x01	; 1
     14a:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	
	BUZZER_FLICKER();
     14e:	0e 94 9e 04 	call	0x93c	; 0x93c <BUZZER_FLICKER>
     152:	08 95       	ret

00000154 <BT_TEST_RELAY>:
}
extern void BT_TEST_RELAY()
{
	LCD_COMMAND(CLEAR_DISPLAY);
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     15a:	8f e6       	ldi	r24, 0x6F	; 111
     15c:	97 e1       	ldi	r25, 0x17	; 23
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <BT_TEST_RELAY+0xa>
     162:	00 c0       	rjmp	.+0      	; 0x164 <BT_TEST_RELAY+0x10>
     164:	00 00       	nop
	_delay_us(2000);
	LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     166:	86 e0       	ldi	r24, 0x06	; 6
     168:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     16c:	8b e2       	ldi	r24, 0x2B	; 43
     16e:	91 e0       	ldi	r25, 0x01	; 1
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <BT_TEST_RELAY+0x1c>
     174:	00 c0       	rjmp	.+0      	; 0x176 <BT_TEST_RELAY+0x22>
     176:	00 00       	nop
	_delay_us(100);
	
	LCD_COMMAND(FIRST_LINE_START);
     178:	80 e8       	ldi	r24, 0x80	; 128
     17a:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
	LCD_DATA_CERTAIN_STRING("Testing RELAY.." , 15);
     17e:	6f e0       	ldi	r22, 0x0F	; 15
     180:	85 e1       	ldi	r24, 0x15	; 21
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	0e 94 6f 05 	call	0xade	; 0xade <LCD_DATA_CERTAIN_STRING>
	
	USART_TRANSMIT_CERTAIN_STRING("Testing RELAY...\n" , 18);
     188:	62 e1       	ldi	r22, 0x12	; 18
     18a:	85 e2       	ldi	r24, 0x25	; 37
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	
	RELAY_FLICKER();
     192:	0e 94 66 06 	call	0xccc	; 0xccc <RELAY_FLICKER>
     196:	08 95       	ret

00000198 <BT_TEST_ADC>:
}
extern void BT_TEST_ADC()
{
     198:	cf 93       	push	r28
	LCD_COMMAND(CLEAR_DISPLAY);
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     1a0:	8f e6       	ldi	r24, 0x6F	; 111
     1a2:	97 e1       	ldi	r25, 0x17	; 23
     1a4:	01 97       	sbiw	r24, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <BT_TEST_ADC+0xc>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <BT_TEST_ADC+0x12>
     1aa:	00 00       	nop
	_delay_us(2000);
	LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     1ac:	86 e0       	ldi	r24, 0x06	; 6
     1ae:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     1b2:	8b e2       	ldi	r24, 0x2B	; 43
     1b4:	91 e0       	ldi	r25, 0x01	; 1
     1b6:	01 97       	sbiw	r24, 0x01	; 1
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <BT_TEST_ADC+0x1e>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <BT_TEST_ADC+0x24>
     1bc:	00 00       	nop
	do
	{
		ADC0_READ(&u16ADC0_reading);
		ADC1_READ(&u16ADC1_reading);
		
		u16ADC0_reading = u16ADC0_reading *  49/10;  // mv  4.9 is the actual voltage directed to AVREF NOT 5v
     1be:	c1 e3       	ldi	r28, 0x31	; 49
	LCD_COMMAND(SHIFT_CURSOR_RIGHT);
	_delay_us(100);
	
	do
	{
		ADC0_READ(&u16ADC0_reading);
     1c0:	8a ec       	ldi	r24, 0xCA	; 202
     1c2:	92 e0       	ldi	r25, 0x02	; 2
     1c4:	0e 94 ed 06 	call	0xdda	; 0xdda <ADC0_READ>
		ADC1_READ(&u16ADC1_reading);
     1c8:	88 ec       	ldi	r24, 0xC8	; 200
     1ca:	92 e0       	ldi	r25, 0x02	; 2
     1cc:	0e 94 06 07 	call	0xe0c	; 0xe0c <ADC1_READ>
		
		u16ADC0_reading = u16ADC0_reading *  49/10;  // mv  4.9 is the actual voltage directed to AVREF NOT 5v
     1d0:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <u16ADC0_reading>
     1d4:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <u16ADC0_reading+0x1>
     1d8:	c8 9f       	mul	r28, r24
     1da:	90 01       	movw	r18, r0
     1dc:	c9 9f       	mul	r28, r25
     1de:	30 0d       	add	r19, r0
     1e0:	11 24       	eor	r1, r1
     1e2:	ad ec       	ldi	r26, 0xCD	; 205
     1e4:	bc ec       	ldi	r27, 0xCC	; 204
     1e6:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__umulhisi3>
     1ea:	ac 01       	movw	r20, r24
     1ec:	56 95       	lsr	r21
     1ee:	47 95       	ror	r20
     1f0:	56 95       	lsr	r21
     1f2:	47 95       	ror	r20
     1f4:	56 95       	lsr	r21
     1f6:	47 95       	ror	r20
     1f8:	50 93 cb 02 	sts	0x02CB, r21	; 0x8002cb <u16ADC0_reading+0x1>
     1fc:	40 93 ca 02 	sts	0x02CA, r20	; 0x8002ca <u16ADC0_reading>
		u16ADC1_reading = u16ADC1_reading * 49/10 ;  // mv
     200:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <u16ADC1_reading>
     204:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <u16ADC1_reading+0x1>
     208:	c8 9f       	mul	r28, r24
     20a:	90 01       	movw	r18, r0
     20c:	c9 9f       	mul	r28, r25
     20e:	30 0d       	add	r19, r0
     210:	11 24       	eor	r1, r1
     212:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__umulhisi3>
     216:	96 95       	lsr	r25
     218:	87 95       	ror	r24
     21a:	96 95       	lsr	r25
     21c:	87 95       	ror	r24
     21e:	96 95       	lsr	r25
     220:	87 95       	ror	r24
     222:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <u16ADC1_reading+0x1>
     226:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <u16ADC1_reading>
		
		ADC_VALUE_ANALYSE(u16ADC0_reading , u16ADC0_value);
     22a:	63 ee       	ldi	r22, 0xE3	; 227
     22c:	72 e0       	ldi	r23, 0x02	; 2
     22e:	ca 01       	movw	r24, r20
     230:	0e 94 1f 07 	call	0xe3e	; 0xe3e <ADC_VALUE_ANALYSE>
		ADC_VALUE_ANALYSE(u16ADC1_reading , u16ADC1_value);
     234:	6b ed       	ldi	r22, 0xDB	; 219
     236:	72 e0       	ldi	r23, 0x02	; 2
     238:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <u16ADC1_reading>
     23c:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <u16ADC1_reading+0x1>
     240:	0e 94 1f 07 	call	0xe3e	; 0xe3e <ADC_VALUE_ANALYSE>
		
		LCD_COMMAND(FIRST_LINE_START);
     244:	80 e8       	ldi	r24, 0x80	; 128
     246:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
		LCD_DATA_CERTAIN_STRING("ADC0 :  ", 8);
     24a:	68 e0       	ldi	r22, 0x08	; 8
     24c:	87 e3       	ldi	r24, 0x37	; 55
     24e:	91 e0       	ldi	r25, 0x01	; 1
     250:	0e 94 6f 05 	call	0xade	; 0xade <LCD_DATA_CERTAIN_STRING>
		ADC_SHOW_VALUE(u16ADC0_value);
     254:	83 ee       	ldi	r24, 0xE3	; 227
     256:	92 e0       	ldi	r25, 0x02	; 2
     258:	0e 94 52 07 	call	0xea4	; 0xea4 <ADC_SHOW_VALUE>
		LCD_CERTAIN_DATA('v');
     25c:	86 e7       	ldi	r24, 0x76	; 118
     25e:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LCD_CERTAIN_DATA>

		LCD_COMMAND(SECOND_LINE_START);
     262:	80 ec       	ldi	r24, 0xC0	; 192
     264:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
		LCD_DATA_CERTAIN_STRING("ADC1 :  ", 8);
     268:	68 e0       	ldi	r22, 0x08	; 8
     26a:	80 e4       	ldi	r24, 0x40	; 64
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	0e 94 6f 05 	call	0xade	; 0xade <LCD_DATA_CERTAIN_STRING>
		ADC_SHOW_VALUE(u16ADC1_value);
     272:	8b ed       	ldi	r24, 0xDB	; 219
     274:	92 e0       	ldi	r25, 0x02	; 2
     276:	0e 94 52 07 	call	0xea4	; 0xea4 <ADC_SHOW_VALUE>
		LCD_CERTAIN_DATA('v');
     27a:	86 e7       	ldi	r24, 0x76	; 118
     27c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LCD_CERTAIN_DATA>
		
		BUTTON2_READ(&u8Button2_reading);
     280:	87 ec       	ldi	r24, 0xC7	; 199
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <BUTTON2_READ>
		
		if (u8Button2_reading != 0 )
     288:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <u8Button2_reading>
     28c:	88 23       	and	r24, r24
     28e:	29 f0       	breq	.+10     	; 0x29a <BT_TEST_ADC+0x102>
		{
			u8End_ADC ++;
     290:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <u8End_ADC>
     294:	8f 5f       	subi	r24, 0xFF	; 255
     296:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <u8End_ADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     29a:	9f ef       	ldi	r25, 0xFF	; 255
     29c:	22 e5       	ldi	r18, 0x52	; 82
     29e:	87 e0       	ldi	r24, 0x07	; 7
     2a0:	91 50       	subi	r25, 0x01	; 1
     2a2:	20 40       	sbci	r18, 0x00	; 0
     2a4:	80 40       	sbci	r24, 0x00	; 0
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <BT_TEST_ADC+0x108>
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <BT_TEST_ADC+0x112>
     2aa:	00 00       	nop
		{
			
		}
		_delay_ms(200);
		
	} while (u8End_ADC == 0);
     2ac:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <u8End_ADC>
     2b0:	88 23       	and	r24, r24
     2b2:	09 f4       	brne	.+2      	; 0x2b6 <BT_TEST_ADC+0x11e>
     2b4:	85 cf       	rjmp	.-246    	; 0x1c0 <BT_TEST_ADC+0x28>
	
}
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <BT_TEST_PWM>:
extern void BT_TEST_PWM()
{
	T1_PWM_INIT();
     2ba:	0e 94 c0 07 	call	0xf80	; 0xf80 <T1_PWM_INIT>
	
	USART_TRANSMIT_CERTAIN_STRING("Choose a duty cycle :\n" , 23);
     2be:	67 e1       	ldi	r22, 0x17	; 23
     2c0:	89 e4       	ldi	r24, 0x49	; 73
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	USART_TRANSMIT_CERTAIN_STRING("1) 25%\n" , 8);
     2c8:	68 e0       	ldi	r22, 0x08	; 8
     2ca:	80 e6       	ldi	r24, 0x60	; 96
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	USART_TRANSMIT_CERTAIN_STRING("2) 50%\n" , 8);
     2d2:	68 e0       	ldi	r22, 0x08	; 8
     2d4:	88 e6       	ldi	r24, 0x68	; 104
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	USART_TRANSMIT_CERTAIN_STRING("3) 75%\n" , 8);
     2dc:	68 e0       	ldi	r22, 0x08	; 8
     2de:	80 e7       	ldi	r24, 0x70	; 112
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	USART_TRANSMIT_CERTAIN_STRING("4) 100%\n" , 9);
     2e6:	69 e0       	ldi	r22, 0x09	; 9
     2e8:	88 e7       	ldi	r24, 0x78	; 120
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	USART_TRANSMIT_CERTAIN_STRING("5) ESC\n" , 8);
     2f0:	68 e0       	ldi	r22, 0x08	; 8
     2f2:	81 e8       	ldi	r24, 0x81	; 129
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	
	do
	{
		USART_RECEIVE(&u8PWM_data);
     2fa:	8f ec       	ldi	r24, 0xCF	; 207
     2fc:	92 e0       	ldi	r25, 0x02	; 2
     2fe:	0e 94 30 08 	call	0x1060	; 0x1060 <USART_RECEIVE>
		
		if (u8PWM_data == '1')
     302:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <u8PWM_data>
     306:	81 33       	cpi	r24, 0x31	; 49
     308:	59 f4       	brne	.+22     	; 0x320 <BT_TEST_PWM+0x66>
		{
			T1_PWM_DUTY_CYCLE(25 , 25);
     30a:	29 e1       	ldi	r18, 0x19	; 25
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	69 e1       	ldi	r22, 0x19	; 25
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <T1_PWM_DUTY_CYCLE>
     31e:	26 c0       	rjmp	.+76     	; 0x36c <BT_TEST_PWM+0xb2>
		}
		else if (u8PWM_data == '2')
     320:	82 33       	cpi	r24, 0x32	; 50
     322:	59 f4       	brne	.+22     	; 0x33a <BT_TEST_PWM+0x80>
		{
			T1_PWM_DUTY_CYCLE(50 , 50);
     324:	22 e3       	ldi	r18, 0x32	; 50
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	50 e0       	ldi	r21, 0x00	; 0
     32c:	62 e3       	ldi	r22, 0x32	; 50
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <T1_PWM_DUTY_CYCLE>
     338:	19 c0       	rjmp	.+50     	; 0x36c <BT_TEST_PWM+0xb2>
		}
		else if (u8PWM_data == '3')
     33a:	83 33       	cpi	r24, 0x33	; 51
     33c:	59 f4       	brne	.+22     	; 0x354 <BT_TEST_PWM+0x9a>
		{
			T1_PWM_DUTY_CYCLE(75 , 75);
     33e:	2b e4       	ldi	r18, 0x4B	; 75
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	40 e0       	ldi	r20, 0x00	; 0
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	6b e4       	ldi	r22, 0x4B	; 75
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <T1_PWM_DUTY_CYCLE>
     352:	0c c0       	rjmp	.+24     	; 0x36c <BT_TEST_PWM+0xb2>
		}
		else if (u8PWM_data == '4')
     354:	84 33       	cpi	r24, 0x34	; 52
     356:	51 f4       	brne	.+20     	; 0x36c <BT_TEST_PWM+0xb2>
		{
			T1_PWM_DUTY_CYCLE(100 , 100);
     358:	24 e6       	ldi	r18, 0x64	; 100
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	40 e0       	ldi	r20, 0x00	; 0
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	64 e6       	ldi	r22, 0x64	; 100
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <T1_PWM_DUTY_CYCLE>
		}
		
	} while (u8PWM_data != '5');
     36c:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <u8PWM_data>
     370:	85 33       	cpi	r24, 0x35	; 53
     372:	19 f6       	brne	.-122    	; 0x2fa <BT_TEST_PWM+0x40>
	
	T1_PWM_DEINIT();
     374:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <T1_PWM_DEINIT>
	
	USART_TRANSMIT_CERTAIN_STRING("\n" , 2);
     378:	62 e0       	ldi	r22, 0x02	; 2
     37a:	80 e6       	ldi	r24, 0x60	; 96
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	USART_TRANSMIT_CERTAIN_STRING("Choose another operation\n" , 26);
     382:	6a e1       	ldi	r22, 0x1A	; 26
     384:	89 e8       	ldi	r24, 0x89	; 137
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
     38c:	08 95       	ret

0000038e <BT_CHECK_FOR_LED1_OFF_COMMAND>:
	{
	}
}
extern void BT_CHECK_FOR_LED1_OFF_COMMAND()
{
	u8Comparsion_result = 0;
     38e:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8Comparsion_result>
	u8Comparsion_result = BT_STRING_COMPARE(c8BT_received_data , c8Statement_LED1_OFF , 7);
     392:	47 e0       	ldi	r20, 0x07	; 7
     394:	60 ec       	ldi	r22, 0xC0	; 192
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	81 ed       	ldi	r24, 0xD1	; 209
     39a:	92 e0       	ldi	r25, 0x02	; 2
     39c:	0e 94 49 00 	call	0x92	; 0x92 <BT_STRING_COMPARE>
     3a0:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <u8Comparsion_result>
	
	if (u8Comparsion_result == 1)
     3a4:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <u8Comparsion_result>
     3a8:	81 30       	cpi	r24, 0x01	; 1
     3aa:	11 f4       	brne	.+4      	; 0x3b0 <BT_CHECK_FOR_LED1_OFF_COMMAND+0x22>
	{
		LED_OFF(LED1);
     3ac:	0e 94 18 06 	call	0xc30	; 0xc30 <LED_OFF>
     3b0:	08 95       	ret

000003b2 <BT_CHECK_FOR_LED2_ON_COMMAND>:
	{
	}
}
extern void BT_CHECK_FOR_LED2_ON_COMMAND()
{
	u8Comparsion_result = 0;
     3b2:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8Comparsion_result>
	u8Comparsion_result = BT_STRING_COMPARE(c8BT_received_data , c8Statement_LED2_ON , 7);
     3b6:	47 e0       	ldi	r20, 0x07	; 7
     3b8:	68 eb       	ldi	r22, 0xB8	; 184
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	81 ed       	ldi	r24, 0xD1	; 209
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	0e 94 49 00 	call	0x92	; 0x92 <BT_STRING_COMPARE>
     3c4:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <u8Comparsion_result>
	
	if (u8Comparsion_result == 1)
     3c8:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <u8Comparsion_result>
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	19 f4       	brne	.+6      	; 0x3d6 <BT_CHECK_FOR_LED2_ON_COMMAND+0x24>
	{
		LED_ON(LED2);
     3d0:	82 e0       	ldi	r24, 0x02	; 2
     3d2:	0e 94 00 06 	call	0xc00	; 0xc00 <LED_ON>
     3d6:	08 95       	ret

000003d8 <BT_CHECK_FOR_LED2_OFF_COMMAND>:
	{
	}
}
extern void BT_CHECK_FOR_LED2_OFF_COMMAND()
{
	u8Comparsion_result = 0;
     3d8:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8Comparsion_result>
	u8Comparsion_result = BT_STRING_COMPARE(c8BT_received_data , c8Statement_LED2_OFF , 7);
     3dc:	47 e0       	ldi	r20, 0x07	; 7
     3de:	60 eb       	ldi	r22, 0xB0	; 176
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	81 ed       	ldi	r24, 0xD1	; 209
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	0e 94 49 00 	call	0x92	; 0x92 <BT_STRING_COMPARE>
     3ea:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <u8Comparsion_result>
	
	if (u8Comparsion_result == 1)
     3ee:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <u8Comparsion_result>
     3f2:	81 30       	cpi	r24, 0x01	; 1
     3f4:	19 f4       	brne	.+6      	; 0x3fc <BT_CHECK_FOR_LED2_OFF_COMMAND+0x24>
	{
		LED_OFF(LED2);
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	0e 94 18 06 	call	0xc30	; 0xc30 <LED_OFF>
     3fc:	08 95       	ret

000003fe <BT_CHECK_FOR_LED3_ON_COMMAND>:
	{
	}
}
extern void BT_CHECK_FOR_LED3_ON_COMMAND()
{
	u8Comparsion_result = 0;
     3fe:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8Comparsion_result>
	u8Comparsion_result = BT_STRING_COMPARE(c8BT_received_data , c8Statement_LED3_ON, 7);
     402:	47 e0       	ldi	r20, 0x07	; 7
     404:	68 ea       	ldi	r22, 0xA8	; 168
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	81 ed       	ldi	r24, 0xD1	; 209
     40a:	92 e0       	ldi	r25, 0x02	; 2
     40c:	0e 94 49 00 	call	0x92	; 0x92 <BT_STRING_COMPARE>
     410:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <u8Comparsion_result>
	
	if (u8Comparsion_result == 1)
     414:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <u8Comparsion_result>
     418:	81 30       	cpi	r24, 0x01	; 1
     41a:	19 f4       	brne	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	{
		LED_ON(LED3);
     41c:	83 e0       	ldi	r24, 0x03	; 3
     41e:	0e 94 00 06 	call	0xc00	; 0xc00 <LED_ON>
     422:	08 95       	ret

00000424 <BT_CHECK_FOR_LED3_OFF_COMMAND>:
	{
	}
}
extern void BT_CHECK_FOR_LED3_OFF_COMMAND()
{
	u8Comparsion_result = 0;
     424:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8Comparsion_result>
	u8Comparsion_result = BT_STRING_COMPARE(c8BT_received_data , c8Statement_LED3_OFF , 7);
     428:	47 e0       	ldi	r20, 0x07	; 7
     42a:	60 ea       	ldi	r22, 0xA0	; 160
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	81 ed       	ldi	r24, 0xD1	; 209
     430:	92 e0       	ldi	r25, 0x02	; 2
     432:	0e 94 49 00 	call	0x92	; 0x92 <BT_STRING_COMPARE>
     436:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <u8Comparsion_result>
	
	if (u8Comparsion_result == 1)
     43a:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <u8Comparsion_result>
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	19 f4       	brne	.+6      	; 0x448 <BT_CHECK_FOR_LED3_OFF_COMMAND+0x24>
	{
		LED_OFF(LED3);
     442:	83 e0       	ldi	r24, 0x03	; 3
     444:	0e 94 18 06 	call	0xc30	; 0xc30 <LED_OFF>
     448:	08 95       	ret

0000044a <BT_CHECK_FOR_BUZZER_ON_COMMAND>:
	{
	}
}
extern void BT_CHECK_FOR_BUZZER_ON_COMMAND()
{
	u8Comparsion_result = 0;
     44a:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8Comparsion_result>
	u8Comparsion_result = BT_STRING_COMPARE(c8BT_received_data , c8Statement_BUZZER_ON , 7);
     44e:	47 e0       	ldi	r20, 0x07	; 7
     450:	68 e9       	ldi	r22, 0x98	; 152
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	81 ed       	ldi	r24, 0xD1	; 209
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	0e 94 49 00 	call	0x92	; 0x92 <BT_STRING_COMPARE>
     45c:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <u8Comparsion_result>
	
	if (u8Comparsion_result == 1)
     460:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <u8Comparsion_result>
     464:	81 30       	cpi	r24, 0x01	; 1
     466:	11 f4       	brne	.+4      	; 0x46c <BT_CHECK_FOR_BUZZER_ON_COMMAND+0x22>
	{
		BUZZER_ON();
     468:	0e 94 92 04 	call	0x924	; 0x924 <BUZZER_ON>
     46c:	08 95       	ret

0000046e <BT_CHECK_FOR_BUZZER_OFF_COMMAND>:
	{
	}
}
extern void BT_CHECK_FOR_BUZZER_OFF_COMMAND()
{
	u8Comparsion_result = 0;
     46e:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8Comparsion_result>
	u8Comparsion_result = BT_STRING_COMPARE(c8BT_received_data , c8Statement_BUZZER_OFF , 7);
     472:	47 e0       	ldi	r20, 0x07	; 7
     474:	60 e9       	ldi	r22, 0x90	; 144
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	81 ed       	ldi	r24, 0xD1	; 209
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	0e 94 49 00 	call	0x92	; 0x92 <BT_STRING_COMPARE>
     480:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <u8Comparsion_result>
	
	if (u8Comparsion_result == 1)
     484:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <u8Comparsion_result>
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	11 f4       	brne	.+4      	; 0x490 <BT_CHECK_FOR_BUZZER_OFF_COMMAND+0x22>
	{
		BUZZER_OFF();
     48c:	0e 94 98 04 	call	0x930	; 0x930 <BUZZER_OFF>
     490:	08 95       	ret

00000492 <BT_CHECK_FOR_RELAY_ON_COMMAND>:
	{
	}
}
extern void BT_CHECK_FOR_RELAY_ON_COMMAND()
{
	u8Comparsion_result = 0;
     492:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8Comparsion_result>
	u8Comparsion_result = BT_STRING_COMPARE(c8BT_received_data , c8Statement_RELAY_ON , 7);
     496:	47 e0       	ldi	r20, 0x07	; 7
     498:	68 e8       	ldi	r22, 0x88	; 136
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	81 ed       	ldi	r24, 0xD1	; 209
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	0e 94 49 00 	call	0x92	; 0x92 <BT_STRING_COMPARE>
     4a4:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <u8Comparsion_result>
	
	if (u8Comparsion_result == 1)
     4a8:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <u8Comparsion_result>
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	11 f4       	brne	.+4      	; 0x4b4 <BT_CHECK_FOR_RELAY_ON_COMMAND+0x22>
	{
		RELAY_ON();
     4b0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <RELAY_ON>
     4b4:	08 95       	ret

000004b6 <BT_CHECK_FOR_RELAY_OFF_COMMAND>:
	{
	}
}
extern void BT_CHECK_FOR_RELAY_OFF_COMMAND()
{
	u8Comparsion_result = 0;
     4b6:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8Comparsion_result>
	u8Comparsion_result = BT_STRING_COMPARE(c8BT_received_data , c8Statement_RELAY_OFF , 7);
     4ba:	47 e0       	ldi	r20, 0x07	; 7
     4bc:	60 e8       	ldi	r22, 0x80	; 128
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	81 ed       	ldi	r24, 0xD1	; 209
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	0e 94 49 00 	call	0x92	; 0x92 <BT_STRING_COMPARE>
     4c8:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <u8Comparsion_result>
	
	if (u8Comparsion_result == 1)
     4cc:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <u8Comparsion_result>
     4d0:	81 30       	cpi	r24, 0x01	; 1
     4d2:	11 f4       	brne	.+4      	; 0x4d8 <BT_CHECK_FOR_RELAY_OFF_COMMAND+0x22>
	{
		RELAY_OFF();
     4d4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <RELAY_OFF>
     4d8:	08 95       	ret

000004da <BT_CHECK_FOR_ADC_TEST_COMMAND>:
	{
	}
}
extern void BT_CHECK_FOR_ADC_TEST_COMMAND()
{
	u8Comparsion_result = 0;
     4da:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8Comparsion_result>
	u8Comparsion_result = BT_STRING_COMPARE(c8BT_received_data , c8Statement_ADC_TEST , 7);
     4de:	47 e0       	ldi	r20, 0x07	; 7
     4e0:	67 e7       	ldi	r22, 0x77	; 119
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	81 ed       	ldi	r24, 0xD1	; 209
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	0e 94 49 00 	call	0x92	; 0x92 <BT_STRING_COMPARE>
     4ec:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <u8Comparsion_result>
	
	if (u8Comparsion_result == 1)
     4f0:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <u8Comparsion_result>
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	11 f4       	brne	.+4      	; 0x4fc <BT_CHECK_FOR_ADC_TEST_COMMAND+0x22>
	{
		BT_TEST_ADC();
     4f8:	0e 94 cc 00 	call	0x198	; 0x198 <BT_TEST_ADC>
     4fc:	08 95       	ret

000004fe <BT_CHECK_FOR_PWM_TEST_COMMAND>:
	{
	}
}
extern void BT_CHECK_FOR_PWM_TEST_COMMAND()
{
	u8Comparsion_result = 0;
     4fe:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8Comparsion_result>
	u8Comparsion_result = BT_STRING_COMPARE(c8BT_received_data , c8Statement_PWM_TEST , 7);
     502:	47 e0       	ldi	r20, 0x07	; 7
     504:	6e e6       	ldi	r22, 0x6E	; 110
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	81 ed       	ldi	r24, 0xD1	; 209
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	0e 94 49 00 	call	0x92	; 0x92 <BT_STRING_COMPARE>
     510:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <u8Comparsion_result>
	
	if (u8Comparsion_result == 1)
     514:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <u8Comparsion_result>
     518:	81 30       	cpi	r24, 0x01	; 1
     51a:	11 f4       	brne	.+4      	; 0x520 <BT_CHECK_FOR_PWM_TEST_COMMAND+0x22>
	{
		BT_TEST_PWM();
     51c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <BT_TEST_PWM>
     520:	08 95       	ret

00000522 <BT_CHECK_FOR_EXIT_COMMAND>:
	{
	}
}
extern void BT_CHECK_FOR_EXIT_COMMAND()
{
	u8Comparsion_result = 0;
     522:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8Comparsion_result>
	u8Comparsion_result = BT_STRING_COMPARE(c8BT_received_data , c8Statement_EXIT , 7);
     526:	47 e0       	ldi	r20, 0x07	; 7
     528:	66 e6       	ldi	r22, 0x66	; 102
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	81 ed       	ldi	r24, 0xD1	; 209
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	0e 94 49 00 	call	0x92	; 0x92 <BT_STRING_COMPARE>
     534:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <u8Comparsion_result>
	
	if (u8Comparsion_result == 1)
     538:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <u8Comparsion_result>
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	29 f4       	brne	.+10     	; 0x54a <BT_CHECK_FOR_EXIT_COMMAND+0x28>
	{
		u8Free_mode_end ++ ;
     540:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <u8Free_mode_end>
     544:	8f 5f       	subi	r24, 0xFF	; 255
     546:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <u8Free_mode_end>
     54a:	08 95       	ret

0000054c <BT_KHOSTIKA>:
	{
	}
}

extern void BT_KHOSTIKA()
{
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	68 94       	set
     558:	ff 24       	eor	r15, r15
     55a:	f2 f8       	bld	r15, 2
     55c:	06 ed       	ldi	r16, 0xD6	; 214
     55e:	12 e0       	ldi	r17, 0x02	; 2
	uint8_t u8Count1 = 0 ;
	uint8_t u8Count2 = 0 ;
	
	for (u8Count1 = 0 ; u8Count1 < 4 ; u8Count1 ++)
	{
		u8Comparsion_result = 0;
     560:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8Comparsion_result>
		
		USART_TRANSMIT_CERTAIN_STRING("La\n", 4);
     564:	64 e0       	ldi	r22, 0x04	; 4
     566:	83 ea       	ldi	r24, 0xA3	; 163
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
		
		LCD_COMMAND(CLEAR_DISPLAY);
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     574:	8f e6       	ldi	r24, 0x6F	; 111
     576:	97 e1       	ldi	r25, 0x17	; 23
     578:	01 97       	sbiw	r24, 0x01	; 1
     57a:	f1 f7       	brne	.-4      	; 0x578 <BT_KHOSTIKA+0x2c>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <BT_KHOSTIKA+0x32>
     57e:	00 00       	nop
		_delay_us(2000);
		LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     580:	86 e0       	ldi	r24, 0x06	; 6
     582:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     586:	8b e2       	ldi	r24, 0x2B	; 43
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	01 97       	sbiw	r24, 0x01	; 1
     58c:	f1 f7       	brne	.-4      	; 0x58a <BT_KHOSTIKA+0x3e>
     58e:	00 c0       	rjmp	.+0      	; 0x590 <BT_KHOSTIKA+0x44>
     590:	00 00       	nop
		_delay_us(100);
		
		LCD_COMMAND(FIRST_LINE_START);
     592:	80 e8       	ldi	r24, 0x80	; 128
     594:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
		LCD_DATA_CERTAIN_STRING("La" , 2);
     598:	62 e0       	ldi	r22, 0x02	; 2
     59a:	87 ea       	ldi	r24, 0xA7	; 167
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	0e 94 6f 05 	call	0xade	; 0xade <LCD_DATA_CERTAIN_STRING>
     5a2:	c1 ed       	ldi	r28, 0xD1	; 209
     5a4:	d2 e0       	ldi	r29, 0x02	; 2
		
		for (u8Count2 = 0 ; u8Count2 < 5 ; u8Count2 ++)
		{
			USART_RECEIVE(&c8BT_received_data[u8Count2]);
     5a6:	ce 01       	movw	r24, r28
     5a8:	0e 94 30 08 	call	0x1060	; 0x1060 <USART_RECEIVE>
     5ac:	21 96       	adiw	r28, 0x01	; 1
		_delay_us(100);
		
		LCD_COMMAND(FIRST_LINE_START);
		LCD_DATA_CERTAIN_STRING("La" , 2);
		
		for (u8Count2 = 0 ; u8Count2 < 5 ; u8Count2 ++)
     5ae:	c0 17       	cp	r28, r16
     5b0:	d1 07       	cpc	r29, r17
     5b2:	c9 f7       	brne	.-14     	; 0x5a6 <BT_KHOSTIKA+0x5a>
		{
			USART_RECEIVE(&c8BT_received_data[u8Count2]);
		}
		USART_TRANSMIT_CERTAIN_STRING(c8BT_received_data , 5);
     5b4:	65 e0       	ldi	r22, 0x05	; 5
     5b6:	81 ed       	ldi	r24, 0xD1	; 209
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
		USART_TRANSMIT_CERTAIN_STRING("\n" , 2);
     5be:	62 e0       	ldi	r22, 0x02	; 2
     5c0:	80 e6       	ldi	r24, 0x60	; 96
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
		
		LCD_COMMAND(CLEAR_DISPLAY);
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     5ce:	8f e6       	ldi	r24, 0x6F	; 111
     5d0:	97 e1       	ldi	r25, 0x17	; 23
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <BT_KHOSTIKA+0x86>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <BT_KHOSTIKA+0x8c>
     5d8:	00 00       	nop
		_delay_us(2000);
		LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     5da:	86 e0       	ldi	r24, 0x06	; 6
     5dc:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     5e0:	8b e2       	ldi	r24, 0x2B	; 43
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <BT_KHOSTIKA+0x98>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <BT_KHOSTIKA+0x9e>
     5ea:	00 00       	nop
		_delay_us(100);
		LCD_COMMAND(FIRST_LINE_START);
     5ec:	80 e8       	ldi	r24, 0x80	; 128
     5ee:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
		LCD_DATA_CERTAIN_STRING("PALIZ" , 5);
     5f2:	65 e0       	ldi	r22, 0x05	; 5
     5f4:	8a ea       	ldi	r24, 0xAA	; 170
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	0e 94 6f 05 	call	0xade	; 0xade <LCD_DATA_CERTAIN_STRING>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5fc:	9f ef       	ldi	r25, 0xFF	; 255
     5fe:	2e e9       	ldi	r18, 0x9E	; 158
     600:	84 e2       	ldi	r24, 0x24	; 36
     602:	91 50       	subi	r25, 0x01	; 1
     604:	20 40       	sbci	r18, 0x00	; 0
     606:	80 40       	sbci	r24, 0x00	; 0
     608:	e1 f7       	brne	.-8      	; 0x602 <BT_KHOSTIKA+0xb6>
     60a:	00 c0       	rjmp	.+0      	; 0x60c <BT_KHOSTIKA+0xc0>
     60c:	00 00       	nop
		_delay_ms(1000);
		
		u8Comparsion_result = BT_STRING_COMPARE(c8BT_received_data , c8Statement_PALIZ , 5);
     60e:	45 e0       	ldi	r20, 0x05	; 5
     610:	60 e6       	ldi	r22, 0x60	; 96
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	81 ed       	ldi	r24, 0xD1	; 209
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	0e 94 49 00 	call	0x92	; 0x92 <BT_STRING_COMPARE>
     61c:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <u8Comparsion_result>
		
		if (u8Comparsion_result == 1)
     620:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <u8Comparsion_result>
     624:	81 30       	cpi	r24, 0x01	; 1
     626:	29 f4       	brne	.+10     	; 0x632 <BT_KHOSTIKA+0xe6>
		{
			u8KHOSTIKA ++ ;
     628:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <__data_end>
     62c:	8f 5f       	subi	r24, 0xFF	; 255
     62e:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <__data_end>
     632:	fa 94       	dec	r15
extern void BT_KHOSTIKA()
{
	uint8_t u8Count1 = 0 ;
	uint8_t u8Count2 = 0 ;
	
	for (u8Count1 = 0 ; u8Count1 < 4 ; u8Count1 ++)
     634:	f1 10       	cpse	r15, r1
     636:	94 cf       	rjmp	.-216    	; 0x560 <BT_KHOSTIKA+0x14>
		else
		{
		}
	}
		
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	ff 90       	pop	r15
     642:	08 95       	ret

00000644 <BT_CHECK_FOR_LED1_ON_COMMAND>:
	} while (u8Free_mode_end == 0);
}

extern void BT_CHECK_FOR_LED1_ON_COMMAND()
{
	u8Comparsion_result = 0;
     644:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8Comparsion_result>
	u8Comparsion_result = BT_STRING_COMPARE(c8BT_received_data , c8Statement_LED1_ON , 7);
     648:	47 e0       	ldi	r20, 0x07	; 7
     64a:	68 ec       	ldi	r22, 0xC8	; 200
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	81 ed       	ldi	r24, 0xD1	; 209
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	0e 94 49 00 	call	0x92	; 0x92 <BT_STRING_COMPARE>
     656:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <u8Comparsion_result>
	
	if (u8Comparsion_result == 1)
     65a:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <u8Comparsion_result>
     65e:	81 30       	cpi	r24, 0x01	; 1
     660:	09 f0       	breq	.+2      	; 0x664 <BT_CHECK_FOR_LED1_ON_COMMAND+0x20>
     662:	58 c0       	rjmp	.+176    	; 0x714 <BT_CHECK_FOR_LED1_ON_COMMAND+0xd0>
	{
		BT_KHOSTIKA();
     664:	0e 94 a6 02 	call	0x54c	; 0x54c <BT_KHOSTIKA>
		if (u8KHOSTIKA == 4)
     668:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <__data_end>
     66c:	84 30       	cpi	r24, 0x04	; 4
     66e:	51 f5       	brne	.+84     	; 0x6c4 <BT_CHECK_FOR_LED1_ON_COMMAND+0x80>
		{
			USART_TRANSMIT_CERTAIN_STRING("k\n",3);
     670:	63 e0       	ldi	r22, 0x03	; 3
     672:	80 eb       	ldi	r24, 0xB0	; 176
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
			
			LCD_COMMAND(CLEAR_DISPLAY);
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     680:	8f e6       	ldi	r24, 0x6F	; 111
     682:	97 e1       	ldi	r25, 0x17	; 23
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <BT_CHECK_FOR_LED1_ON_COMMAND+0x40>
     688:	00 c0       	rjmp	.+0      	; 0x68a <BT_CHECK_FOR_LED1_ON_COMMAND+0x46>
     68a:	00 00       	nop
			_delay_us(2000);
			LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     68c:	86 e0       	ldi	r24, 0x06	; 6
     68e:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     692:	8b e2       	ldi	r24, 0x2B	; 43
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	01 97       	sbiw	r24, 0x01	; 1
     698:	f1 f7       	brne	.-4      	; 0x696 <BT_CHECK_FOR_LED1_ON_COMMAND+0x52>
     69a:	00 c0       	rjmp	.+0      	; 0x69c <BT_CHECK_FOR_LED1_ON_COMMAND+0x58>
     69c:	00 00       	nop
			_delay_us(100);
			
			LCD_COMMAND(FIRST_LINE_START);
     69e:	80 e8       	ldi	r24, 0x80	; 128
     6a0:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
			LCD_DATA('k');
     6a4:	8b e6       	ldi	r24, 0x6B	; 107
     6a6:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_DATA>
			
			LED_ON(LED1);
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	0e 94 00 06 	call	0xc00	; 0xc00 <LED_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6b0:	9f ef       	ldi	r25, 0xFF	; 255
     6b2:	2e e9       	ldi	r18, 0x9E	; 158
     6b4:	84 e2       	ldi	r24, 0x24	; 36
     6b6:	91 50       	subi	r25, 0x01	; 1
     6b8:	20 40       	sbci	r18, 0x00	; 0
     6ba:	80 40       	sbci	r24, 0x00	; 0
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <BT_CHECK_FOR_LED1_ON_COMMAND+0x72>
     6be:	00 c0       	rjmp	.+0      	; 0x6c0 <BT_CHECK_FOR_LED1_ON_COMMAND+0x7c>
     6c0:	00 00       	nop
     6c2:	08 95       	ret
			_delay_ms(1000);			
		}
		else
		{
			USART_TRANSMIT_CERTAIN_STRING("La brdo hahbem\n", 16);
     6c4:	60 e1       	ldi	r22, 0x10	; 16
     6c6:	83 eb       	ldi	r24, 0xB3	; 179
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
			LCD_COMMAND(CLEAR_DISPLAY);
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d4:	8f e6       	ldi	r24, 0x6F	; 111
     6d6:	97 e1       	ldi	r25, 0x17	; 23
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <BT_CHECK_FOR_LED1_ON_COMMAND+0x94>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <BT_CHECK_FOR_LED1_ON_COMMAND+0x9a>
     6de:	00 00       	nop
			_delay_us(2000);
			LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     6e0:	86 e0       	ldi	r24, 0x06	; 6
     6e2:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     6e6:	8b e2       	ldi	r24, 0x2B	; 43
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <BT_CHECK_FOR_LED1_ON_COMMAND+0xa6>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <BT_CHECK_FOR_LED1_ON_COMMAND+0xac>
     6f0:	00 00       	nop
			_delay_us(100);
			
			LCD_COMMAND(FIRST_LINE_START);
     6f2:	80 e8       	ldi	r24, 0x80	; 128
     6f4:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
			LCD_DATA_CERTAIN_STRING("La brdo hahbem" , 14);
     6f8:	6e e0       	ldi	r22, 0x0E	; 14
     6fa:	83 ec       	ldi	r24, 0xC3	; 195
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	0e 94 6f 05 	call	0xade	; 0xade <LCD_DATA_CERTAIN_STRING>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     702:	9f ef       	ldi	r25, 0xFF	; 255
     704:	2b e7       	ldi	r18, 0x7B	; 123
     706:	82 e9       	ldi	r24, 0x92	; 146
     708:	91 50       	subi	r25, 0x01	; 1
     70a:	20 40       	sbci	r18, 0x00	; 0
     70c:	80 40       	sbci	r24, 0x00	; 0
     70e:	e1 f7       	brne	.-8      	; 0x708 <BT_CHECK_FOR_LED1_ON_COMMAND+0xc4>
     710:	00 c0       	rjmp	.+0      	; 0x712 <BT_CHECK_FOR_LED1_ON_COMMAND+0xce>
     712:	00 00       	nop
     714:	08 95       	ret

00000716 <BT_FREE_MODE>:
	
	USART_TRANSMIT_CERTAIN_STRING("\n" , 2);
	USART_TRANSMIT_CERTAIN_STRING("Choose another operation\n" , 26);
}
extern void BT_FREE_MODE()
{		
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	08 ed       	ldi	r16, 0xD8	; 216
     720:	12 e0       	ldi	r17, 0x02	; 2
	uint8_t u8Count = 0 ;

	do 
	{
		u8KHOSTIKA = 0 ;
     722:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <__data_end>
		
		LCD_COMMAND(CLEAR_DISPLAY);
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     72c:	8f e6       	ldi	r24, 0x6F	; 111
     72e:	97 e1       	ldi	r25, 0x17	; 23
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	f1 f7       	brne	.-4      	; 0x730 <BT_FREE_MODE+0x1a>
     734:	00 c0       	rjmp	.+0      	; 0x736 <BT_FREE_MODE+0x20>
     736:	00 00       	nop
		_delay_us(2000);
		LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     738:	86 e0       	ldi	r24, 0x06	; 6
     73a:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     73e:	8b e2       	ldi	r24, 0x2B	; 43
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <BT_FREE_MODE+0x2c>
     746:	00 c0       	rjmp	.+0      	; 0x748 <BT_FREE_MODE+0x32>
     748:	00 00       	nop
		_delay_us(100);
		
		LCD_COMMAND(FIRST_LINE_START);
     74a:	80 e8       	ldi	r24, 0x80	; 128
     74c:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
		LCD_DATA_CERTAIN_STRING("You are now" , 11);
     750:	6b e0       	ldi	r22, 0x0B	; 11
     752:	82 ed       	ldi	r24, 0xD2	; 210
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 6f 05 	call	0xade	; 0xade <LCD_DATA_CERTAIN_STRING>
		
		LCD_COMMAND(SECOND_LINE_START);
     75a:	80 ec       	ldi	r24, 0xC0	; 192
     75c:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
		LCD_DATA_CERTAIN_STRING("    in free mode" , 16);
     760:	60 e1       	ldi	r22, 0x10	; 16
     762:	8e ed       	ldi	r24, 0xDE	; 222
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	0e 94 6f 05 	call	0xade	; 0xade <LCD_DATA_CERTAIN_STRING>
		
		USART_TRANSMIT_CERTAIN_STRING("You are now in free mode\n" , 26);
     76a:	6a e1       	ldi	r22, 0x1A	; 26
     76c:	8f ee       	ldi	r24, 0xEF	; 239
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
		USART_TRANSMIT_CERTAIN_STRING("Please enter an instruction\n" , 29);
     774:	6d e1       	ldi	r22, 0x1D	; 29
     776:	89 e0       	ldi	r24, 0x09	; 9
     778:	92 e0       	ldi	r25, 0x02	; 2
     77a:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
     77e:	c1 ed       	ldi	r28, 0xD1	; 209
     780:	d2 e0       	ldi	r29, 0x02	; 2
		
		for (u8Count = 0 ; u8Count < 7 ; u8Count ++)
		{
			USART_RECEIVE(&c8BT_received_data[u8Count]);
     782:	ce 01       	movw	r24, r28
     784:	0e 94 30 08 	call	0x1060	; 0x1060 <USART_RECEIVE>
     788:	21 96       	adiw	r28, 0x01	; 1
		LCD_DATA_CERTAIN_STRING("    in free mode" , 16);
		
		USART_TRANSMIT_CERTAIN_STRING("You are now in free mode\n" , 26);
		USART_TRANSMIT_CERTAIN_STRING("Please enter an instruction\n" , 29);
		
		for (u8Count = 0 ; u8Count < 7 ; u8Count ++)
     78a:	c0 17       	cp	r28, r16
     78c:	d1 07       	cpc	r29, r17
     78e:	c9 f7       	brne	.-14     	; 0x782 <BT_FREE_MODE+0x6c>
		{
			USART_RECEIVE(&c8BT_received_data[u8Count]);
		}		
		
		BT_CHECK_FOR_LED1_ON_COMMAND();
     790:	0e 94 22 03 	call	0x644	; 0x644 <BT_CHECK_FOR_LED1_ON_COMMAND>
		BT_CHECK_FOR_LED1_OFF_COMMAND();
     794:	0e 94 c7 01 	call	0x38e	; 0x38e <BT_CHECK_FOR_LED1_OFF_COMMAND>
		BT_CHECK_FOR_LED2_ON_COMMAND();
     798:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <BT_CHECK_FOR_LED2_ON_COMMAND>
		BT_CHECK_FOR_LED2_OFF_COMMAND();
     79c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <BT_CHECK_FOR_LED2_OFF_COMMAND>
		BT_CHECK_FOR_LED3_ON_COMMAND();
     7a0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <BT_CHECK_FOR_LED3_ON_COMMAND>
		BT_CHECK_FOR_LED3_OFF_COMMAND();
     7a4:	0e 94 12 02 	call	0x424	; 0x424 <BT_CHECK_FOR_LED3_OFF_COMMAND>
		BT_CHECK_FOR_BUZZER_ON_COMMAND();
     7a8:	0e 94 25 02 	call	0x44a	; 0x44a <BT_CHECK_FOR_BUZZER_ON_COMMAND>
		BT_CHECK_FOR_BUZZER_OFF_COMMAND();
     7ac:	0e 94 37 02 	call	0x46e	; 0x46e <BT_CHECK_FOR_BUZZER_OFF_COMMAND>
		BT_CHECK_FOR_RELAY_ON_COMMAND();
     7b0:	0e 94 49 02 	call	0x492	; 0x492 <BT_CHECK_FOR_RELAY_ON_COMMAND>
		BT_CHECK_FOR_RELAY_OFF_COMMAND();
     7b4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <BT_CHECK_FOR_RELAY_OFF_COMMAND>
		BT_CHECK_FOR_ADC_TEST_COMMAND();
     7b8:	0e 94 6d 02 	call	0x4da	; 0x4da <BT_CHECK_FOR_ADC_TEST_COMMAND>
		BT_CHECK_FOR_PWM_TEST_COMMAND();
     7bc:	0e 94 7f 02 	call	0x4fe	; 0x4fe <BT_CHECK_FOR_PWM_TEST_COMMAND>
		BT_CHECK_FOR_EXIT_COMMAND();
     7c0:	0e 94 91 02 	call	0x522	; 0x522 <BT_CHECK_FOR_EXIT_COMMAND>
	
	} while (u8Free_mode_end == 0);
     7c4:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <u8Free_mode_end>
     7c8:	88 23       	and	r24, r24
     7ca:	09 f4       	brne	.+2      	; 0x7ce <BT_FREE_MODE+0xb8>
     7cc:	aa cf       	rjmp	.-172    	; 0x722 <BT_FREE_MODE+0xc>
}
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	1f 91       	pop	r17
     7d4:	0f 91       	pop	r16
     7d6:	08 95       	ret

000007d8 <AMIT_BT_TEST>:
static uint8_t u8Button2_reading = 0;
static uint8_t u8KHOSTIKA = 0 ;
	
extern void AMIT_BT_TEST()
{	
	USART_TRANSMIT_CERTAIN_STRING("AMIT_LEARNING\n" , 15);
     7d8:	6f e0       	ldi	r22, 0x0F	; 15
     7da:	86 e2       	ldi	r24, 0x26	; 38
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	USART_TRANSMIT_CERTAIN_STRING("Please choose an operation :\n",30);
     7e2:	6e e1       	ldi	r22, 0x1E	; 30
     7e4:	85 e3       	ldi	r24, 0x35	; 53
     7e6:	92 e0       	ldi	r25, 0x02	; 2
     7e8:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	USART_TRANSMIT_CERTAIN_STRING("1) Test LEDS \n" , 15);
     7ec:	6f e0       	ldi	r22, 0x0F	; 15
     7ee:	83 e5       	ldi	r24, 0x53	; 83
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	USART_TRANSMIT_CERTAIN_STRING("2) Test BUZZER\n" , 16);
     7f6:	60 e1       	ldi	r22, 0x10	; 16
     7f8:	82 e6       	ldi	r24, 0x62	; 98
     7fa:	92 e0       	ldi	r25, 0x02	; 2
     7fc:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	USART_TRANSMIT_CERTAIN_STRING("3) Test RELAY\n" , 15);
     800:	6f e0       	ldi	r22, 0x0F	; 15
     802:	82 e7       	ldi	r24, 0x72	; 114
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	USART_TRANSMIT_CERTAIN_STRING("4) Test ADC\n" , 13);
     80a:	6d e0       	ldi	r22, 0x0D	; 13
     80c:	81 e8       	ldi	r24, 0x81	; 129
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	USART_TRANSMIT_CERTAIN_STRING("5) PWM\n" , 8);
     814:	68 e0       	ldi	r22, 0x08	; 8
     816:	8e e8       	ldi	r24, 0x8E	; 142
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	USART_TRANSMIT_CERTAIN_STRING("6) FREE MODE\n" , 14);
     81e:	6e e0       	ldi	r22, 0x0E	; 14
     820:	86 e9       	ldi	r24, 0x96	; 150
     822:	92 e0       	ldi	r25, 0x02	; 2
     824:	0e 94 36 08 	call	0x106c	; 0x106c <USART_TRANSMIT_CERTAIN_STRING>
	
	do
	{
		LCD_COMMAND(CLEAR_DISPLAY);
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     82e:	8f e6       	ldi	r24, 0x6F	; 111
     830:	97 e1       	ldi	r25, 0x17	; 23
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <AMIT_BT_TEST+0x5a>
     836:	00 c0       	rjmp	.+0      	; 0x838 <AMIT_BT_TEST+0x60>
     838:	00 00       	nop
		_delay_us(2000);
		LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     83a:	86 e0       	ldi	r24, 0x06	; 6
     83c:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     840:	8b e2       	ldi	r24, 0x2B	; 43
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	f1 f7       	brne	.-4      	; 0x844 <AMIT_BT_TEST+0x6c>
     848:	00 c0       	rjmp	.+0      	; 0x84a <AMIT_BT_TEST+0x72>
     84a:	00 00       	nop
		_delay_us(100);
		
		LCD_COMMAND(FIRST_LINE_START);
     84c:	80 e8       	ldi	r24, 0x80	; 128
     84e:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
		LCD_DATA_CERTAIN_STRING(" AMIT__LEARNING" , 15);
     852:	6f e0       	ldi	r22, 0x0F	; 15
     854:	84 ea       	ldi	r24, 0xA4	; 164
     856:	92 e0       	ldi	r25, 0x02	; 2
     858:	0e 94 6f 05 	call	0xade	; 0xade <LCD_DATA_CERTAIN_STRING>
		
		LCD_COMMAND(SECOND_LINE_START);
     85c:	80 ec       	ldi	r24, 0xC0	; 192
     85e:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
		LCD_DATA_CERTAIN_STRING("Open BT to start" , 16);
     862:	60 e1       	ldi	r22, 0x10	; 16
     864:	84 eb       	ldi	r24, 0xB4	; 180
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	0e 94 6f 05 	call	0xade	; 0xade <LCD_DATA_CERTAIN_STRING>
		
		USART_RECEIVE(&u8Data);
     86c:	80 ed       	ldi	r24, 0xD0	; 208
     86e:	92 e0       	ldi	r25, 0x02	; 2
     870:	0e 94 30 08 	call	0x1060	; 0x1060 <USART_RECEIVE>
	
		if (u8Data == '1')
     874:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <u8Data>
     878:	81 33       	cpi	r24, 0x31	; 49
     87a:	19 f4       	brne	.+6      	; 0x882 <__stack+0x23>
		{
			BT_TEST_LEDS();
     87c:	0e 94 66 00 	call	0xcc	; 0xcc <BT_TEST_LEDS>
     880:	d3 cf       	rjmp	.-90     	; 0x828 <AMIT_BT_TEST+0x50>
		}
	
		else if (u8Data == '2')
     882:	82 33       	cpi	r24, 0x32	; 50
     884:	19 f4       	brne	.+6      	; 0x88c <__stack+0x2d>
		{
			BT_TEST_BUZZER();
     886:	0e 94 88 00 	call	0x110	; 0x110 <BT_TEST_BUZZER>
     88a:	ce cf       	rjmp	.-100    	; 0x828 <AMIT_BT_TEST+0x50>
		}
	
		else if (u8Data == '3')
     88c:	83 33       	cpi	r24, 0x33	; 51
     88e:	19 f4       	brne	.+6      	; 0x896 <__stack+0x37>
		{
			BT_TEST_RELAY();
     890:	0e 94 aa 00 	call	0x154	; 0x154 <BT_TEST_RELAY>
     894:	c9 cf       	rjmp	.-110    	; 0x828 <AMIT_BT_TEST+0x50>
		}
	
		else if (u8Data == '4')
     896:	84 33       	cpi	r24, 0x34	; 52
     898:	19 f4       	brne	.+6      	; 0x8a0 <__stack+0x41>
		{
			BT_TEST_ADC();
     89a:	0e 94 cc 00 	call	0x198	; 0x198 <BT_TEST_ADC>
     89e:	c4 cf       	rjmp	.-120    	; 0x828 <AMIT_BT_TEST+0x50>
		}
	
		else if (u8Data == '5')
     8a0:	85 33       	cpi	r24, 0x35	; 53
     8a2:	19 f4       	brne	.+6      	; 0x8aa <__stack+0x4b>
		{
			BT_TEST_PWM();
     8a4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <BT_TEST_PWM>
     8a8:	bf cf       	rjmp	.-130    	; 0x828 <AMIT_BT_TEST+0x50>
		}
		
		else if (u8Data == '6')
     8aa:	86 33       	cpi	r24, 0x36	; 54
     8ac:	09 f0       	breq	.+2      	; 0x8b0 <__stack+0x51>
     8ae:	bc cf       	rjmp	.-136    	; 0x828 <AMIT_BT_TEST+0x50>
		{
			BT_FREE_MODE();
     8b0:	0e 94 8b 03 	call	0x716	; 0x716 <BT_FREE_MODE>
     8b4:	b9 cf       	rjmp	.-142    	; 0x828 <AMIT_BT_TEST+0x50>

000008b6 <BUTTON2_READ>:
		*pu8Reading = 0;
	}
}

extern void BUTTON2_READ(uint8_t *pu8Reading)
{
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	1f 92       	push	r1
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	7c 01       	movw	r14, r24
	uint8_t u8Temp = 0;
     8ca:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Num_of_correct_checks = 0;
	
	Pin_read(BUTTON2_PIN , BUTTON2_PIN_NUMBER , &u8Temp);
     8cc:	ae 01       	movw	r20, r28
     8ce:	4f 5f       	subi	r20, 0xFF	; 255
     8d0:	5f 4f       	sbci	r21, 0xFF	; 255
     8d2:	62 e0       	ldi	r22, 0x02	; 2
     8d4:	80 e3       	ldi	r24, 0x30	; 48
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 a2 07 	call	0xf44	; 0xf44 <Pin_read>
	
	if (u8Temp != 0)
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	88 23       	and	r24, r24
     8e0:	b9 f0       	breq	.+46     	; 0x910 <BUTTON2_READ+0x5a>
     8e2:	16 e9       	ldi	r17, 0x96	; 150
     8e4:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
		{
			Pin_read(BUTTON2_PIN , BUTTON2_PIN_NUMBER , &u8Temp);
     8e6:	ae 01       	movw	r20, r28
     8e8:	4f 5f       	subi	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	62 e0       	ldi	r22, 0x02	; 2
     8ee:	80 e3       	ldi	r24, 0x30	; 48
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 a2 07 	call	0xf44	; 0xf44 <Pin_read>
			
			if (u8Temp != 0)
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
     8f8:	81 11       	cpse	r24, r1
			{
				u8Num_of_correct_checks ++ ;
     8fa:	0f 5f       	subi	r16, 0xFF	; 255
     8fc:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(BUTTON2_PIN , BUTTON2_PIN_NUMBER , &u8Temp);
	
	if (u8Temp != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
     8fe:	99 f7       	brne	.-26     	; 0x8e6 <BUTTON2_READ+0x30>
			{
				
			}
		}
		
		if (u8Num_of_correct_checks == NUMBER_OF_CHECKS)
     900:	06 39       	cpi	r16, 0x96	; 150
     902:	19 f4       	brne	.+6      	; 0x90a <BUTTON2_READ+0x54>
		{
			*pu8Reading = u8Temp;
     904:	f7 01       	movw	r30, r14
     906:	80 83       	st	Z, r24
     908:	05 c0       	rjmp	.+10     	; 0x914 <BUTTON2_READ+0x5e>
		}
		else
		{
			*pu8Reading = 0;
     90a:	f7 01       	movw	r30, r14
     90c:	10 82       	st	Z, r1
     90e:	02 c0       	rjmp	.+4      	; 0x914 <BUTTON2_READ+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
     910:	f7 01       	movw	r30, r14
     912:	10 82       	st	Z, r1
	}
     914:	0f 90       	pop	r0
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	08 95       	ret

00000924 <BUZZER_ON>:
 */ 
#include "BUZZER_INTERFACE.h"

extern void BUZZER_ON()
{
	Pin_set(BUZZER_PORT , BUZZER_PIN_NUMBER);
     924:	64 e0       	ldi	r22, 0x04	; 4
     926:	82 e3       	ldi	r24, 0x32	; 50
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 67 07 	call	0xece	; 0xece <Pin_set>
     92e:	08 95       	ret

00000930 <BUZZER_OFF>:
}

extern void BUZZER_OFF()
{
	Pin_reset(BUZZER_PORT , BUZZER_PIN_NUMBER);
     930:	64 e0       	ldi	r22, 0x04	; 4
     932:	82 e3       	ldi	r24, 0x32	; 50
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 73 07 	call	0xee6	; 0xee6 <Pin_reset>
     93a:	08 95       	ret

0000093c <BUZZER_FLICKER>:
}

extern void BUZZER_FLICKER()
{
     93c:	cf 93       	push	r28
     93e:	c3 e0       	ldi	r28, 0x03	; 3
	uint8_t u8Count = 0;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_BUZZER_FLICKERS ; u8Count ++)
	{
		BUZZER_ON();
     940:	0e 94 92 04 	call	0x924	; 0x924 <BUZZER_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     944:	2f e7       	ldi	r18, 0x7F	; 127
     946:	8c ef       	ldi	r24, 0xFC	; 252
     948:	9a e0       	ldi	r25, 0x0A	; 10
     94a:	21 50       	subi	r18, 0x01	; 1
     94c:	80 40       	sbci	r24, 0x00	; 0
     94e:	90 40       	sbci	r25, 0x00	; 0
     950:	e1 f7       	brne	.-8      	; 0x94a <BUZZER_FLICKER+0xe>
     952:	00 c0       	rjmp	.+0      	; 0x954 <BUZZER_FLICKER+0x18>
     954:	00 00       	nop
		_delay_ms(BUZZER_FLICKERING_PERIOD);
		BUZZER_OFF();
     956:	0e 94 98 04 	call	0x930	; 0x930 <BUZZER_OFF>
     95a:	2f e7       	ldi	r18, 0x7F	; 127
     95c:	8c ef       	ldi	r24, 0xFC	; 252
     95e:	9a e0       	ldi	r25, 0x0A	; 10
     960:	21 50       	subi	r18, 0x01	; 1
     962:	80 40       	sbci	r24, 0x00	; 0
     964:	90 40       	sbci	r25, 0x00	; 0
     966:	e1 f7       	brne	.-8      	; 0x960 <BUZZER_FLICKER+0x24>
     968:	00 c0       	rjmp	.+0      	; 0x96a <BUZZER_FLICKER+0x2e>
     96a:	00 00       	nop
     96c:	c1 50       	subi	r28, 0x01	; 1

extern void BUZZER_FLICKER()
{
	uint8_t u8Count = 0;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_BUZZER_FLICKERS ; u8Count ++)
     96e:	41 f7       	brne	.-48     	; 0x940 <BUZZER_FLICKER+0x4>
		BUZZER_ON();
		_delay_ms(BUZZER_FLICKERING_PERIOD);
		BUZZER_OFF();
		_delay_ms(BUZZER_FLICKERING_PERIOD);
	}
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <RW_STATE>:
	for (u8Count = 0; u8Count < u8Size - 1 ; u8Count ++)
	{
		LCD_DATA(pu8Data[u8Count]);
	}
	LCD_COMMAND(SHIFT_CURSOR_POSITION_RIGHT);
}
     974:	cf 93       	push	r28
     976:	c8 2f       	mov	r28, r24
     978:	21 e0       	ldi	r18, 0x01	; 1
     97a:	42 e0       	ldi	r20, 0x02	; 2
     97c:	67 e3       	ldi	r22, 0x37	; 55
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	88 e3       	ldi	r24, 0x38	; 56
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 80 07 	call	0xf00	; 0xf00 <Pin_mode>
     988:	c1 11       	cpse	r28, r1
     98a:	06 c0       	rjmp	.+12     	; 0x998 <RW_STATE+0x24>
     98c:	62 e0       	ldi	r22, 0x02	; 2
     98e:	88 e3       	ldi	r24, 0x38	; 56
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 73 07 	call	0xee6	; 0xee6 <Pin_reset>
     996:	07 c0       	rjmp	.+14     	; 0x9a6 <RW_STATE+0x32>
     998:	c1 30       	cpi	r28, 0x01	; 1
     99a:	29 f4       	brne	.+10     	; 0x9a6 <RW_STATE+0x32>
     99c:	62 e0       	ldi	r22, 0x02	; 2
     99e:	88 e3       	ldi	r24, 0x38	; 56
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 67 07 	call	0xece	; 0xece <Pin_set>
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <RS_STATE>:
     9aa:	cf 93       	push	r28
     9ac:	c8 2f       	mov	r28, r24
     9ae:	21 e0       	ldi	r18, 0x01	; 1
     9b0:	41 e0       	ldi	r20, 0x01	; 1
     9b2:	67 e3       	ldi	r22, 0x37	; 55
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	88 e3       	ldi	r24, 0x38	; 56
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 80 07 	call	0xf00	; 0xf00 <Pin_mode>
     9be:	c1 11       	cpse	r28, r1
     9c0:	06 c0       	rjmp	.+12     	; 0x9ce <RS_STATE+0x24>
     9c2:	61 e0       	ldi	r22, 0x01	; 1
     9c4:	88 e3       	ldi	r24, 0x38	; 56
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 73 07 	call	0xee6	; 0xee6 <Pin_reset>
     9cc:	07 c0       	rjmp	.+14     	; 0x9dc <RS_STATE+0x32>
     9ce:	c1 30       	cpi	r28, 0x01	; 1
     9d0:	29 f4       	brne	.+10     	; 0x9dc <RS_STATE+0x32>
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	88 e3       	ldi	r24, 0x38	; 56
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 67 07 	call	0xece	; 0xece <Pin_set>
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <ENABLE_STATE>:
     9e0:	cf 93       	push	r28
     9e2:	c8 2f       	mov	r28, r24
     9e4:	21 e0       	ldi	r18, 0x01	; 1
     9e6:	43 e0       	ldi	r20, 0x03	; 3
     9e8:	67 e3       	ldi	r22, 0x37	; 55
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	88 e3       	ldi	r24, 0x38	; 56
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 80 07 	call	0xf00	; 0xf00 <Pin_mode>
     9f4:	c1 11       	cpse	r28, r1
     9f6:	06 c0       	rjmp	.+12     	; 0xa04 <ENABLE_STATE+0x24>
     9f8:	63 e0       	ldi	r22, 0x03	; 3
     9fa:	88 e3       	ldi	r24, 0x38	; 56
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 73 07 	call	0xee6	; 0xee6 <Pin_reset>
     a02:	07 c0       	rjmp	.+14     	; 0xa12 <ENABLE_STATE+0x32>
     a04:	c1 30       	cpi	r28, 0x01	; 1
     a06:	29 f4       	brne	.+10     	; 0xa12 <ENABLE_STATE+0x32>
     a08:	63 e0       	ldi	r22, 0x03	; 3
     a0a:	88 e3       	ldi	r24, 0x38	; 56
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 67 07 	call	0xece	; 0xece <Pin_set>
     a12:	cf 91       	pop	r28
     a14:	08 95       	ret

00000a16 <HIGH_TO_LOW_PULSE>:
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ENABLE_STATE>
     a1c:	84 e1       	ldi	r24, 0x14	; 20
     a1e:	8a 95       	dec	r24
     a20:	f1 f7       	brne	.-4      	; 0xa1e <HIGH_TO_LOW_PULSE+0x8>
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ENABLE_STATE>
     a28:	80 e5       	ldi	r24, 0x50	; 80
     a2a:	8a 95       	dec	r24
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <HIGH_TO_LOW_PULSE+0x14>
     a2e:	08 95       	ret

00000a30 <LCD_COMMAND>:
     a30:	cf 93       	push	r28
     a32:	c8 2f       	mov	r28, r24
     a34:	8b b3       	in	r24, 0x1b	; 27
     a36:	9c b3       	in	r25, 0x1c	; 28
     a38:	8f 70       	andi	r24, 0x0F	; 15
     a3a:	99 27       	eor	r25, r25
     a3c:	2c 2f       	mov	r18, r28
     a3e:	20 7f       	andi	r18, 0xF0	; 240
     a40:	82 2b       	or	r24, r18
     a42:	9c bb       	out	0x1c, r25	; 28
     a44:	8b bb       	out	0x1b, r24	; 27
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	0e 94 d5 04 	call	0x9aa	; 0x9aa <RS_STATE>
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	0e 94 ba 04 	call	0x974	; 0x974 <RW_STATE>
     a52:	0e 94 0b 05 	call	0xa16	; 0xa16 <HIGH_TO_LOW_PULSE>
     a56:	20 e1       	ldi	r18, 0x10	; 16
     a58:	c2 9f       	mul	r28, r18
     a5a:	c0 01       	movw	r24, r0
     a5c:	11 24       	eor	r1, r1
     a5e:	9c bb       	out	0x1c, r25	; 28
     a60:	8b bb       	out	0x1b, r24	; 27
     a62:	0e 94 0b 05 	call	0xa16	; 0xa16 <HIGH_TO_LOW_PULSE>
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <LCD_DATA>:
     a6a:	cf 93       	push	r28
     a6c:	c8 2f       	mov	r28, r24
     a6e:	8b b3       	in	r24, 0x1b	; 27
     a70:	9c b3       	in	r25, 0x1c	; 28
     a72:	8f 70       	andi	r24, 0x0F	; 15
     a74:	99 27       	eor	r25, r25
     a76:	2c 2f       	mov	r18, r28
     a78:	20 7f       	andi	r18, 0xF0	; 240
     a7a:	82 2b       	or	r24, r18
     a7c:	9c bb       	out	0x1c, r25	; 28
     a7e:	8b bb       	out	0x1b, r24	; 27
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	0e 94 d5 04 	call	0x9aa	; 0x9aa <RS_STATE>
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	0e 94 ba 04 	call	0x974	; 0x974 <RW_STATE>
     a8c:	0e 94 0b 05 	call	0xa16	; 0xa16 <HIGH_TO_LOW_PULSE>
     a90:	20 e1       	ldi	r18, 0x10	; 16
     a92:	c2 9f       	mul	r28, r18
     a94:	c0 01       	movw	r24, r0
     a96:	11 24       	eor	r1, r1
     a98:	9c bb       	out	0x1c, r25	; 28
     a9a:	8b bb       	out	0x1b, r24	; 27
     a9c:	0e 94 0b 05 	call	0xa16	; 0xa16 <HIGH_TO_LOW_PULSE>
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <LCD_CERTAIN_DATA>:

extern void LCD_CERTAIN_DATA(char u8Data)
{
     aa4:	cf 93       	push	r28
     aa6:	c8 2f       	mov	r28, r24
	*((unsigned int *)(D4_PORT)) = (*((unsigned int *)(D4_PORT)) & 0x0F) | (u8Data & 0xF0) ;
     aa8:	8b b3       	in	r24, 0x1b	; 27
     aaa:	9c b3       	in	r25, 0x1c	; 28
     aac:	8f 70       	andi	r24, 0x0F	; 15
     aae:	99 27       	eor	r25, r25
     ab0:	2c 2f       	mov	r18, r28
     ab2:	20 7f       	andi	r18, 0xF0	; 240
     ab4:	82 2b       	or	r24, r18
     ab6:	9c bb       	out	0x1c, r25	; 28
     ab8:	8b bb       	out	0x1b, r24	; 27
	RS_STATE(RS_DATA);
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	0e 94 d5 04 	call	0x9aa	; 0x9aa <RS_STATE>
	RW_STATE(RW_WRITE);
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	0e 94 ba 04 	call	0x974	; 0x974 <RW_STATE>
	HIGH_TO_LOW_PULSE();
     ac6:	0e 94 0b 05 	call	0xa16	; 0xa16 <HIGH_TO_LOW_PULSE>
	
	*((unsigned int *)(D4_PORT)) = u8Data << 4;
     aca:	20 e1       	ldi	r18, 0x10	; 16
     acc:	c2 9f       	mul	r28, r18
     ace:	c0 01       	movw	r24, r0
     ad0:	11 24       	eor	r1, r1
     ad2:	9c bb       	out	0x1c, r25	; 28
     ad4:	8b bb       	out	0x1b, r24	; 27
	HIGH_TO_LOW_PULSE();
     ad6:	0e 94 0b 05 	call	0xa16	; 0xa16 <HIGH_TO_LOW_PULSE>
}
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <LCD_DATA_CERTAIN_STRING>:

extern void LCD_DATA_CERTAIN_STRING(char *pu8Data , uint8_t u8Size)
{
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
	uint8_t u8Count = 0;
	
	for (u8Count = 0; u8Count < u8Size ; u8Count ++)
     ae6:	66 23       	and	r22, r22
     ae8:	71 f0       	breq	.+28     	; 0xb06 <LCD_DATA_CERTAIN_STRING+0x28>
     aea:	ec 01       	movw	r28, r24
     aec:	61 50       	subi	r22, 0x01	; 1
     aee:	06 2f       	mov	r16, r22
     af0:	10 e0       	ldi	r17, 0x00	; 0
     af2:	0f 5f       	subi	r16, 0xFF	; 255
     af4:	1f 4f       	sbci	r17, 0xFF	; 255
     af6:	08 0f       	add	r16, r24
     af8:	19 1f       	adc	r17, r25
	{
		LCD_CERTAIN_DATA(pu8Data[u8Count]);
     afa:	89 91       	ld	r24, Y+
     afc:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LCD_CERTAIN_DATA>

extern void LCD_DATA_CERTAIN_STRING(char *pu8Data , uint8_t u8Size)
{
	uint8_t u8Count = 0;
	
	for (u8Count = 0; u8Count < u8Size ; u8Count ++)
     b00:	c0 17       	cp	r28, r16
     b02:	d1 07       	cpc	r29, r17
     b04:	d1 f7       	brne	.-12     	; 0xafa <LCD_DATA_CERTAIN_STRING+0x1c>
	{
		LCD_CERTAIN_DATA(pu8Data[u8Count]);
	}
	
}
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	08 95       	ret

00000b10 <LCD_INIT>:

extern void LCD_INIT()
{
	Pin_mode(RW_PORT, RW_DDR , RW_PIN_NUMBER , OUTPUT);
     b10:	21 e0       	ldi	r18, 0x01	; 1
     b12:	42 e0       	ldi	r20, 0x02	; 2
     b14:	67 e3       	ldi	r22, 0x37	; 55
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	88 e3       	ldi	r24, 0x38	; 56
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 80 07 	call	0xf00	; 0xf00 <Pin_mode>
	Pin_mode(RS_PORT, RS_DDR , RS_PIN_NUMBER , OUTPUT);
     b20:	21 e0       	ldi	r18, 0x01	; 1
     b22:	41 e0       	ldi	r20, 0x01	; 1
     b24:	67 e3       	ldi	r22, 0x37	; 55
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	88 e3       	ldi	r24, 0x38	; 56
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 80 07 	call	0xf00	; 0xf00 <Pin_mode>
	Pin_mode(ENABLE_PORT, ENABLE_DDR , ENABLE_PIN_NUMBER , OUTPUT);
     b30:	21 e0       	ldi	r18, 0x01	; 1
     b32:	43 e0       	ldi	r20, 0x03	; 3
     b34:	67 e3       	ldi	r22, 0x37	; 55
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	88 e3       	ldi	r24, 0x38	; 56
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 80 07 	call	0xf00	; 0xf00 <Pin_mode>
	
	Pin_mode(D4_PORT, D4_DDR , D4_PIN_NUMBER , OUTPUT);
     b40:	21 e0       	ldi	r18, 0x01	; 1
     b42:	44 e0       	ldi	r20, 0x04	; 4
     b44:	6a e3       	ldi	r22, 0x3A	; 58
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	8b e3       	ldi	r24, 0x3B	; 59
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 80 07 	call	0xf00	; 0xf00 <Pin_mode>
	Pin_mode(D5_PORT, D5_DDR , D5_PIN_NUMBER , OUTPUT);
     b50:	21 e0       	ldi	r18, 0x01	; 1
     b52:	45 e0       	ldi	r20, 0x05	; 5
     b54:	6a e3       	ldi	r22, 0x3A	; 58
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	8b e3       	ldi	r24, 0x3B	; 59
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 80 07 	call	0xf00	; 0xf00 <Pin_mode>
	Pin_mode(D6_PORT, D6_DDR , D6_PIN_NUMBER , OUTPUT);
     b60:	21 e0       	ldi	r18, 0x01	; 1
     b62:	46 e0       	ldi	r20, 0x06	; 6
     b64:	6a e3       	ldi	r22, 0x3A	; 58
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	8b e3       	ldi	r24, 0x3B	; 59
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 80 07 	call	0xf00	; 0xf00 <Pin_mode>
	Pin_mode(D7_PORT, D7_DDR , D7_PIN_NUMBER , OUTPUT);
     b70:	21 e0       	ldi	r18, 0x01	; 1
     b72:	47 e0       	ldi	r20, 0x07	; 7
     b74:	6a e3       	ldi	r22, 0x3A	; 58
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	8b e3       	ldi	r24, 0x3B	; 59
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 80 07 	call	0xf00	; 0xf00 <Pin_mode>
	
	ENABLE_STATE(ENABLE_LOW);
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ENABLE_STATE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b86:	8f e6       	ldi	r24, 0x6F	; 111
     b88:	97 e1       	ldi	r25, 0x17	; 23
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <LCD_INIT+0x7a>
     b8e:	00 c0       	rjmp	.+0      	; 0xb90 <LCD_INIT+0x80>
     b90:	00 00       	nop
	_delay_us(2000);
	
	LCD_COMMAND(INITIALIZE_COMMAND_1); 
     b92:	83 e3       	ldi	r24, 0x33	; 51
     b94:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     b98:	8b e2       	ldi	r24, 0x2B	; 43
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <LCD_INIT+0x8c>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <LCD_INIT+0x92>
     ba2:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(INITIALIZE_COMMAND_2); 
     ba4:	82 e3       	ldi	r24, 0x32	; 50
     ba6:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     baa:	8b e2       	ldi	r24, 0x2B	; 43
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <LCD_INIT+0x9e>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <LCD_INIT+0xa4>
     bb4:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(BIT_MODE4); 
     bb6:	88 e2       	ldi	r24, 0x28	; 40
     bb8:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     bbc:	8b e2       	ldi	r24, 0x2B	; 43
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	01 97       	sbiw	r24, 0x01	; 1
     bc2:	f1 f7       	brne	.-4      	; 0xbc0 <LCD_INIT+0xb0>
     bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <LCD_INIT+0xb6>
     bc6:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(DISPLAY_ON_CURSOR_BLINKING); 
     bc8:	8f e0       	ldi	r24, 0x0F	; 15
     bca:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     bce:	8b e2       	ldi	r24, 0x2B	; 43
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	f1 f7       	brne	.-4      	; 0xbd2 <LCD_INIT+0xc2>
     bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <LCD_INIT+0xc8>
     bd8:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(CLEAR_DISPLAY); 
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     be0:	8f e6       	ldi	r24, 0x6F	; 111
     be2:	97 e1       	ldi	r25, 0x17	; 23
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <LCD_INIT+0xd4>
     be8:	00 c0       	rjmp	.+0      	; 0xbea <LCD_INIT+0xda>
     bea:	00 00       	nop
	_delay_us(2000);
	LCD_COMMAND(SHIFT_CURSOR_RIGHT); 
     bec:	86 e0       	ldi	r24, 0x06	; 6
     bee:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_COMMAND>
     bf2:	8b e2       	ldi	r24, 0x2B	; 43
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	f1 f7       	brne	.-4      	; 0xbf6 <LCD_INIT+0xe6>
     bfa:	00 c0       	rjmp	.+0      	; 0xbfc <LCD_INIT+0xec>
     bfc:	00 00       	nop
     bfe:	08 95       	ret

00000c00 <LED_ON>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c00:	81 30       	cpi	r24, 0x01	; 1
     c02:	31 f4       	brne	.+12     	; 0xc10 <LED_ON+0x10>
     c04:	65 e0       	ldi	r22, 0x05	; 5
     c06:	82 e3       	ldi	r24, 0x32	; 50
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 67 07 	call	0xece	; 0xece <Pin_set>
     c0e:	08 95       	ret
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <LED_ON+0x20>
     c14:	66 e0       	ldi	r22, 0x06	; 6
     c16:	82 e3       	ldi	r24, 0x32	; 50
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 67 07 	call	0xece	; 0xece <Pin_set>
     c1e:	08 95       	ret
     c20:	83 30       	cpi	r24, 0x03	; 3
     c22:	29 f4       	brne	.+10     	; 0xc2e <LED_ON+0x2e>
     c24:	67 e0       	ldi	r22, 0x07	; 7
     c26:	82 e3       	ldi	r24, 0x32	; 50
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 67 07 	call	0xece	; 0xece <Pin_set>
     c2e:	08 95       	ret

00000c30 <LED_OFF>:
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	31 f4       	brne	.+12     	; 0xc40 <LED_OFF+0x10>
     c34:	65 e0       	ldi	r22, 0x05	; 5
     c36:	82 e3       	ldi	r24, 0x32	; 50
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 73 07 	call	0xee6	; 0xee6 <Pin_reset>
     c3e:	08 95       	ret
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	31 f4       	brne	.+12     	; 0xc50 <LED_OFF+0x20>
     c44:	66 e0       	ldi	r22, 0x06	; 6
     c46:	82 e3       	ldi	r24, 0x32	; 50
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 73 07 	call	0xee6	; 0xee6 <Pin_reset>
     c4e:	08 95       	ret
     c50:	83 30       	cpi	r24, 0x03	; 3
     c52:	29 f4       	brne	.+10     	; 0xc5e <LED_OFF+0x2e>
     c54:	67 e0       	ldi	r22, 0x07	; 7
     c56:	82 e3       	ldi	r24, 0x32	; 50
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 73 07 	call	0xee6	; 0xee6 <Pin_reset>
     c5e:	08 95       	ret

00000c60 <LEDS_FLASH>:
		
	}
}

extern void LEDS_FLASH()
{
     c60:	cf 93       	push	r28
     c62:	c5 e0       	ldi	r28, 0x05	; 5
	uint8_t u8Count = 0 ;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_LEDS_FLICKERS ; u8Count ++)
	{
		LED_ON(LED1);
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	0e 94 00 06 	call	0xc00	; 0xc00 <LED_ON>
		LED_ON(LED2);
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	0e 94 00 06 	call	0xc00	; 0xc00 <LED_ON>
		LED_ON(LED3);
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	0e 94 00 06 	call	0xc00	; 0xc00 <LED_ON>
     c76:	2f e7       	ldi	r18, 0x7F	; 127
     c78:	8f e4       	ldi	r24, 0x4F	; 79
     c7a:	92 e1       	ldi	r25, 0x12	; 18
     c7c:	21 50       	subi	r18, 0x01	; 1
     c7e:	80 40       	sbci	r24, 0x00	; 0
     c80:	90 40       	sbci	r25, 0x00	; 0
     c82:	e1 f7       	brne	.-8      	; 0xc7c <LEDS_FLASH+0x1c>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <LEDS_FLASH+0x26>
     c86:	00 00       	nop
		_delay_ms(LEDS_FLASHING_PERIOD);
		LED_OFF(LED1);
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	0e 94 18 06 	call	0xc30	; 0xc30 <LED_OFF>
		LED_OFF(LED2);
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	0e 94 18 06 	call	0xc30	; 0xc30 <LED_OFF>
		LED_OFF(LED3);
     c94:	83 e0       	ldi	r24, 0x03	; 3
     c96:	0e 94 18 06 	call	0xc30	; 0xc30 <LED_OFF>
     c9a:	2f e7       	ldi	r18, 0x7F	; 127
     c9c:	8f e4       	ldi	r24, 0x4F	; 79
     c9e:	92 e1       	ldi	r25, 0x12	; 18
     ca0:	21 50       	subi	r18, 0x01	; 1
     ca2:	80 40       	sbci	r24, 0x00	; 0
     ca4:	90 40       	sbci	r25, 0x00	; 0
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <LEDS_FLASH+0x40>
     ca8:	00 c0       	rjmp	.+0      	; 0xcaa <LEDS_FLASH+0x4a>
     caa:	00 00       	nop
     cac:	c1 50       	subi	r28, 0x01	; 1

extern void LEDS_FLASH()
{
	uint8_t u8Count = 0 ;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_LEDS_FLICKERS ; u8Count ++)
     cae:	d1 f6       	brne	.-76     	; 0xc64 <LEDS_FLASH+0x4>
		LED_OFF(LED1);
		LED_OFF(LED2);
		LED_OFF(LED3);
		_delay_ms(LEDS_FLASHING_PERIOD);	
	}
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <RELAY_ON>:

#include "RELAY_INTERFACE.h"

extern void RELAY_ON()
{
	Pin_set(RELAY_PORT , RELAY_PIN_NUMBER);
     cb4:	63 e0       	ldi	r22, 0x03	; 3
     cb6:	82 e3       	ldi	r24, 0x32	; 50
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 67 07 	call	0xece	; 0xece <Pin_set>
     cbe:	08 95       	ret

00000cc0 <RELAY_OFF>:
}

extern void RELAY_OFF()
{
	Pin_reset(RELAY_PORT , RELAY_PIN_NUMBER);
     cc0:	63 e0       	ldi	r22, 0x03	; 3
     cc2:	82 e3       	ldi	r24, 0x32	; 50
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 73 07 	call	0xee6	; 0xee6 <Pin_reset>
     cca:	08 95       	ret

00000ccc <RELAY_FLICKER>:
}

extern void RELAY_FLICKER()
{
     ccc:	cf 93       	push	r28
     cce:	c5 e0       	ldi	r28, 0x05	; 5
	uint8_t u8Count = 0;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_RELAY_FLICKERS ; u8Count ++)
	{
		RELAY_ON();
     cd0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <RELAY_ON>
     cd4:	2f e7       	ldi	r18, 0x7F	; 127
     cd6:	8f e4       	ldi	r24, 0x4F	; 79
     cd8:	92 e1       	ldi	r25, 0x12	; 18
     cda:	21 50       	subi	r18, 0x01	; 1
     cdc:	80 40       	sbci	r24, 0x00	; 0
     cde:	90 40       	sbci	r25, 0x00	; 0
     ce0:	e1 f7       	brne	.-8      	; 0xcda <RELAY_FLICKER+0xe>
     ce2:	00 c0       	rjmp	.+0      	; 0xce4 <RELAY_FLICKER+0x18>
     ce4:	00 00       	nop
		_delay_ms(RELAY_FLICKERING_PERIOD);
		RELAY_OFF();
     ce6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <RELAY_OFF>
     cea:	2f e7       	ldi	r18, 0x7F	; 127
     cec:	8f e4       	ldi	r24, 0x4F	; 79
     cee:	92 e1       	ldi	r25, 0x12	; 18
     cf0:	21 50       	subi	r18, 0x01	; 1
     cf2:	80 40       	sbci	r24, 0x00	; 0
     cf4:	90 40       	sbci	r25, 0x00	; 0
     cf6:	e1 f7       	brne	.-8      	; 0xcf0 <RELAY_FLICKER+0x24>
     cf8:	00 c0       	rjmp	.+0      	; 0xcfa <RELAY_FLICKER+0x2e>
     cfa:	00 00       	nop
     cfc:	c1 50       	subi	r28, 0x01	; 1

extern void RELAY_FLICKER()
{
	uint8_t u8Count = 0;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_RELAY_FLICKERS ; u8Count ++)
     cfe:	41 f7       	brne	.-48     	; 0xcd0 <RELAY_FLICKER+0x4>
		_delay_ms(RELAY_FLICKERING_PERIOD);
		RELAY_OFF();
		_delay_ms(RELAY_FLICKERING_PERIOD);
	}
	
     d00:	cf 91       	pop	r28
     d02:	08 95       	ret

00000d04 <main>:
int main(void)
{	
	// OUTPUTS
	
		// LEDS
	Pin_mode(LED1_PORT , LED1_DDR , LED1_PIN_NUMBER , OUTPUT);
     d04:	21 e0       	ldi	r18, 0x01	; 1
     d06:	45 e0       	ldi	r20, 0x05	; 5
     d08:	61 e3       	ldi	r22, 0x31	; 49
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	82 e3       	ldi	r24, 0x32	; 50
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 80 07 	call	0xf00	; 0xf00 <Pin_mode>
	Pin_mode(LED2_PORT , LED2_DDR , LED2_PIN_NUMBER , OUTPUT);
     d14:	21 e0       	ldi	r18, 0x01	; 1
     d16:	46 e0       	ldi	r20, 0x06	; 6
     d18:	61 e3       	ldi	r22, 0x31	; 49
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	82 e3       	ldi	r24, 0x32	; 50
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 80 07 	call	0xf00	; 0xf00 <Pin_mode>
	Pin_mode(LED3_PORT , LED3_DDR , LED3_PIN_NUMBER , OUTPUT);
     d24:	21 e0       	ldi	r18, 0x01	; 1
     d26:	47 e0       	ldi	r20, 0x07	; 7
     d28:	61 e3       	ldi	r22, 0x31	; 49
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	82 e3       	ldi	r24, 0x32	; 50
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 80 07 	call	0xf00	; 0xf00 <Pin_mode>
		
		//BUZZER
	Pin_mode(BUZZER_PORT , BUZZER_DDR , BUZZER_PIN_NUMBER , OUTPUT);
     d34:	21 e0       	ldi	r18, 0x01	; 1
     d36:	44 e0       	ldi	r20, 0x04	; 4
     d38:	61 e3       	ldi	r22, 0x31	; 49
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	82 e3       	ldi	r24, 0x32	; 50
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 80 07 	call	0xf00	; 0xf00 <Pin_mode>
		
		//RELAY
	Pin_mode(RELAY_PORT , RELAY_DDR , RELAY_PIN_NUMBER , OUTPUT);
     d44:	21 e0       	ldi	r18, 0x01	; 1
     d46:	43 e0       	ldi	r20, 0x03	; 3
     d48:	61 e3       	ldi	r22, 0x31	; 49
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	82 e3       	ldi	r24, 0x32	; 50
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 80 07 	call	0xf00	; 0xf00 <Pin_mode>
		
		
	/*Pin_mode(BUTTON0_PORT , BUTTON0_DDR , BUTTON0_PIN_NUMBER , INPUT);
	Pin_mode(BUTTON1_PORT , BUTTON1_DDR , BUTTON1_PIN_NUMBER , INPUT);*/
	
	Pin_mode(BUTTON2_PORT , BUTTON2_DDR , BUTTON2_PIN_NUMBER , INPUT);
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	42 e0       	ldi	r20, 0x02	; 2
     d58:	61 e3       	ldi	r22, 0x31	; 49
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	82 e3       	ldi	r24, 0x32	; 50
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 80 07 	call	0xf00	; 0xf00 <Pin_mode>
		// ADC
	Pin_reset(ADC0_DDR, ADC0_PIN_NUMBER); //No pull up resistors
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	8a e3       	ldi	r24, 0x3A	; 58
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 73 07 	call	0xee6	; 0xee6 <Pin_reset>
	Pin_reset(ADC1_DDR, ADC1_PIN_NUMBER);
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	8a e3       	ldi	r24, 0x3A	; 58
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 73 07 	call	0xee6	; 0xee6 <Pin_reset>
	// Setting initial states
	
	LED_OFF(LED1);
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	0e 94 18 06 	call	0xc30	; 0xc30 <LED_OFF>
	LED_OFF(LED2);
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	0e 94 18 06 	call	0xc30	; 0xc30 <LED_OFF>
	LED_OFF(LED3);
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	0e 94 18 06 	call	0xc30	; 0xc30 <LED_OFF>
	BUZZER_OFF();
     d8a:	0e 94 98 04 	call	0x930	; 0x930 <BUZZER_OFF>
	RELAY_OFF();
     d8e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <RELAY_OFF>
	/*SEGMENT_RESET();*/
	LCD_INIT();
     d92:	0e 94 88 05 	call	0xb10	; 0xb10 <LCD_INIT>
	USART_INIT();
     d96:	0e 94 23 08 	call	0x1046	; 0x1046 <USART_INIT>
		} 
		else
		{
			KEYPAD_WITH_LCD();
		}*/
		AMIT_BT_TEST();
     d9a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <AMIT_BT_TEST>
     d9e:	fd cf       	rjmp	.-6      	; 0xd9a <main+0x96>

00000da0 <ADC0_INIT>:
	u32ADCH_reading = (int)ADC_H ;
	
	u32ADC1_reading = u32ADCL_reading | (u32ADCH_reading << 8);
	
	*pu32ADC1_reading = u32ADC1_reading ;
}
     da0:	86 e8       	ldi	r24, 0x86	; 134
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	97 b9       	out	0x07, r25	; 7
     da6:	86 b9       	out	0x06, r24	; 6
     da8:	80 e4       	ldi	r24, 0x40	; 64
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	98 b9       	out	0x08, r25	; 8
     dae:	87 b9       	out	0x07, r24	; 7
     db0:	08 95       	ret

00000db2 <ADC1_INIT>:
     db2:	86 e8       	ldi	r24, 0x86	; 134
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	97 b9       	out	0x07, r25	; 7
     db8:	86 b9       	out	0x06, r24	; 6
     dba:	81 e4       	ldi	r24, 0x41	; 65
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	98 b9       	out	0x08, r25	; 8
     dc0:	87 b9       	out	0x07, r24	; 7
     dc2:	08 95       	ret

00000dc4 <ADC_START>:
     dc4:	86 b1       	in	r24, 0x06	; 6
     dc6:	97 b1       	in	r25, 0x07	; 7
     dc8:	80 64       	ori	r24, 0x40	; 64
     dca:	97 b9       	out	0x07, r25	; 7
     dcc:	86 b9       	out	0x06, r24	; 6
     dce:	08 95       	ret

00000dd0 <ADC_WAIT_FOR_CONVERSION_END>:
     dd0:	86 b1       	in	r24, 0x06	; 6
     dd2:	97 b1       	in	r25, 0x07	; 7
     dd4:	84 ff       	sbrs	r24, 4
     dd6:	fc cf       	rjmp	.-8      	; 0xdd0 <ADC_WAIT_FOR_CONVERSION_END>
     dd8:	08 95       	ret

00000dda <ADC0_READ>:
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	ec 01       	movw	r28, r24
     de0:	0e 94 d0 06 	call	0xda0	; 0xda0 <ADC0_INIT>
     de4:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <ADC_START>
     de8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <ADC_WAIT_FOR_CONVERSION_END>
     dec:	88 e7       	ldi	r24, 0x78	; 120
     dee:	8a 95       	dec	r24
     df0:	f1 f7       	brne	.-4      	; 0xdee <ADC0_READ+0x14>
     df2:	24 b1       	in	r18, 0x04	; 4
     df4:	35 b1       	in	r19, 0x05	; 5
     df6:	85 b1       	in	r24, 0x05	; 5
     df8:	96 b1       	in	r25, 0x06	; 6
     dfa:	98 2f       	mov	r25, r24
     dfc:	88 27       	eor	r24, r24
     dfe:	82 2b       	or	r24, r18
     e00:	93 2b       	or	r25, r19
     e02:	99 83       	std	Y+1, r25	; 0x01
     e04:	88 83       	st	Y, r24
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	08 95       	ret

00000e0c <ADC1_READ>:
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	ec 01       	movw	r28, r24
     e12:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <ADC1_INIT>
     e16:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <ADC_START>
     e1a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <ADC_WAIT_FOR_CONVERSION_END>
     e1e:	88 e7       	ldi	r24, 0x78	; 120
     e20:	8a 95       	dec	r24
     e22:	f1 f7       	brne	.-4      	; 0xe20 <ADC1_READ+0x14>
     e24:	24 b1       	in	r18, 0x04	; 4
     e26:	35 b1       	in	r19, 0x05	; 5
     e28:	85 b1       	in	r24, 0x05	; 5
     e2a:	96 b1       	in	r25, 0x06	; 6
     e2c:	98 2f       	mov	r25, r24
     e2e:	88 27       	eor	r24, r24
     e30:	82 2b       	or	r24, r18
     e32:	93 2b       	or	r25, r19
     e34:	99 83       	std	Y+1, r25	; 0x01
     e36:	88 83       	st	Y, r24
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <ADC_VALUE_ANALYSE>:


extern void ADC_VALUE_ANALYSE(uint16_t u16ADC_value , uint16_t *pu16ADC_array_value)
{
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	ac 01       	movw	r20, r24
     e44:	fb 01       	movw	r30, r22
     e46:	eb 01       	movw	r28, r22
     e48:	28 96       	adiw	r28, 0x08	; 8
	
	uint16_t u16Temp_value = u16ADC_value;
	
	for (u8Count = 0 ; u8Count < 4 ; u8Count ++)
	{
		pu16ADC_array_value[u8Count] = (u16Temp_value % 10) + '0' ;
     e4a:	9a 01       	movw	r18, r20
     e4c:	ad ec       	ldi	r26, 0xCD	; 205
     e4e:	bc ec       	ldi	r27, 0xCC	; 204
     e50:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__umulhisi3>
     e54:	96 95       	lsr	r25
     e56:	87 95       	ror	r24
     e58:	96 95       	lsr	r25
     e5a:	87 95       	ror	r24
     e5c:	96 95       	lsr	r25
     e5e:	87 95       	ror	r24
     e60:	9c 01       	movw	r18, r24
     e62:	22 0f       	add	r18, r18
     e64:	33 1f       	adc	r19, r19
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	82 0f       	add	r24, r18
     e74:	93 1f       	adc	r25, r19
     e76:	9a 01       	movw	r18, r20
     e78:	28 1b       	sub	r18, r24
     e7a:	39 0b       	sbc	r19, r25
     e7c:	c9 01       	movw	r24, r18
     e7e:	c0 96       	adiw	r24, 0x30	; 48
     e80:	81 93       	st	Z+, r24
     e82:	91 93       	st	Z+, r25
		u16Temp_value /= 10 ;
     e84:	9a 01       	movw	r18, r20
     e86:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__umulhisi3>
     e8a:	ac 01       	movw	r20, r24
     e8c:	56 95       	lsr	r21
     e8e:	47 95       	ror	r20
     e90:	56 95       	lsr	r21
     e92:	47 95       	ror	r20
     e94:	56 95       	lsr	r21
     e96:	47 95       	ror	r20
{
	uint8_t u8Count = 0;
	
	uint16_t u16Temp_value = u16ADC_value;
	
	for (u8Count = 0 ; u8Count < 4 ; u8Count ++)
     e98:	ec 17       	cp	r30, r28
     e9a:	fd 07       	cpc	r31, r29
     e9c:	b1 f6       	brne	.-84     	; 0xe4a <ADC_VALUE_ANALYSE+0xc>
	{
		pu16ADC_array_value[u8Count] = (u16Temp_value % 10) + '0' ;
		u16Temp_value /= 10 ;
	}
	
}
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	08 95       	ret

00000ea4 <ADC_SHOW_VALUE>:

extern void ADC_SHOW_VALUE(uint16_t *pu16Value)
{
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	ec 01       	movw	r28, r24
	LCD_CERTAIN_DATA(pu16Value[3]);
     eaa:	8e 81       	ldd	r24, Y+6	; 0x06
     eac:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LCD_CERTAIN_DATA>
	LCD_CERTAIN_DATA('.');
     eb0:	8e e2       	ldi	r24, 0x2E	; 46
     eb2:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LCD_CERTAIN_DATA>
	
	LCD_CERTAIN_DATA(pu16Value[2]);
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LCD_CERTAIN_DATA>
	LCD_CERTAIN_DATA(pu16Value[1]);
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LCD_CERTAIN_DATA>
	LCD_CERTAIN_DATA(pu16Value[0]);
     ec2:	88 81       	ld	r24, Y
     ec4:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LCD_CERTAIN_DATA>
}
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	08 95       	ret

00000ece <Pin_set>:
	(*(volatile uint8_t *) (PORT_address)) &= ~(1<<Pin_index);
}

extern void Pin_toggle( unsigned int PORT_address , uint8_t Pin_index)
{
	(*(volatile uint8_t *) (PORT_address)) ^= (1<<Pin_index);
     ece:	fc 01       	movw	r30, r24
     ed0:	40 81       	ld	r20, Z
     ed2:	21 e0       	ldi	r18, 0x01	; 1
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <Pin_set+0xe>
     ed8:	22 0f       	add	r18, r18
     eda:	33 1f       	adc	r19, r19
     edc:	6a 95       	dec	r22
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <Pin_set+0xa>
     ee0:	24 2b       	or	r18, r20
     ee2:	20 83       	st	Z, r18
     ee4:	08 95       	ret

00000ee6 <Pin_reset>:
     ee6:	fc 01       	movw	r30, r24
     ee8:	90 81       	ld	r25, Z
     eea:	21 e0       	ldi	r18, 0x01	; 1
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <Pin_reset+0xe>
     ef0:	22 0f       	add	r18, r18
     ef2:	33 1f       	adc	r19, r19
     ef4:	6a 95       	dec	r22
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <Pin_reset+0xa>
     ef8:	20 95       	com	r18
     efa:	29 23       	and	r18, r25
     efc:	20 83       	st	Z, r18
     efe:	08 95       	ret

00000f00 <Pin_mode>:
}

extern void Pin_mode(unsigned int PORT_address , unsigned int DDR_address , uint8_t Pin_index , uint8_t Pin_state)
{
	if (Pin_state == INPUT)
     f00:	21 11       	cpse	r18, r1
     f02:	12 c0       	rjmp	.+36     	; 0xf28 <Pin_mode+0x28>
	{
		(*(volatile uint8_t *)(DDR_address)) &= ~(1<<Pin_index) ;
     f04:	fb 01       	movw	r30, r22
     f06:	50 81       	ld	r21, Z
     f08:	21 e0       	ldi	r18, 0x01	; 1
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <Pin_mode+0x12>
     f0e:	22 0f       	add	r18, r18
     f10:	33 1f       	adc	r19, r19
     f12:	4a 95       	dec	r20
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <Pin_mode+0xe>
     f16:	32 2f       	mov	r19, r18
     f18:	30 95       	com	r19
     f1a:	35 23       	and	r19, r21
     f1c:	30 83       	st	Z, r19
		(*(volatile uint8_t *)(PORT_address)) |= (1<<Pin_index) ; // To activate the pull up resistor
     f1e:	fc 01       	movw	r30, r24
     f20:	30 81       	ld	r19, Z
     f22:	23 2b       	or	r18, r19
     f24:	20 83       	st	Z, r18
     f26:	08 95       	ret
	}
	else if (Pin_state == OUTPUT)
     f28:	21 30       	cpi	r18, 0x01	; 1
     f2a:	59 f4       	brne	.+22     	; 0xf42 <Pin_mode+0x42>
	{
		(*(volatile uint8_t *)(DDR_address )) |= (1<<Pin_index) ;
     f2c:	fb 01       	movw	r30, r22
     f2e:	20 81       	ld	r18, Z
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <Pin_mode+0x3a>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	4a 95       	dec	r20
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <Pin_mode+0x36>
     f3e:	82 2b       	or	r24, r18
     f40:	80 83       	st	Z, r24
     f42:	08 95       	ret

00000f44 <Pin_read>:

extern void Pin_read(unsigned int PIN_address , uint8_t u8Pin_index , volatile uint8_t *pu8PORT_reading)
{
	uint8_t u8Temp = 0;
	
	u8Temp = (*(volatile uint8_t *)(PIN_address)) & (1 << u8Pin_index) ;
     f44:	fc 01       	movw	r30, r24
     f46:	20 81       	ld	r18, Z
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <Pin_read+0xe>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	6a 95       	dec	r22
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <Pin_read+0xa>
     f56:	82 23       	and	r24, r18
	
	*pu8PORT_reading = u8Temp ;
     f58:	fa 01       	movw	r30, r20
     f5a:	80 83       	st	Z, r24
     f5c:	08 95       	ret

00000f5e <__vector_11>:
{
	TCIMSK |= (1 << TOIE0);
}

ISR(TIMER0_OVF_vect)
{
     f5e:	1f 92       	push	r1
     f60:	0f 92       	push	r0
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	0f 92       	push	r0
     f66:	11 24       	eor	r1, r1
     f68:	8f 93       	push	r24
	gu8Flag ++ ;
     f6a:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <gu8Flag>
     f6e:	8f 5f       	subi	r24, 0xFF	; 255
     f70:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <gu8Flag>
     f74:	8f 91       	pop	r24
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	0f 90       	pop	r0
     f7c:	1f 90       	pop	r1
     f7e:	18 95       	reti

00000f80 <T1_PWM_INIT>:

extern volatile uint8_t gu8T1_flag ;

extern void T1_PWM_INIT(void)
{
	TCCR_1A = 0x00 ;
     f80:	10 be       	out	0x30, r1	; 48
     f82:	1f bc       	out	0x2f, r1	; 47
	TCCR_1B = 0x00 ;
     f84:	1f bc       	out	0x2f, r1	; 47
     f86:	1e bc       	out	0x2e, r1	; 46
	
	TCCR_1A |= 0xa1 ;
     f88:	8f b5       	in	r24, 0x2f	; 47
     f8a:	90 b7       	in	r25, 0x30	; 48
     f8c:	81 6a       	ori	r24, 0xA1	; 161
     f8e:	90 bf       	out	0x30, r25	; 48
     f90:	8f bd       	out	0x2f, r24	; 47
	TCCR_1B |= 0x0a ;
     f92:	8e b5       	in	r24, 0x2e	; 46
     f94:	9f b5       	in	r25, 0x2f	; 47
     f96:	8a 60       	ori	r24, 0x0A	; 10
     f98:	9f bd       	out	0x2f, r25	; 47
     f9a:	8e bd       	out	0x2e, r24	; 46
	
	TOCR1A_1L = 0x00;
     f9c:	1b bc       	out	0x2b, r1	; 43
     f9e:	1a bc       	out	0x2a, r1	; 42
	TOCR1B_1L = 0x00;
     fa0:	19 bc       	out	0x29, r1	; 41
     fa2:	18 bc       	out	0x28, r1	; 40
     fa4:	08 95       	ret

00000fa6 <T1_PWM_DEINIT>:
}

extern void T1_PWM_DEINIT(void)
{
	TCCR_1A = 0x00;
     fa6:	10 be       	out	0x30, r1	; 48
     fa8:	1f bc       	out	0x2f, r1	; 47
	TCCR_1B = 0x00;
     faa:	1f bc       	out	0x2f, r1	; 47
     fac:	1e bc       	out	0x2e, r1	; 46
	
	TOCR1A_1L = 0x00;
     fae:	1b bc       	out	0x2b, r1	; 43
     fb0:	1a bc       	out	0x2a, r1	; 42
	TOCR1B_1L = 0x00;
     fb2:	19 bc       	out	0x29, r1	; 41
     fb4:	18 bc       	out	0x28, r1	; 40
     fb6:	08 95       	ret

00000fb8 <T1_PWM_DUTY_CYCLE>:
}

extern void T1_PWM_DUTY_CYCLE(uint32_t u32Duty_cycle_A , uint32_t u32Duty_cycle_B)
{
     fb8:	cf 92       	push	r12
     fba:	df 92       	push	r13
     fbc:	ef 92       	push	r14
     fbe:	ff 92       	push	r15
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	69 01       	movw	r12, r18
     fc6:	7a 01       	movw	r14, r20
	TOCR1A_1L = 0x00 ;
     fc8:	1b bc       	out	0x2b, r1	; 43
     fca:	1a bc       	out	0x2a, r1	; 42
	TOCR1B_1L = 0x00 ;
     fcc:	19 bc       	out	0x29, r1	; 41
     fce:	18 bc       	out	0x28, r1	; 40
	
	if (u32Duty_cycle_A >= 1 )
     fd0:	61 15       	cp	r22, r1
     fd2:	71 05       	cpc	r23, r1
     fd4:	81 05       	cpc	r24, r1
     fd6:	91 05       	cpc	r25, r1
     fd8:	99 f0       	breq	.+38     	; 0x1000 <T1_PWM_DUTY_CYCLE+0x48>
	{
		TOCR1A_1L |= ((u32Duty_cycle_A * 256) / 100) -1 ;
     fda:	ca b5       	in	r28, 0x2a	; 42
     fdc:	db b5       	in	r29, 0x2b	; 43
     fde:	98 2f       	mov	r25, r24
     fe0:	87 2f       	mov	r24, r23
     fe2:	76 2f       	mov	r23, r22
     fe4:	66 27       	eor	r22, r22
     fe6:	24 e6       	ldi	r18, 0x64	; 100
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	0e 94 4f 08 	call	0x109e	; 0x109e <__udivmodsi4>
     ff2:	21 50       	subi	r18, 0x01	; 1
     ff4:	31 09       	sbc	r19, r1
     ff6:	2c 2b       	or	r18, r28
     ff8:	3d 2b       	or	r19, r29
     ffa:	3b bd       	out	0x2b, r19	; 43
     ffc:	2a bd       	out	0x2a, r18	; 42
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <T1_PWM_DUTY_CYCLE+0x4c>
	}
	else
	{
		TOCR1A_1L = 0x00 ;
    1000:	1b bc       	out	0x2b, r1	; 43
    1002:	1a bc       	out	0x2a, r1	; 42
	}
	if (u32Duty_cycle_B >= 1 )
    1004:	c1 14       	cp	r12, r1
    1006:	d1 04       	cpc	r13, r1
    1008:	e1 04       	cpc	r14, r1
    100a:	f1 04       	cpc	r15, r1
    100c:	99 f0       	breq	.+38     	; 0x1034 <T1_PWM_DUTY_CYCLE+0x7c>
	{
		TOCR1B_1L |= ((u32Duty_cycle_B * 256) / 100) -1 ;
    100e:	c8 b5       	in	r28, 0x28	; 40
    1010:	d9 b5       	in	r29, 0x29	; 41
    1012:	9e 2d       	mov	r25, r14
    1014:	8d 2d       	mov	r24, r13
    1016:	7c 2d       	mov	r23, r12
    1018:	66 27       	eor	r22, r22
    101a:	24 e6       	ldi	r18, 0x64	; 100
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	0e 94 4f 08 	call	0x109e	; 0x109e <__udivmodsi4>
    1026:	21 50       	subi	r18, 0x01	; 1
    1028:	31 09       	sbc	r19, r1
    102a:	2c 2b       	or	r18, r28
    102c:	3d 2b       	or	r19, r29
    102e:	39 bd       	out	0x29, r19	; 41
    1030:	28 bd       	out	0x28, r18	; 40
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <T1_PWM_DUTY_CYCLE+0x80>
	}
	else
	{
		TOCR1B_1L = 0x00 ;
    1034:	19 bc       	out	0x29, r1	; 41
    1036:	18 bc       	out	0x28, r1	; 40
	}
}
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	08 95       	ret

00001046 <USART_INIT>:
	
	for (u8Count = 0 ; u8Count < u8Transmitted_data_size ; u8Count ++)
	{
		USART_TRANSMIT(pu8Transmitted_string[u8Count]);
	}
}
    1046:	8a b1       	in	r24, 0x0a	; 10
    1048:	88 6f       	ori	r24, 0xF8	; 248
    104a:	8a b9       	out	0x0a, r24	; 10
    104c:	80 b5       	in	r24, 0x20	; 32
    104e:	86 68       	ori	r24, 0x86	; 134
    1050:	80 bd       	out	0x20, r24	; 32
    1052:	83 e3       	ldi	r24, 0x33	; 51
    1054:	89 b9       	out	0x09, r24	; 9
    1056:	08 95       	ret

00001058 <USART_TRANSMIT>:
    1058:	8c b9       	out	0x0c, r24	; 12
    105a:	5d 9b       	sbis	0x0b, 5	; 11
    105c:	fe cf       	rjmp	.-4      	; 0x105a <USART_TRANSMIT+0x2>
    105e:	08 95       	ret

00001060 <USART_RECEIVE>:

extern void USART_RECEIVE(char *pu8Received_data)
{
	while ( !(USART_CSRA & (1 << USART_RXC)));
    1060:	5f 9b       	sbis	0x0b, 7	; 11
    1062:	fe cf       	rjmp	.-4      	; 0x1060 <USART_RECEIVE>
	*pu8Received_data = USART_DR ;
    1064:	2c b1       	in	r18, 0x0c	; 12
    1066:	fc 01       	movw	r30, r24
    1068:	20 83       	st	Z, r18
    106a:	08 95       	ret

0000106c <USART_TRANSMIT_CERTAIN_STRING>:
}

extern void USART_TRANSMIT_CERTAIN_STRING(char *pu8String , char u8Transmitted_data_size)					
{
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
	uint8_t u8Count = 0 ;
	
	for (u8Count = 0 ; u8Count < u8Transmitted_data_size ; u8Count ++)
    1074:	66 23       	and	r22, r22
    1076:	71 f0       	breq	.+28     	; 0x1094 <USART_TRANSMIT_CERTAIN_STRING+0x28>
    1078:	ec 01       	movw	r28, r24
    107a:	61 50       	subi	r22, 0x01	; 1
    107c:	06 2f       	mov	r16, r22
    107e:	10 e0       	ldi	r17, 0x00	; 0
    1080:	0f 5f       	subi	r16, 0xFF	; 255
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	08 0f       	add	r16, r24
    1086:	19 1f       	adc	r17, r25
	{
		USART_TRANSMIT(pu8String[u8Count]);
    1088:	89 91       	ld	r24, Y+
    108a:	0e 94 2c 08 	call	0x1058	; 0x1058 <USART_TRANSMIT>

extern void USART_TRANSMIT_CERTAIN_STRING(char *pu8String , char u8Transmitted_data_size)					
{
	uint8_t u8Count = 0 ;
	
	for (u8Count = 0 ; u8Count < u8Transmitted_data_size ; u8Count ++)
    108e:	c0 17       	cp	r28, r16
    1090:	d1 07       	cpc	r29, r17
    1092:	d1 f7       	brne	.-12     	; 0x1088 <USART_TRANSMIT_CERTAIN_STRING+0x1c>
	{
		USART_TRANSMIT(pu8String[u8Count]);
	}
}
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	08 95       	ret

0000109e <__udivmodsi4>:
    109e:	a1 e2       	ldi	r26, 0x21	; 33
    10a0:	1a 2e       	mov	r1, r26
    10a2:	aa 1b       	sub	r26, r26
    10a4:	bb 1b       	sub	r27, r27
    10a6:	fd 01       	movw	r30, r26
    10a8:	0d c0       	rjmp	.+26     	; 0x10c4 <__udivmodsi4_ep>

000010aa <__udivmodsi4_loop>:
    10aa:	aa 1f       	adc	r26, r26
    10ac:	bb 1f       	adc	r27, r27
    10ae:	ee 1f       	adc	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	a2 17       	cp	r26, r18
    10b4:	b3 07       	cpc	r27, r19
    10b6:	e4 07       	cpc	r30, r20
    10b8:	f5 07       	cpc	r31, r21
    10ba:	20 f0       	brcs	.+8      	; 0x10c4 <__udivmodsi4_ep>
    10bc:	a2 1b       	sub	r26, r18
    10be:	b3 0b       	sbc	r27, r19
    10c0:	e4 0b       	sbc	r30, r20
    10c2:	f5 0b       	sbc	r31, r21

000010c4 <__udivmodsi4_ep>:
    10c4:	66 1f       	adc	r22, r22
    10c6:	77 1f       	adc	r23, r23
    10c8:	88 1f       	adc	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	1a 94       	dec	r1
    10ce:	69 f7       	brne	.-38     	; 0x10aa <__udivmodsi4_loop>
    10d0:	60 95       	com	r22
    10d2:	70 95       	com	r23
    10d4:	80 95       	com	r24
    10d6:	90 95       	com	r25
    10d8:	9b 01       	movw	r18, r22
    10da:	ac 01       	movw	r20, r24
    10dc:	bd 01       	movw	r22, r26
    10de:	cf 01       	movw	r24, r30
    10e0:	08 95       	ret

000010e2 <__umulhisi3>:
    10e2:	a2 9f       	mul	r26, r18
    10e4:	b0 01       	movw	r22, r0
    10e6:	b3 9f       	mul	r27, r19
    10e8:	c0 01       	movw	r24, r0
    10ea:	a3 9f       	mul	r26, r19
    10ec:	70 0d       	add	r23, r0
    10ee:	81 1d       	adc	r24, r1
    10f0:	11 24       	eor	r1, r1
    10f2:	91 1d       	adc	r25, r1
    10f4:	b2 9f       	mul	r27, r18
    10f6:	70 0d       	add	r23, r0
    10f8:	81 1d       	adc	r24, r1
    10fa:	11 24       	eor	r1, r1
    10fc:	91 1d       	adc	r25, r1
    10fe:	08 95       	ret

00001100 <_exit>:
    1100:	f8 94       	cli

00001102 <__stop_program>:
    1102:	ff cf       	rjmp	.-2      	; 0x1102 <__stop_program>
