
AMIT_LEARNING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002042  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000154  00800060  00002042  000020d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  008001b4  008001b4  0000222a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000222a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000225c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a9c  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012c1  00000000  00000000  0000810c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d51  00000000  00000000  000093cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009a8  00000000  00000000  0000c120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f6c  00000000  00000000  0000cac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037da  00000000  00000000  0000da34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0001120e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3d       	cpi	r26, 0xDE	; 222
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <main>
      8a:	0c 94 1f 10 	jmp	0x203e	; 0x203e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GET_KEY_ROW>:
	}
	
}

extern void GET_KEY_ROW(uint8_t *pu8Captured_row)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	ec 01       	movw	r28, r24
	SET_ROWS_INPUT();
      98:	0e 94 94 0a 	call	0x1528	; 0x1528 <SET_ROWS_INPUT>
	POWER_ALL_ROWS(); // To deactivate pull up resistors
      9c:	0e 94 9a 09 	call	0x1334	; 0x1334 <POWER_ALL_ROWS>
	
	SET_COLUMNS_OUTPUT();
      a0:	0e 94 09 0c 	call	0x1812	; 0x1812 <SET_COLUMNS_OUTPUT>
	GROUND_ALL_COLUMNS();
      a4:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <GROUND_ALL_COLUMNS>
	
	while (1)
	{
		READ_ROW1(&u8Row1_reading);
      a8:	89 eb       	ldi	r24, 0xB9	; 185
      aa:	91 e0       	ldi	r25, 0x01	; 1
      ac:	0e 94 b8 09 	call	0x1370	; 0x1370 <READ_ROW1>
		
		if (u8Row1_reading == 0)
      b0:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <u8Row1_reading>
      b4:	81 11       	cpse	r24, r1
      b6:	02 c0       	rjmp	.+4      	; 0xbc <GET_KEY_ROW+0x2a>
		{
			*pu8Captured_row = ROW1 ;
      b8:	18 82       	st	Y, r1
			break;
      ba:	20 c0       	rjmp	.+64     	; 0xfc <GET_KEY_ROW+0x6a>
		else
		{
			
		}
		
		READ_ROW2(&u8Row2_reading);
      bc:	88 eb       	ldi	r24, 0xB8	; 184
      be:	91 e0       	ldi	r25, 0x01	; 1
      c0:	0e 94 ef 09 	call	0x13de	; 0x13de <READ_ROW2>
		
		if (u8Row2_reading == 0)
      c4:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <u8Row2_reading>
      c8:	81 11       	cpse	r24, r1
      ca:	03 c0       	rjmp	.+6      	; 0xd2 <GET_KEY_ROW+0x40>
		{
			*pu8Captured_row = ROW2 ;
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	88 83       	st	Y, r24
			break;
      d0:	15 c0       	rjmp	.+42     	; 0xfc <GET_KEY_ROW+0x6a>
		else
		{
			
		}
		
		READ_ROW3(&u8Row3_reading);
      d2:	87 eb       	ldi	r24, 0xB7	; 183
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	0e 94 26 0a 	call	0x144c	; 0x144c <READ_ROW3>
		
		if (u8Row3_reading == 0)
      da:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <u8Row3_reading>
      de:	81 11       	cpse	r24, r1
      e0:	03 c0       	rjmp	.+6      	; 0xe8 <GET_KEY_ROW+0x56>
		{
			*pu8Captured_row = ROW3 ;
      e2:	82 e0       	ldi	r24, 0x02	; 2
      e4:	88 83       	st	Y, r24
			break;
      e6:	0a c0       	rjmp	.+20     	; 0xfc <GET_KEY_ROW+0x6a>
		else
		{
			
		}
		
		READ_ROW4(&u8Row4_reading);
      e8:	86 eb       	ldi	r24, 0xB6	; 182
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <READ_ROW4>
		
		if (u8Row4_reading == 0)
      f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <u8Row4_reading>
      f4:	81 11       	cpse	r24, r1
      f6:	d8 cf       	rjmp	.-80     	; 0xa8 <GET_KEY_ROW+0x16>
		{
			*pu8Captured_row = ROW4 ;
      f8:	83 e0       	ldi	r24, 0x03	; 3
      fa:	88 83       	st	Y, r24
			
		}

	}
		
	GROUND_ALL_COLUMNS();
      fc:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <GROUND_ALL_COLUMNS>
	
}
     100:	df 91       	pop	r29
     102:	cf 91       	pop	r28
     104:	08 95       	ret

00000106 <GET_KEY_COLUMN>:

extern void GET_KEY_COLUMN(uint8_t *pu8Captured_column)
{
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	ec 01       	movw	r28, r24
	SET_COLUMNS_INPUT();
     10c:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <SET_COLUMNS_INPUT>
	POWER_ALL_COLUMNS(); // To activate pull up resistors
     110:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <POWER_ALL_COLUMNS>
	
	SET_ROWS_OUTPUT();
     114:	0e 94 b5 0a 	call	0x156a	; 0x156a <SET_ROWS_OUTPUT>
	GROUND_ALL_ROWS();
     118:	0e 94 a3 09 	call	0x1346	; 0x1346 <GROUND_ALL_ROWS>
	
	while (1)
	{
		READ_COLUMN1(&u8Column1_reading);
     11c:	8d eb       	ldi	r24, 0xBD	; 189
     11e:	91 e0       	ldi	r25, 0x01	; 1
     120:	0e 94 0c 0b 	call	0x1618	; 0x1618 <READ_COLUMN1>
		
		if (u8Column1_reading == 0)
     124:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <u8Column1_reading>
     128:	81 11       	cpse	r24, r1
     12a:	02 c0       	rjmp	.+4      	; 0x130 <GET_KEY_COLUMN+0x2a>
		{
			*pu8Captured_column = COLUMN1 ;
     12c:	18 82       	st	Y, r1
			break;
     12e:	20 c0       	rjmp	.+64     	; 0x170 <GET_KEY_COLUMN+0x6a>
		else
		{
			
		}
		
		READ_COLUMN2(&u8Column2_reading);
     130:	8c eb       	ldi	r24, 0xBC	; 188
     132:	91 e0       	ldi	r25, 0x01	; 1
     134:	0e 94 43 0b 	call	0x1686	; 0x1686 <READ_COLUMN2>
		
		if (u8Column2_reading == 0)
     138:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <u8Column2_reading>
     13c:	81 11       	cpse	r24, r1
     13e:	03 c0       	rjmp	.+6      	; 0x146 <GET_KEY_COLUMN+0x40>
		{
			*pu8Captured_column = COLUMN2 ;
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	88 83       	st	Y, r24
			break;
     144:	15 c0       	rjmp	.+42     	; 0x170 <GET_KEY_COLUMN+0x6a>
		else
		{
			
		}
		
		READ_COLUMN3(&u8Column3_reading);
     146:	8b eb       	ldi	r24, 0xBB	; 187
     148:	91 e0       	ldi	r25, 0x01	; 1
     14a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <READ_COLUMN3>
		
		if (u8Column3_reading == 0)
     14e:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <u8Column3_reading>
     152:	81 11       	cpse	r24, r1
     154:	03 c0       	rjmp	.+6      	; 0x15c <GET_KEY_COLUMN+0x56>
		{
			*pu8Captured_column = COLUMN3 ;
     156:	82 e0       	ldi	r24, 0x02	; 2
     158:	88 83       	st	Y, r24
			break;
     15a:	0a c0       	rjmp	.+20     	; 0x170 <GET_KEY_COLUMN+0x6a>
		else
		{
			
		}
		
		READ_COLUMN4(&u8Column4_reading);
     15c:	8a eb       	ldi	r24, 0xBA	; 186
     15e:	91 e0       	ldi	r25, 0x01	; 1
     160:	0e 94 b1 0b 	call	0x1762	; 0x1762 <READ_COLUMN4>
		
		if (u8Column4_reading == 0)
     164:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <u8Column4_reading>
     168:	81 11       	cpse	r24, r1
     16a:	d8 cf       	rjmp	.-80     	; 0x11c <GET_KEY_COLUMN+0x16>
		{
			*pu8Captured_column = COLUMN4 ;
     16c:	83 e0       	ldi	r24, 0x03	; 3
     16e:	88 83       	st	Y, r24
			
		}
		
	}
	
	GROUND_ALL_ROWS();
     170:	0e 94 a3 09 	call	0x1346	; 0x1346 <GROUND_ALL_ROWS>
}
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	08 95       	ret

0000017a <ANALYZE_PRESS>:

extern void ANALYZE_PRESS(uint8_t u8Temp_character )
{
	if (u8Temp_character == '2')
     17a:	82 33       	cpi	r24, 0x32	; 50
     17c:	59 f5       	brne	.+86     	; 0x1d4 <ANALYZE_PRESS+0x5a>
	{	
		u8Key2_sequence = 0;
     17e:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <u8Key2_sequence>
		u8Key3_sequence = 0;
     182:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <u8Key3_sequence>
		u8Key4_sequence = 0;
     186:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <u8Key4_sequence>
		u8Key5_sequence = 0;
     18a:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <u8Key5_sequence>
		u8Key6_sequence = 0;
     18e:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <u8Key6_sequence>
		u8Key7_sequence = 0;
     192:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <u8Key7_sequence>
		u8Key8_sequence = 0;
     196:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <u8Key8_sequence>
		
		if (u8Key1_sequence == 0)
     19a:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <u8Key1_sequence>
     19e:	81 11       	cpse	r24, r1
     1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <ANALYZE_PRESS+0x36>
		{
			u8Entered_character1 = 'A';
     1a2:	81 e4       	ldi	r24, 0x41	; 65
     1a4:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key1_sequence ++ ;
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <u8Key1_sequence>
     1ae:	08 95       	ret
		}
		else if (u8Key1_sequence == 1)
     1b0:	81 30       	cpi	r24, 0x01	; 1
     1b2:	39 f4       	brne	.+14     	; 0x1c2 <ANALYZE_PRESS+0x48>
		{
			u8Entered_character1 = 'B';
     1b4:	82 e4       	ldi	r24, 0x42	; 66
     1b6:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key1_sequence ++ ;
     1ba:	82 e0       	ldi	r24, 0x02	; 2
     1bc:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <u8Key1_sequence>
     1c0:	08 95       	ret
		}
		else if (u8Key1_sequence == 2)
     1c2:	82 30       	cpi	r24, 0x02	; 2
     1c4:	09 f0       	breq	.+2      	; 0x1c8 <ANALYZE_PRESS+0x4e>
     1c6:	50 c1       	rjmp	.+672    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		{
			u8Entered_character1 = 'C';
     1c8:	83 e4       	ldi	r24, 0x43	; 67
     1ca:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key1_sequence = 0 ;
     1ce:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <u8Key1_sequence>
     1d2:	08 95       	ret
		}
	}
	
	else if (u8Temp_character == '3')
     1d4:	83 33       	cpi	r24, 0x33	; 51
     1d6:	59 f5       	brne	.+86     	; 0x22e <ANALYZE_PRESS+0xb4>
	{	
		u8Key1_sequence = 0;
     1d8:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <u8Key1_sequence>
		u8Key3_sequence = 0;
     1dc:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <u8Key3_sequence>
		u8Key4_sequence = 0;
     1e0:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <u8Key4_sequence>
		u8Key5_sequence = 0;
     1e4:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <u8Key5_sequence>
		u8Key6_sequence = 0;
     1e8:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <u8Key6_sequence>
		u8Key7_sequence = 0;
     1ec:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <u8Key7_sequence>
		u8Key8_sequence = 0;
     1f0:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <u8Key8_sequence>
		
		if (u8Key2_sequence == 0)
     1f4:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <u8Key2_sequence>
     1f8:	81 11       	cpse	r24, r1
     1fa:	07 c0       	rjmp	.+14     	; 0x20a <ANALYZE_PRESS+0x90>
		{
			u8Entered_character1 = 'D';
     1fc:	84 e4       	ldi	r24, 0x44	; 68
     1fe:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key2_sequence ++ ;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <u8Key2_sequence>
     208:	08 95       	ret
		}
		else if (u8Key2_sequence == 1)
     20a:	81 30       	cpi	r24, 0x01	; 1
     20c:	39 f4       	brne	.+14     	; 0x21c <ANALYZE_PRESS+0xa2>
		{
			u8Entered_character1 = 'E';
     20e:	85 e4       	ldi	r24, 0x45	; 69
     210:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key2_sequence ++ ;
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <u8Key2_sequence>
     21a:	08 95       	ret
		}
		else if (u8Key2_sequence == 2)
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	09 f0       	breq	.+2      	; 0x222 <ANALYZE_PRESS+0xa8>
     220:	23 c1       	rjmp	.+582    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		{
			u8Entered_character1 = 'F';
     222:	86 e4       	ldi	r24, 0x46	; 70
     224:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key2_sequence = 0 ;
     228:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <u8Key2_sequence>
     22c:	08 95       	ret
		}
	}
	
	else if (u8Temp_character == '4')
     22e:	84 33       	cpi	r24, 0x34	; 52
     230:	59 f5       	brne	.+86     	; 0x288 <ANALYZE_PRESS+0x10e>
	{	
		u8Key2_sequence = 0;
     232:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <u8Key2_sequence>
		u8Key1_sequence = 0;
     236:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <u8Key1_sequence>
		u8Key4_sequence = 0;
     23a:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <u8Key4_sequence>
		u8Key5_sequence = 0;
     23e:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <u8Key5_sequence>
		u8Key6_sequence = 0;
     242:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <u8Key6_sequence>
		u8Key7_sequence = 0;
     246:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <u8Key7_sequence>
		u8Key8_sequence = 0;
     24a:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <u8Key8_sequence>
		
		if (u8Key3_sequence == 0)
     24e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <u8Key3_sequence>
     252:	81 11       	cpse	r24, r1
     254:	07 c0       	rjmp	.+14     	; 0x264 <ANALYZE_PRESS+0xea>
		{
			u8Entered_character1 = 'G';
     256:	87 e4       	ldi	r24, 0x47	; 71
     258:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key3_sequence ++ ;
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <u8Key3_sequence>
     262:	08 95       	ret
		}
		else if (u8Key3_sequence == 1)
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	39 f4       	brne	.+14     	; 0x276 <ANALYZE_PRESS+0xfc>
		{
			u8Entered_character1 = 'H';
     268:	88 e4       	ldi	r24, 0x48	; 72
     26a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key3_sequence ++ ;
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <u8Key3_sequence>
     274:	08 95       	ret
		}
		else if (u8Key3_sequence == 2)
     276:	82 30       	cpi	r24, 0x02	; 2
     278:	09 f0       	breq	.+2      	; 0x27c <ANALYZE_PRESS+0x102>
     27a:	f6 c0       	rjmp	.+492    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		{
			u8Entered_character1 = 'I';
     27c:	89 e4       	ldi	r24, 0x49	; 73
     27e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key3_sequence = 0 ;
     282:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <u8Key3_sequence>
     286:	08 95       	ret
		}
	}
	
	else if (u8Temp_character == '5')
     288:	85 33       	cpi	r24, 0x35	; 53
     28a:	59 f5       	brne	.+86     	; 0x2e2 <ANALYZE_PRESS+0x168>
	{
		u8Key2_sequence = 0;
     28c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <u8Key2_sequence>
		u8Key3_sequence = 0;
     290:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <u8Key3_sequence>
		u8Key1_sequence = 0;
     294:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <u8Key1_sequence>
		u8Key5_sequence = 0;
     298:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <u8Key5_sequence>
		u8Key6_sequence = 0;
     29c:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <u8Key6_sequence>
		u8Key7_sequence = 0;
     2a0:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <u8Key7_sequence>
		u8Key8_sequence = 0;
     2a4:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <u8Key8_sequence>
		
		if (u8Key4_sequence == 0)
     2a8:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <u8Key4_sequence>
     2ac:	81 11       	cpse	r24, r1
     2ae:	07 c0       	rjmp	.+14     	; 0x2be <ANALYZE_PRESS+0x144>
		{
			u8Entered_character1 = 'J';
     2b0:	8a e4       	ldi	r24, 0x4A	; 74
     2b2:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key4_sequence ++ ;
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <u8Key4_sequence>
     2bc:	08 95       	ret
		}
		else if (u8Key4_sequence == 1)
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	39 f4       	brne	.+14     	; 0x2d0 <ANALYZE_PRESS+0x156>
		{
			u8Entered_character1 = 'K';
     2c2:	8b e4       	ldi	r24, 0x4B	; 75
     2c4:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key4_sequence ++ ;
     2c8:	82 e0       	ldi	r24, 0x02	; 2
     2ca:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <u8Key4_sequence>
     2ce:	08 95       	ret
		}
		else if (u8Key4_sequence == 2)
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	09 f0       	breq	.+2      	; 0x2d6 <ANALYZE_PRESS+0x15c>
     2d4:	c9 c0       	rjmp	.+402    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		{
			u8Entered_character1 = 'L';
     2d6:	8c e4       	ldi	r24, 0x4C	; 76
     2d8:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key4_sequence = 0 ;
     2dc:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <u8Key4_sequence>
     2e0:	08 95       	ret
		}
	}
	
	else if (u8Temp_character == '6')
     2e2:	86 33       	cpi	r24, 0x36	; 54
     2e4:	59 f5       	brne	.+86     	; 0x33c <ANALYZE_PRESS+0x1c2>
	{
		u8Key2_sequence = 0;
     2e6:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <u8Key2_sequence>
		u8Key3_sequence = 0;
     2ea:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <u8Key3_sequence>
		u8Key4_sequence = 0;
     2ee:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <u8Key4_sequence>
		u8Key1_sequence = 0;
     2f2:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <u8Key1_sequence>
		u8Key6_sequence = 0;
     2f6:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <u8Key6_sequence>
		u8Key7_sequence = 0;
     2fa:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <u8Key7_sequence>
		u8Key8_sequence = 0;
     2fe:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <u8Key8_sequence>
		
		if (u8Key5_sequence == 0)
     302:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <u8Key5_sequence>
     306:	81 11       	cpse	r24, r1
     308:	07 c0       	rjmp	.+14     	; 0x318 <ANALYZE_PRESS+0x19e>
		{
			u8Entered_character1 = 'M';
     30a:	8d e4       	ldi	r24, 0x4D	; 77
     30c:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key5_sequence ++ ;
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <u8Key5_sequence>
     316:	08 95       	ret
		}
		else if (u8Key5_sequence == 1)
     318:	81 30       	cpi	r24, 0x01	; 1
     31a:	39 f4       	brne	.+14     	; 0x32a <ANALYZE_PRESS+0x1b0>
		{
			u8Entered_character1 = 'N';
     31c:	8e e4       	ldi	r24, 0x4E	; 78
     31e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key5_sequence ++ ;
     322:	82 e0       	ldi	r24, 0x02	; 2
     324:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <u8Key5_sequence>
     328:	08 95       	ret
		}
		else if (u8Key5_sequence == 2)
     32a:	82 30       	cpi	r24, 0x02	; 2
     32c:	09 f0       	breq	.+2      	; 0x330 <ANALYZE_PRESS+0x1b6>
     32e:	9c c0       	rjmp	.+312    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		{
			u8Entered_character1 = 'O';
     330:	8f e4       	ldi	r24, 0x4F	; 79
     332:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key5_sequence = 0 ;
     336:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <u8Key5_sequence>
     33a:	08 95       	ret
		}
	}
	
	else if (u8Temp_character == '7')
     33c:	87 33       	cpi	r24, 0x37	; 55
     33e:	a1 f5       	brne	.+104    	; 0x3a8 <ANALYZE_PRESS+0x22e>
	{
		u8Key2_sequence = 0;
     340:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <u8Key2_sequence>
		u8Key3_sequence = 0;
     344:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <u8Key3_sequence>
		u8Key4_sequence = 0;
     348:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <u8Key4_sequence>
		u8Key5_sequence = 0;
     34c:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <u8Key5_sequence>
		u8Key1_sequence = 0;
     350:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <u8Key1_sequence>
		u8Key7_sequence = 0;
     354:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <u8Key7_sequence>
		u8Key8_sequence = 0;
     358:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <u8Key8_sequence>
		
		if (u8Key6_sequence == 0)
     35c:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <u8Key6_sequence>
     360:	81 11       	cpse	r24, r1
     362:	07 c0       	rjmp	.+14     	; 0x372 <ANALYZE_PRESS+0x1f8>
		{
			u8Entered_character1 = 'P';
     364:	80 e5       	ldi	r24, 0x50	; 80
     366:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key6_sequence ++ ;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <u8Key6_sequence>
     370:	08 95       	ret
		}
		else if (u8Key6_sequence == 1)
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	39 f4       	brne	.+14     	; 0x384 <ANALYZE_PRESS+0x20a>
		{
			u8Entered_character1 = 'Q';
     376:	81 e5       	ldi	r24, 0x51	; 81
     378:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key6_sequence ++ ;
     37c:	82 e0       	ldi	r24, 0x02	; 2
     37e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <u8Key6_sequence>
     382:	08 95       	ret
		}
		else if (u8Key6_sequence == 2)
     384:	82 30       	cpi	r24, 0x02	; 2
     386:	39 f4       	brne	.+14     	; 0x396 <ANALYZE_PRESS+0x21c>
		{
			u8Entered_character1 = 'R';
     388:	82 e5       	ldi	r24, 0x52	; 82
     38a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key6_sequence ++ ;
     38e:	83 e0       	ldi	r24, 0x03	; 3
     390:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <u8Key6_sequence>
     394:	08 95       	ret
		}
		else if (u8Key6_sequence == 3)
     396:	83 30       	cpi	r24, 0x03	; 3
     398:	09 f0       	breq	.+2      	; 0x39c <ANALYZE_PRESS+0x222>
     39a:	66 c0       	rjmp	.+204    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		{
			u8Entered_character1 = 'S';
     39c:	83 e5       	ldi	r24, 0x53	; 83
     39e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key6_sequence = 0 ;
     3a2:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <u8Key6_sequence>
     3a6:	08 95       	ret
		}
	}
	
	else if (u8Temp_character == '8')
     3a8:	88 33       	cpi	r24, 0x38	; 56
     3aa:	51 f5       	brne	.+84     	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		u8Key2_sequence = 0;
     3ac:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <u8Key2_sequence>
		u8Key3_sequence = 0;
     3b0:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <u8Key3_sequence>
		u8Key4_sequence = 0;
     3b4:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <u8Key4_sequence>
		u8Key5_sequence = 0;
     3b8:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <u8Key5_sequence>
		u8Key6_sequence = 0;
     3bc:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <u8Key6_sequence>
		u8Key1_sequence = 0;
     3c0:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <u8Key1_sequence>
		u8Key8_sequence = 0;
     3c4:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <u8Key8_sequence>
		
		if (u8Key7_sequence == 0)
     3c8:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <u8Key7_sequence>
     3cc:	81 11       	cpse	r24, r1
     3ce:	07 c0       	rjmp	.+14     	; 0x3de <ANALYZE_PRESS+0x264>
		{
			u8Entered_character1 = 'T';
     3d0:	84 e5       	ldi	r24, 0x54	; 84
     3d2:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key7_sequence ++ ;
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <u8Key7_sequence>
     3dc:	08 95       	ret
		}
		else if (u8Key7_sequence == 1)
     3de:	81 30       	cpi	r24, 0x01	; 1
     3e0:	39 f4       	brne	.+14     	; 0x3f0 <ANALYZE_PRESS+0x276>
		{
			u8Entered_character1 = 'U';
     3e2:	85 e5       	ldi	r24, 0x55	; 85
     3e4:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key7_sequence ++ ;
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <u8Key7_sequence>
     3ee:	08 95       	ret
		}
		else if (u8Key7_sequence == 2)
     3f0:	82 30       	cpi	r24, 0x02	; 2
     3f2:	d1 f5       	brne	.+116    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		{
			u8Entered_character1 = 'V';
     3f4:	86 e5       	ldi	r24, 0x56	; 86
     3f6:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key7_sequence = 0 ;
     3fa:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <u8Key7_sequence>
     3fe:	08 95       	ret
		}
	}
	
	else if (u8Temp_character == '9')
     400:	89 33       	cpi	r24, 0x39	; 57
     402:	91 f5       	brne	.+100    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	{
		u8Key2_sequence = 0;
     404:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <u8Key2_sequence>
		u8Key3_sequence = 0;
     408:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <u8Key3_sequence>
		u8Key4_sequence = 0;
     40c:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <u8Key4_sequence>
		u8Key5_sequence = 0;
     410:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <u8Key5_sequence>
		u8Key6_sequence = 0;
     414:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <u8Key6_sequence>
		u8Key7_sequence = 0;
     418:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <u8Key7_sequence>
		u8Key1_sequence = 0;
     41c:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <u8Key1_sequence>
		
		if (u8Key8_sequence == 0)
     420:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <u8Key8_sequence>
     424:	81 11       	cpse	r24, r1
     426:	07 c0       	rjmp	.+14     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		{
			u8Entered_character1 = 'W';
     428:	87 e5       	ldi	r24, 0x57	; 87
     42a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key8_sequence ++ ;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <u8Key8_sequence>
     434:	08 95       	ret
		}
		else if (u8Key8_sequence == 1)
     436:	81 30       	cpi	r24, 0x01	; 1
     438:	39 f4       	brne	.+14     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		{
			u8Entered_character1 = 'X';
     43a:	88 e5       	ldi	r24, 0x58	; 88
     43c:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key8_sequence ++ ;
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <u8Key8_sequence>
     446:	08 95       	ret
		}
		else if (u8Key8_sequence == 2)
     448:	82 30       	cpi	r24, 0x02	; 2
     44a:	39 f4       	brne	.+14     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		{
			u8Entered_character1 = 'Y';
     44c:	89 e5       	ldi	r24, 0x59	; 89
     44e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key8_sequence ++ ;
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <u8Key8_sequence>
     458:	08 95       	ret
		}
		else if (u8Key8_sequence == 3)
     45a:	83 30       	cpi	r24, 0x03	; 3
     45c:	29 f4       	brne	.+10     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		{
			u8Entered_character1 = 'Z';
     45e:	8a e5       	ldi	r24, 0x5A	; 90
     460:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <u8Entered_character1>
			u8Key8_sequence = 0 ;
     464:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <u8Key8_sequence>
     468:	08 95       	ret

0000046a <KEYPAD_WITH_LCD>:
static uint8_t u8Statement_p2_2_size = sizeof(u8Statement_p2_2);
static uint8_t u8Statement_p3_1_size = sizeof(u8Statement_p3_1);
static uint8_t u8Statement_p3_2_size = sizeof(u8Statement_p3_2);
	
extern void KEYPAD_WITH_LCD()
{
     46a:	8f 92       	push	r8
     46c:	9f 92       	push	r9
     46e:	bf 92       	push	r11
     470:	cf 92       	push	r12
     472:	df 92       	push	r13
     474:	ef 92       	push	r14
     476:	ff 92       	push	r15
     478:	0f 93       	push	r16
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	6d 97       	sbiw	r28, 0x1d	; 29
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8Count1 = 0;
	uint8_t u8Count2 = 0;
	uint8_t u8ID_check = 0;
	uint8_t u8Password_check = 0;
	
	volatile uint8_t u8Temp_character = 0;
     490:	19 82       	std	Y+1, r1	; 0x01
	
	u8Entered_character1 = 0;
     492:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <u8Entered_character1>
	u8Entered_character2 = 0;
     496:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <u8Entered_character2>
	gu8Password_right = 0;
     49a:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <gu8Password_right>
	gu8ID_right = 0;
     49e:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <gu8ID_right>
	
	unsigned char u8Entered_password[MAXIMUM_NUMBER_OF_LETTERS] = {0};
     4a2:	87 e0       	ldi	r24, 0x07	; 7
     4a4:	fe 01       	movw	r30, r28
     4a6:	32 96       	adiw	r30, 0x02	; 2
     4a8:	df 01       	movw	r26, r30
     4aa:	28 2f       	mov	r18, r24
     4ac:	1d 92       	st	X+, r1
     4ae:	2a 95       	dec	r18
     4b0:	e9 f7       	brne	.-6      	; 0x4ac <KEYPAD_WITH_LCD+0x42>
	unsigned char u8Entered_ID[MAXIMUM_NUMBER_OF_LETTERS] = {0};
     4b2:	6e 01       	movw	r12, r28
     4b4:	99 e0       	ldi	r25, 0x09	; 9
     4b6:	c9 0e       	add	r12, r25
     4b8:	d1 1c       	adc	r13, r1
     4ba:	d6 01       	movw	r26, r12
     4bc:	e8 2f       	mov	r30, r24
     4be:	1d 92       	st	X+, r1
     4c0:	ea 95       	dec	r30
     4c2:	e9 f7       	brne	.-6      	; 0x4be <KEYPAD_WITH_LCD+0x54>
		
	unsigned char u8Actual_ID[MAXIMUM_NUMBER_OF_LETTERS] = {'A','E','L','K','A','D','Y'};  /*{'A','E','L','K','A','D','Y'}*/
     4c4:	97 e0       	ldi	r25, 0x07	; 7
     4c6:	ed e9       	ldi	r30, 0x9D	; 157
     4c8:	f1 e0       	ldi	r31, 0x01	; 1
     4ca:	de 01       	movw	r26, r28
     4cc:	50 96       	adiw	r26, 0x10	; 16
     4ce:	01 90       	ld	r0, Z+
     4d0:	0d 92       	st	X+, r0
     4d2:	9a 95       	dec	r25
     4d4:	e1 f7       	brne	.-8      	; 0x4ce <KEYPAD_WITH_LCD+0x64>
	unsigned char u8Actual_password[MAXIMUM_NUMBER_OF_LETTERS] = {'3','5','5','2','3','9'};
     4d6:	fe 01       	movw	r30, r28
     4d8:	77 96       	adiw	r30, 0x17	; 23
     4da:	df 01       	movw	r26, r30
     4dc:	1d 92       	st	X+, r1
     4de:	8a 95       	dec	r24
     4e0:	e9 f7       	brne	.-6      	; 0x4dc <KEYPAD_WITH_LCD+0x72>
     4e2:	83 e3       	ldi	r24, 0x33	; 51
     4e4:	8f 8b       	std	Y+23, r24	; 0x17
     4e6:	95 e3       	ldi	r25, 0x35	; 53
     4e8:	98 8f       	std	Y+24, r25	; 0x18
     4ea:	99 8f       	std	Y+25, r25	; 0x19
     4ec:	92 e3       	ldi	r25, 0x32	; 50
     4ee:	9a 8f       	std	Y+26, r25	; 0x1a
     4f0:	8b 8f       	std	Y+27, r24	; 0x1b
     4f2:	89 e3       	ldi	r24, 0x39	; 57
     4f4:	8c 8f       	std	Y+28, r24	; 0x1c
			
	LCD_COMMAND(CLEAR_DISPLAY);
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fc:	ef e6       	ldi	r30, 0x6F	; 111
     4fe:	f7 e1       	ldi	r31, 0x17	; 23
     500:	31 97       	sbiw	r30, 0x01	; 1
     502:	f1 f7       	brne	.-4      	; 0x500 <KEYPAD_WITH_LCD+0x96>
     504:	00 c0       	rjmp	.+0      	; 0x506 <KEYPAD_WITH_LCD+0x9c>
     506:	00 00       	nop
	_delay_us(2000);
	
	LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     508:	86 e0       	ldi	r24, 0x06	; 6
     50a:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     50e:	8b e2       	ldi	r24, 0x2B	; 43
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	f1 f7       	brne	.-4      	; 0x512 <KEYPAD_WITH_LCD+0xa8>
     516:	00 c0       	rjmp	.+0      	; 0x518 <KEYPAD_WITH_LCD+0xae>
     518:	00 00       	nop
	_delay_us(100);
	
	LCD_COMMAND(FIRST_LINE_START);
     51a:	80 e8       	ldi	r24, 0x80	; 128
     51c:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
	LCD_DATA_STRING(u8Statement_pHome_1 , u8Statement_pHome_1_size);
     520:	65 e0       	ldi	r22, 0x05	; 5
     522:	8b ea       	ldi	r24, 0xAB	; 171
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
	
	LCD_COMMAND(SHIFT_CURSOR_POSITION_LEFT);
     52a:	80 e1       	ldi	r24, 0x10	; 16
     52c:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     530:	86 01       	movw	r16, r12
     532:	7e 01       	movw	r14, r28
     534:	90 e1       	ldi	r25, 0x10	; 16
     536:	e9 0e       	add	r14, r25
     538:	f1 1c       	adc	r15, r1
	
	do
	{
		for (u8Count1 = 0; u8Count1 < MAXIMUM_NUMBER_OF_LETTERS; u8Count1 ++)
		{	
			u8Temp_character = 0;
     53a:	19 82       	std	Y+1, r1	; 0x01
     53c:	68 94       	set
     53e:	bb 24       	eor	r11, r11
     540:	b2 f8       	bld	r11, 2
			
			for (u8Count2 = 0 ; u8Count2 < 4 ; u8Count2 ++)
			{
				SET_COLUMNS_INPUT();
     542:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <SET_COLUMNS_INPUT>
				POWER_ALL_COLUMNS(); // To activate pull up resistors
     546:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <POWER_ALL_COLUMNS>
				
				SET_ROWS_OUTPUT();
     54a:	0e 94 b5 0a 	call	0x156a	; 0x156a <SET_ROWS_OUTPUT>
				GROUND_ALL_ROWS();
     54e:	0e 94 a3 09 	call	0x1346	; 0x1346 <GROUND_ALL_ROWS>
				
				do  // To make sure that all buttons are released
				{
					READ_COLUMN1(&u8Column1_reading);
     552:	8d eb       	ldi	r24, 0xBD	; 189
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 0c 0b 	call	0x1618	; 0x1618 <READ_COLUMN1>
					READ_COLUMN2(&u8Column2_reading);
     55a:	8c eb       	ldi	r24, 0xBC	; 188
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	0e 94 43 0b 	call	0x1686	; 0x1686 <READ_COLUMN2>
					READ_COLUMN3(&u8Column3_reading);
     562:	8b eb       	ldi	r24, 0xBB	; 187
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <READ_COLUMN3>
					READ_COLUMN4(&u8Column4_reading);
     56a:	8a eb       	ldi	r24, 0xBA	; 186
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <READ_COLUMN4>
					
				} while (u8Column1_reading == 0 || u8Column2_reading == 0 || u8Column3_reading == 0 || u8Column4_reading == 0 );
     572:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <u8Column1_reading>
     576:	88 23       	and	r24, r24
     578:	61 f3       	breq	.-40     	; 0x552 <KEYPAD_WITH_LCD+0xe8>
     57a:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <u8Column2_reading>
     57e:	88 23       	and	r24, r24
     580:	41 f3       	breq	.-48     	; 0x552 <KEYPAD_WITH_LCD+0xe8>
     582:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <u8Column3_reading>
     586:	88 23       	and	r24, r24
     588:	21 f3       	breq	.-56     	; 0x552 <KEYPAD_WITH_LCD+0xe8>
     58a:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <u8Column4_reading>
     58e:	88 23       	and	r24, r24
     590:	01 f3       	breq	.-64     	; 0x552 <KEYPAD_WITH_LCD+0xe8>
				
				do  // To wait for a press
				{
					READ_COLUMN1(&u8Column1_reading);
     592:	8d eb       	ldi	r24, 0xBD	; 189
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	0e 94 0c 0b 	call	0x1618	; 0x1618 <READ_COLUMN1>
					READ_COLUMN2(&u8Column2_reading);
     59a:	8c eb       	ldi	r24, 0xBC	; 188
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	0e 94 43 0b 	call	0x1686	; 0x1686 <READ_COLUMN2>
					READ_COLUMN3(&u8Column3_reading);
     5a2:	8b eb       	ldi	r24, 0xBB	; 187
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <READ_COLUMN3>
					READ_COLUMN4(&u8Column4_reading);
     5aa:	8a eb       	ldi	r24, 0xBA	; 186
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 b1 0b 	call	0x1762	; 0x1762 <READ_COLUMN4>
					
				} while (u8Column1_reading != 0 && u8Column2_reading != 0 && u8Column3_reading != 0 && u8Column4_reading != 0 );
     5b2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <u8Column1_reading>
     5b6:	88 23       	and	r24, r24
     5b8:	61 f0       	breq	.+24     	; 0x5d2 <KEYPAD_WITH_LCD+0x168>
     5ba:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <u8Column2_reading>
     5be:	88 23       	and	r24, r24
     5c0:	41 f0       	breq	.+16     	; 0x5d2 <KEYPAD_WITH_LCD+0x168>
     5c2:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <u8Column3_reading>
     5c6:	88 23       	and	r24, r24
     5c8:	21 f0       	breq	.+8      	; 0x5d2 <KEYPAD_WITH_LCD+0x168>
     5ca:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <u8Column4_reading>
     5ce:	81 11       	cpse	r24, r1
     5d0:	e0 cf       	rjmp	.-64     	; 0x592 <KEYPAD_WITH_LCD+0x128>
				
				BUZZER_ON();
     5d2:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <BUZZER_ON>
				GET_KEY_ROW(&u8Captured_row);
     5d6:	85 eb       	ldi	r24, 0xB5	; 181
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	0e 94 49 00 	call	0x92	; 0x92 <GET_KEY_ROW>
				GET_KEY_COLUMN(&u8Captured_column);
     5de:	84 eb       	ldi	r24, 0xB4	; 180
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 83 00 	call	0x106	; 0x106 <GET_KEY_COLUMN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5e6:	af eb       	ldi	r26, 0xBF	; 191
     5e8:	b4 ed       	ldi	r27, 0xD4	; 212
     5ea:	e1 e0       	ldi	r30, 0x01	; 1
     5ec:	a1 50       	subi	r26, 0x01	; 1
     5ee:	b0 40       	sbci	r27, 0x00	; 0
     5f0:	e0 40       	sbci	r30, 0x00	; 0
     5f2:	e1 f7       	brne	.-8      	; 0x5ec <KEYPAD_WITH_LCD+0x182>
     5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <KEYPAD_WITH_LCD+0x18c>
     5f6:	00 00       	nop
				_delay_ms(50);
				BUZZER_OFF();
     5f8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <BUZZER_OFF>
				
				u8Temp_character = gu8Key_pad[u8Captured_row][u8Captured_column];
     5fc:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <u8Captured_row>
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
     606:	ee 0f       	add	r30, r30
     608:	ff 1f       	adc	r31, r31
     60a:	ee 0f       	add	r30, r30
     60c:	ff 1f       	adc	r31, r31
     60e:	ec 55       	subi	r30, 0x5C	; 92
     610:	fe 4f       	sbci	r31, 0xFE	; 254
     612:	e8 0f       	add	r30, r24
     614:	f1 1d       	adc	r31, r1
     616:	80 81       	ld	r24, Z
     618:	89 83       	std	Y+1, r24	; 0x01
				
				if (u8Temp_character == 's' || u8Temp_character == 'o')
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	83 37       	cpi	r24, 0x73	; 115
     61e:	81 f0       	breq	.+32     	; 0x640 <KEYPAD_WITH_LCD+0x1d6>
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	8f 36       	cpi	r24, 0x6F	; 111
     624:	69 f0       	breq	.+26     	; 0x640 <KEYPAD_WITH_LCD+0x1d6>
					break;
				}
				
				else
				{
					ANALYZE_PRESS(u8Temp_character);
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	0e 94 bd 00 	call	0x17a	; 0x17a <ANALYZE_PRESS>
					
					LCD_DATA(u8Entered_character1);
     62c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <u8Entered_character1>
     630:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_DATA>
					
					LCD_COMMAND(SHIFT_CURSOR_POSITION_LEFT);
     634:	80 e1       	ldi	r24, 0x10	; 16
     636:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     63a:	ba 94       	dec	r11
	{
		for (u8Count1 = 0; u8Count1 < MAXIMUM_NUMBER_OF_LETTERS; u8Count1 ++)
		{	
			u8Temp_character = 0;
			
			for (u8Count2 = 0 ; u8Count2 < 4 ; u8Count2 ++)
     63c:	b1 10       	cpse	r11, r1
     63e:	81 cf       	rjmp	.-254    	; 0x542 <KEYPAD_WITH_LCD+0xd8>
					
					LCD_COMMAND(SHIFT_CURSOR_POSITION_LEFT);
				}
				
			} 
			u8Entered_ID[u8Count1] = u8Entered_character1 ;
     640:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <u8Entered_character1>
     644:	d6 01       	movw	r26, r12
     646:	8d 93       	st	X+, r24
     648:	6d 01       	movw	r12, r26
			
			if (u8Temp_character == 'o')
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	8f 36       	cpi	r24, 0x6F	; 111
     64e:	51 f0       	breq	.+20     	; 0x664 <KEYPAD_WITH_LCD+0x1fa>
			{
				break ;
			}
			else if (u8Temp_character == 's')
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	83 37       	cpi	r24, 0x73	; 115
     654:	19 f4       	brne	.+6      	; 0x65c <KEYPAD_WITH_LCD+0x1f2>
			{	
				LCD_COMMAND(SHIFT_CURSOR_POSITION_RIGHT);
     656:	84 e1       	ldi	r24, 0x14	; 20
     658:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
	
	LCD_COMMAND(SHIFT_CURSOR_POSITION_LEFT);
	
	do
	{
		for (u8Count1 = 0; u8Count1 < MAXIMUM_NUMBER_OF_LETTERS; u8Count1 ++)
     65c:	ce 14       	cp	r12, r14
     65e:	df 04       	cpc	r13, r15
     660:	09 f0       	breq	.+2      	; 0x664 <KEYPAD_WITH_LCD+0x1fa>
     662:	6b cf       	rjmp	.-298    	; 0x53a <KEYPAD_WITH_LCD+0xd0>
     664:	fe 01       	movw	r30, r28
     666:	70 96       	adiw	r30, 0x10	; 16
	
extern void KEYPAD_WITH_LCD()
{
	uint8_t u8Count1 = 0;
	uint8_t u8Count2 = 0;
	uint8_t u8ID_check = 0;
     668:	b1 2c       	mov	r11, r1
		
	} while (u8Entered_character1 != 'o');
	
	for (u8Count1 = 0 ;u8Count1 < MAXIMUM_NUMBER_OF_LETTERS ; u8Count1 ++)
	{
		if (u8Entered_ID[u8Count1] == u8Actual_ID[u8Count1])
     66a:	d8 01       	movw	r26, r16
     66c:	9d 91       	ld	r25, X+
     66e:	8d 01       	movw	r16, r26
     670:	81 91       	ld	r24, Z+
     672:	98 13       	cpse	r25, r24
     674:	01 c0       	rjmp	.+2      	; 0x678 <KEYPAD_WITH_LCD+0x20e>
		{
			u8ID_check ++;
     676:	b3 94       	inc	r11

		break;
		
	} while (u8Entered_character1 != 'o');
	
	for (u8Count1 = 0 ;u8Count1 < MAXIMUM_NUMBER_OF_LETTERS ; u8Count1 ++)
     678:	e0 16       	cp	r14, r16
     67a:	f1 06       	cpc	r15, r17
     67c:	b1 f7       	brne	.-20     	; 0x66a <KEYPAD_WITH_LCD+0x200>
			
		}
	}

	
	LCD_COMMAND(SECOND_LINE_START);
     67e:	80 ec       	ldi	r24, 0xC0	; 192
     680:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>

	LCD_DATA_STRING(u8Statement_pHome_2 , u8Statement_pHome_2_size);
     684:	67 e0       	ldi	r22, 0x07	; 7
     686:	84 ea       	ldi	r24, 0xA4	; 164
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
	
	LCD_COMMAND(SHIFT_CURSOR_POSITION_LEFT);
     68e:	80 e1       	ldi	r24, 0x10	; 16
     690:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     694:	7e 01       	movw	r14, r28
     696:	b9 e0       	ldi	r27, 0x09	; 9
     698:	eb 0e       	add	r14, r27
     69a:	f1 1c       	adc	r15, r1
     69c:	6e 01       	movw	r12, r28
     69e:	e2 e0       	ldi	r30, 0x02	; 2
     6a0:	ce 0e       	add	r12, r30
     6a2:	d1 1c       	adc	r13, r1
     6a4:	47 01       	movw	r8, r14
	
extern void KEYPAD_WITH_LCD()
{
	uint8_t u8Count1 = 0;
	uint8_t u8Count2 = 0;
	uint8_t u8ID_check = 0;
     6a6:	86 01       	movw	r16, r12
	
	do
	{
		for (u8Count1 = 0;u8Count1 < MAXIMUM_NUMBER_OF_LETTERS; u8Count1 ++)
		{
			SET_COLUMNS_INPUT();
     6a8:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <SET_COLUMNS_INPUT>
			POWER_ALL_COLUMNS(); // To activate pull up resistors
     6ac:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <POWER_ALL_COLUMNS>
					
			SET_ROWS_OUTPUT();
     6b0:	0e 94 b5 0a 	call	0x156a	; 0x156a <SET_ROWS_OUTPUT>
			GROUND_ALL_ROWS();
     6b4:	0e 94 a3 09 	call	0x1346	; 0x1346 <GROUND_ALL_ROWS>
					
			do  // To make sure that all buttons are released
			{
				READ_COLUMN1(&u8Column1_reading);
     6b8:	8d eb       	ldi	r24, 0xBD	; 189
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	0e 94 0c 0b 	call	0x1618	; 0x1618 <READ_COLUMN1>
				READ_COLUMN2(&u8Column2_reading);
     6c0:	8c eb       	ldi	r24, 0xBC	; 188
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	0e 94 43 0b 	call	0x1686	; 0x1686 <READ_COLUMN2>
				READ_COLUMN3(&u8Column3_reading);
     6c8:	8b eb       	ldi	r24, 0xBB	; 187
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <READ_COLUMN3>
				READ_COLUMN4(&u8Column4_reading);
     6d0:	8a eb       	ldi	r24, 0xBA	; 186
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 b1 0b 	call	0x1762	; 0x1762 <READ_COLUMN4>
						
			} while (u8Column1_reading == 0 || u8Column2_reading == 0 || u8Column3_reading == 0 || u8Column4_reading == 0 );
     6d8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <u8Column1_reading>
     6dc:	88 23       	and	r24, r24
     6de:	61 f3       	breq	.-40     	; 0x6b8 <KEYPAD_WITH_LCD+0x24e>
     6e0:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <u8Column2_reading>
     6e4:	88 23       	and	r24, r24
     6e6:	41 f3       	breq	.-48     	; 0x6b8 <KEYPAD_WITH_LCD+0x24e>
     6e8:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <u8Column3_reading>
     6ec:	88 23       	and	r24, r24
     6ee:	21 f3       	breq	.-56     	; 0x6b8 <KEYPAD_WITH_LCD+0x24e>
     6f0:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <u8Column4_reading>
     6f4:	88 23       	and	r24, r24
     6f6:	01 f3       	breq	.-64     	; 0x6b8 <KEYPAD_WITH_LCD+0x24e>
					
			do  // To wait for a press
			{
				READ_COLUMN1(&u8Column1_reading);
     6f8:	8d eb       	ldi	r24, 0xBD	; 189
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	0e 94 0c 0b 	call	0x1618	; 0x1618 <READ_COLUMN1>
				READ_COLUMN2(&u8Column2_reading);
     700:	8c eb       	ldi	r24, 0xBC	; 188
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	0e 94 43 0b 	call	0x1686	; 0x1686 <READ_COLUMN2>
				READ_COLUMN3(&u8Column3_reading);
     708:	8b eb       	ldi	r24, 0xBB	; 187
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <READ_COLUMN3>
				READ_COLUMN4(&u8Column4_reading);
     710:	8a eb       	ldi	r24, 0xBA	; 186
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	0e 94 b1 0b 	call	0x1762	; 0x1762 <READ_COLUMN4>
						
			} while (u8Column1_reading != 0 && u8Column2_reading != 0 && u8Column3_reading != 0 && u8Column4_reading != 0 );
     718:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <u8Column1_reading>
     71c:	88 23       	and	r24, r24
     71e:	61 f0       	breq	.+24     	; 0x738 <KEYPAD_WITH_LCD+0x2ce>
     720:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <u8Column2_reading>
     724:	88 23       	and	r24, r24
     726:	41 f0       	breq	.+16     	; 0x738 <KEYPAD_WITH_LCD+0x2ce>
     728:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <u8Column3_reading>
     72c:	88 23       	and	r24, r24
     72e:	21 f0       	breq	.+8      	; 0x738 <KEYPAD_WITH_LCD+0x2ce>
     730:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <u8Column4_reading>
     734:	81 11       	cpse	r24, r1
     736:	e0 cf       	rjmp	.-64     	; 0x6f8 <KEYPAD_WITH_LCD+0x28e>
					
			BUZZER_ON();
     738:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <BUZZER_ON>
			GET_KEY_ROW(&u8Captured_row);
     73c:	85 eb       	ldi	r24, 0xB5	; 181
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0e 94 49 00 	call	0x92	; 0x92 <GET_KEY_ROW>
			GET_KEY_COLUMN(&u8Captured_column);
     744:	84 eb       	ldi	r24, 0xB4	; 180
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	0e 94 83 00 	call	0x106	; 0x106 <GET_KEY_COLUMN>
     74c:	ff eb       	ldi	r31, 0xBF	; 191
     74e:	24 ed       	ldi	r18, 0xD4	; 212
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	f1 50       	subi	r31, 0x01	; 1
     754:	20 40       	sbci	r18, 0x00	; 0
     756:	80 40       	sbci	r24, 0x00	; 0
     758:	e1 f7       	brne	.-8      	; 0x752 <KEYPAD_WITH_LCD+0x2e8>
     75a:	00 c0       	rjmp	.+0      	; 0x75c <KEYPAD_WITH_LCD+0x2f2>
     75c:	00 00       	nop
			_delay_ms(50);
			BUZZER_OFF();
     75e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <BUZZER_OFF>
					
			u8Entered_character2 = gu8Key_pad[u8Captured_row][u8Captured_column];
     762:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <u8Captured_row>
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
     76c:	ee 0f       	add	r30, r30
     76e:	ff 1f       	adc	r31, r31
     770:	ee 0f       	add	r30, r30
     772:	ff 1f       	adc	r31, r31
     774:	ec 55       	subi	r30, 0x5C	; 92
     776:	fe 4f       	sbci	r31, 0xFE	; 254
     778:	e8 0f       	add	r30, r24
     77a:	f1 1d       	adc	r31, r1
     77c:	80 81       	ld	r24, Z
     77e:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <u8Entered_character2>
					
			if (u8Entered_character2 == 'o')
     782:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <u8Entered_character2>
     786:	8f 36       	cpi	r24, 0x6F	; 111
     788:	61 f0       	breq	.+24     	; 0x7a2 <KEYPAD_WITH_LCD+0x338>
			}
			else
			{
			}
					
			LCD_DATA('*');
     78a:	8a e2       	ldi	r24, 0x2A	; 42
     78c:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_DATA>
					
			u8Entered_password[u8Count1] = u8Entered_character2 ;
     790:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <u8Entered_character2>
     794:	d8 01       	movw	r26, r16
     796:	8d 93       	st	X+, r24
     798:	8d 01       	movw	r16, r26
	
	LCD_COMMAND(SHIFT_CURSOR_POSITION_LEFT);
	
	do
	{
		for (u8Count1 = 0;u8Count1 < MAXIMUM_NUMBER_OF_LETTERS; u8Count1 ++)
     79a:	ea 16       	cp	r14, r26
     79c:	fb 06       	cpc	r15, r27
     79e:	09 f0       	breq	.+2      	; 0x7a2 <KEYPAD_WITH_LCD+0x338>
     7a0:	83 cf       	rjmp	.-250    	; 0x6a8 <KEYPAD_WITH_LCD+0x23e>
			LCD_DATA('*');
					
			u8Entered_password[u8Count1] = u8Entered_character2 ;
		}
			
	} while (u8Entered_character2 != 'o');
     7a2:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <u8Entered_character2>
     7a6:	8f 36       	cpi	r24, 0x6F	; 111
     7a8:	09 f0       	breq	.+2      	; 0x7ac <KEYPAD_WITH_LCD+0x342>
     7aa:	78 cf       	rjmp	.-272    	; 0x69c <KEYPAD_WITH_LCD+0x232>
     7ac:	fe 01       	movw	r30, r28
     7ae:	77 96       	adiw	r30, 0x17	; 23
     7b0:	80 e0       	ldi	r24, 0x00	; 0
			
	for (u8Count1 = 0 ;u8Count1 < MAXIMUM_NUMBER_OF_LETTERS ; u8Count1 ++)
	{
		if (u8Entered_password[u8Count1] == u8Actual_password[u8Count1])
     7b2:	d6 01       	movw	r26, r12
     7b4:	2d 91       	ld	r18, X+
     7b6:	6d 01       	movw	r12, r26
     7b8:	91 91       	ld	r25, Z+
     7ba:	29 13       	cpse	r18, r25
     7bc:	01 c0       	rjmp	.+2      	; 0x7c0 <KEYPAD_WITH_LCD+0x356>
		{
			u8Password_check ++;
     7be:	8f 5f       	subi	r24, 0xFF	; 255
			u8Entered_password[u8Count1] = u8Entered_character2 ;
		}
			
	} while (u8Entered_character2 != 'o');
			
	for (u8Count1 = 0 ;u8Count1 < MAXIMUM_NUMBER_OF_LETTERS ; u8Count1 ++)
     7c0:	c8 14       	cp	r12, r8
     7c2:	d9 04       	cpc	r13, r9
     7c4:	b1 f7       	brne	.-20     	; 0x7b2 <KEYPAD_WITH_LCD+0x348>
		else
		{
		}
	}

	if (u8ID_check == MAXIMUM_NUMBER_OF_LETTERS && u8Password_check == MAXIMUM_NUMBER_OF_LETTERS)
     7c6:	b7 e0       	ldi	r27, 0x07	; 7
     7c8:	bb 12       	cpse	r11, r27
     7ca:	48 c0       	rjmp	.+144    	; 0x85c <KEYPAD_WITH_LCD+0x3f2>
     7cc:	87 30       	cpi	r24, 0x07	; 7
     7ce:	09 f0       	breq	.+2      	; 0x7d2 <KEYPAD_WITH_LCD+0x368>
     7d0:	45 c0       	rjmp	.+138    	; 0x85c <KEYPAD_WITH_LCD+0x3f2>
	{
		gu8ID_right ++ ;
     7d2:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <gu8ID_right>
     7d6:	8f 5f       	subi	r24, 0xFF	; 255
     7d8:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <gu8ID_right>
		gu8Password_right ++ ;
     7dc:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <gu8Password_right>
     7e0:	8f 5f       	subi	r24, 0xFF	; 255
     7e2:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <gu8Password_right>
		
		LCD_COMMAND(CLEAR_DISPLAY);
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ec:	ef e6       	ldi	r30, 0x6F	; 111
     7ee:	f7 e1       	ldi	r31, 0x17	; 23
     7f0:	31 97       	sbiw	r30, 0x01	; 1
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <KEYPAD_WITH_LCD+0x386>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <KEYPAD_WITH_LCD+0x38c>
     7f6:	00 00       	nop
		_delay_us(2000);
		LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     7f8:	86 e0       	ldi	r24, 0x06	; 6
     7fa:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     7fe:	8b e2       	ldi	r24, 0x2B	; 43
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	01 97       	sbiw	r24, 0x01	; 1
     804:	f1 f7       	brne	.-4      	; 0x802 <KEYPAD_WITH_LCD+0x398>
     806:	00 c0       	rjmp	.+0      	; 0x808 <KEYPAD_WITH_LCD+0x39e>
     808:	00 00       	nop
		_delay_us(100);
		
		LCD_COMMAND(FIRST_LINE_START);
     80a:	80 e8       	ldi	r24, 0x80	; 128
     80c:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p3_1 , u8Statement_p3_1_size);
     810:	61 e1       	ldi	r22, 0x11	; 17
     812:	81 e7       	ldi	r24, 0x71	; 113
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
		
		LCD_COMMAND(SECOND_LINE_START);
     81a:	80 ec       	ldi	r24, 0xC0	; 192
     81c:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p3_2 , u8Statement_p3_2_size);
     820:	61 e1       	ldi	r22, 0x11	; 17
     822:	80 e6       	ldi	r24, 0x60	; 96
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
		
		BUZZER_ON();
     82a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <BUZZER_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     82e:	9f e7       	ldi	r25, 0x7F	; 127
     830:	ac ef       	ldi	r26, 0xFC	; 252
     832:	ba e0       	ldi	r27, 0x0A	; 10
     834:	91 50       	subi	r25, 0x01	; 1
     836:	a0 40       	sbci	r26, 0x00	; 0
     838:	b0 40       	sbci	r27, 0x00	; 0
     83a:	e1 f7       	brne	.-8      	; 0x834 <KEYPAD_WITH_LCD+0x3ca>
     83c:	00 c0       	rjmp	.+0      	; 0x83e <KEYPAD_WITH_LCD+0x3d4>
     83e:	00 00       	nop
		_delay_ms(300);
		BUZZER_OFF();
     840:	0e 94 60 09 	call	0x12c0	; 0x12c0 <BUZZER_OFF>
     844:	ef e7       	ldi	r30, 0x7F	; 127
     846:	ff e4       	ldi	r31, 0x4F	; 79
     848:	22 e1       	ldi	r18, 0x12	; 18
     84a:	e1 50       	subi	r30, 0x01	; 1
     84c:	f0 40       	sbci	r31, 0x00	; 0
     84e:	20 40       	sbci	r18, 0x00	; 0
     850:	e1 f7       	brne	.-8      	; 0x84a <KEYPAD_WITH_LCD+0x3e0>
     852:	00 c0       	rjmp	.+0      	; 0x854 <KEYPAD_WITH_LCD+0x3ea>
     854:	00 00       	nop
		
		_delay_ms(500);
		RELAY_ON();
     856:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <RELAY_ON>
     85a:	24 c0       	rjmp	.+72     	; 0x8a4 <__stack+0x45>
	} 
	else
	{
		LCD_COMMAND(CLEAR_DISPLAY);
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     862:	8f e6       	ldi	r24, 0x6F	; 111
     864:	97 e1       	ldi	r25, 0x17	; 23
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	f1 f7       	brne	.-4      	; 0x866 <__stack+0x7>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <__stack+0xd>
     86c:	00 00       	nop
		_delay_us(2000);
		LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     86e:	86 e0       	ldi	r24, 0x06	; 6
     870:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     874:	ab e2       	ldi	r26, 0x2B	; 43
     876:	b1 e0       	ldi	r27, 0x01	; 1
     878:	11 97       	sbiw	r26, 0x01	; 1
     87a:	f1 f7       	brne	.-4      	; 0x878 <__stack+0x19>
     87c:	00 c0       	rjmp	.+0      	; 0x87e <__stack+0x1f>
     87e:	00 00       	nop
		_delay_us(100);
		
		LCD_COMMAND(FIRST_LINE_START);
     880:	80 e8       	ldi	r24, 0x80	; 128
     882:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p2_1 , u8Statement_p2_1_size);
     886:	61 e1       	ldi	r22, 0x11	; 17
     888:	83 e9       	ldi	r24, 0x93	; 147
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
		
		LCD_COMMAND(SECOND_LINE_START);
     890:	80 ec       	ldi	r24, 0xC0	; 192
     892:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p2_2 , u8Statement_p2_2_size);
     896:	61 e1       	ldi	r22, 0x11	; 17
     898:	82 e8       	ldi	r24, 0x82	; 130
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
		
		BUZZER_FLICKER();
     8a0:	0e 94 66 09 	call	0x12cc	; 0x12cc <BUZZER_FLICKER>
	}
	
}
     8a4:	6d 96       	adiw	r28, 0x1d	; 29
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	df 90       	pop	r13
     8be:	cf 90       	pop	r12
     8c0:	bf 90       	pop	r11
     8c2:	9f 90       	pop	r9
     8c4:	8f 90       	pop	r8
     8c6:	08 95       	ret

000008c8 <HOME_PAGE>:
	PAGE6();
}

extern void HOME_PAGE()
{
	LCD_COMMAND(CLEAR_DISPLAY);
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     8ce:	8f e6       	ldi	r24, 0x6F	; 111
     8d0:	97 e1       	ldi	r25, 0x17	; 23
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <HOME_PAGE+0xa>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <HOME_PAGE+0x10>
     8d8:	00 00       	nop
	_delay_us(2000);
	LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     8da:	86 e0       	ldi	r24, 0x06	; 6
     8dc:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     8e0:	8b e2       	ldi	r24, 0x2B	; 43
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	01 97       	sbiw	r24, 0x01	; 1
     8e6:	f1 f7       	brne	.-4      	; 0x8e4 <HOME_PAGE+0x1c>
     8e8:	00 c0       	rjmp	.+0      	; 0x8ea <HOME_PAGE+0x22>
     8ea:	00 00       	nop
	_delay_us(100);
	
	LCD_COMMAND(FIRST_LINE_START);
     8ec:	80 e8       	ldi	r24, 0x80	; 128
     8ee:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
	LCD_DATA_STRING(u8Statement_pHome_1 , u8Statement_pHome_1_size);
     8f2:	61 e1       	ldi	r22, 0x11	; 17
     8f4:	8c e8       	ldi	r24, 0x8C	; 140
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
	
	LCD_COMMAND(SECOND_LINE_START);
     8fc:	80 ec       	ldi	r24, 0xC0	; 192
     8fe:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
	LCD_DATA_STRING(u8Statement_pHome_2 , u8Statement_pHome_2_size);
     902:	61 e1       	ldi	r22, 0x11	; 17
     904:	8b e7       	ldi	r24, 0x7B	; 123
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
	
	do
	{
		BUTTON2_READ(&u8Button2_reading);
     90c:	88 ed       	ldi	r24, 0xD8	; 216
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	0e 94 23 09 	call	0x1246	; 0x1246 <BUTTON2_READ>
	} while (u8Button2_reading == 0 );
     914:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <u8Button2_reading>
     918:	88 23       	and	r24, r24
     91a:	c1 f3       	breq	.-16     	; 0x90c <HOME_PAGE+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     91c:	9f e7       	ldi	r25, 0x7F	; 127
     91e:	2c ef       	ldi	r18, 0xFC	; 252
     920:	8a e0       	ldi	r24, 0x0A	; 10
     922:	91 50       	subi	r25, 0x01	; 1
     924:	20 40       	sbci	r18, 0x00	; 0
     926:	80 40       	sbci	r24, 0x00	; 0
     928:	e1 f7       	brne	.-8      	; 0x922 <HOME_PAGE+0x5a>
     92a:	00 c0       	rjmp	.+0      	; 0x92c <HOME_PAGE+0x64>
     92c:	00 00       	nop
     92e:	08 95       	ret

00000930 <PAGE2>:
	
	uint8_t u8Next_page = 0;
	
	do 
	{
		LCD_COMMAND(CLEAR_DISPLAY);
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     936:	8f e6       	ldi	r24, 0x6F	; 111
     938:	97 e1       	ldi	r25, 0x17	; 23
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	f1 f7       	brne	.-4      	; 0x93a <PAGE2+0xa>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <PAGE2+0x10>
     940:	00 00       	nop
		_delay_us(2000);
		LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     942:	86 e0       	ldi	r24, 0x06	; 6
     944:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     948:	8b e2       	ldi	r24, 0x2B	; 43
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <PAGE2+0x1c>
     950:	00 c0       	rjmp	.+0      	; 0x952 <PAGE2+0x22>
     952:	00 00       	nop
		_delay_us(100);
		
		LCD_COMMAND(FIRST_LINE_START);
     954:	80 e8       	ldi	r24, 0x80	; 128
     956:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p2_1 , u8Statement_p2_1_size);
     95a:	61 e1       	ldi	r22, 0x11	; 17
     95c:	8a e6       	ldi	r24, 0x6A	; 106
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
		
		LCD_COMMAND(SECOND_LINE_START);
     964:	80 ec       	ldi	r24, 0xC0	; 192
     966:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p2_2 , u8Statement_p2_2_size);
     96a:	61 e1       	ldi	r22, 0x11	; 17
     96c:	89 e5       	ldi	r24, 0x59	; 89
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
		
		do
		{
			BUTTON0_READ(&u8Button0_reading);
     974:	8a ed       	ldi	r24, 0xDA	; 218
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	0e 94 b5 08 	call	0x116a	; 0x116a <BUTTON0_READ>
			BUTTON1_READ(&u8Button1_reading);
     97c:	89 ed       	ldi	r24, 0xD9	; 217
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <BUTTON1_READ>
			BUTTON2_READ(&u8Button2_reading);
     984:	88 ed       	ldi	r24, 0xD8	; 216
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	0e 94 23 09 	call	0x1246	; 0x1246 <BUTTON2_READ>
			
		} while (u8Button0_reading == 0 && u8Button1_reading == 0 && u8Button2_reading == 0);
     98c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <u8Button0_reading>
     990:	81 11       	cpse	r24, r1
     992:	08 c0       	rjmp	.+16     	; 0x9a4 <PAGE2+0x74>
     994:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <u8Button1_reading>
     998:	81 11       	cpse	r24, r1
     99a:	04 c0       	rjmp	.+8      	; 0x9a4 <PAGE2+0x74>
     99c:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <u8Button2_reading>
     9a0:	88 23       	and	r24, r24
     9a2:	41 f3       	breq	.-48     	; 0x974 <PAGE2+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9a4:	9f e7       	ldi	r25, 0x7F	; 127
     9a6:	2c ef       	ldi	r18, 0xFC	; 252
     9a8:	8a e0       	ldi	r24, 0x0A	; 10
     9aa:	91 50       	subi	r25, 0x01	; 1
     9ac:	20 40       	sbci	r18, 0x00	; 0
     9ae:	80 40       	sbci	r24, 0x00	; 0
     9b0:	e1 f7       	brne	.-8      	; 0x9aa <PAGE2+0x7a>
     9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <PAGE2+0x84>
     9b4:	00 00       	nop
		
		_delay_ms(DELAY_BETWEEN_ACTIONS_ms);
		
		if (u8Button0_reading != 0)
     9b6:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <u8Button0_reading>
     9ba:	88 23       	and	r24, r24
     9bc:	e9 f0       	breq	.+58     	; 0x9f8 <PAGE2+0xc8>
		{
			LCD_COMMAND(CLEAR_DISPLAY);
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c4:	8f e6       	ldi	r24, 0x6F	; 111
     9c6:	97 e1       	ldi	r25, 0x17	; 23
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <PAGE2+0x98>
     9cc:	00 c0       	rjmp	.+0      	; 0x9ce <PAGE2+0x9e>
     9ce:	00 00       	nop
			_delay_us(2000);
			LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     9d0:	86 e0       	ldi	r24, 0x06	; 6
     9d2:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     9d6:	8b e2       	ldi	r24, 0x2B	; 43
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	f1 f7       	brne	.-4      	; 0x9da <PAGE2+0xaa>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <PAGE2+0xb0>
     9e0:	00 00       	nop
			_delay_us(100);
			
			LCD_COMMAND(FIRST_LINE_START);
     9e2:	80 e8       	ldi	r24, 0x80	; 128
     9e4:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
			LCD_DATA_STRING(u8Statement_test , u8Statement_test_size);
     9e8:	61 e1       	ldi	r22, 0x11	; 17
     9ea:	80 eb       	ldi	r24, 0xB0	; 176
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
			
			LEDS_FLASH();
     9f2:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <LEDS_FLASH>
     9f6:	9c cf       	rjmp	.-200    	; 0x930 <PAGE2>
		}
		
		else if (u8Button1_reading != 0)
     9f8:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <u8Button1_reading>
     9fc:	88 23       	and	r24, r24
     9fe:	e9 f0       	breq	.+58     	; 0xa3a <PAGE2+0x10a>
		{
			LCD_COMMAND(CLEAR_DISPLAY);
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     a06:	8f e6       	ldi	r24, 0x6F	; 111
     a08:	97 e1       	ldi	r25, 0x17	; 23
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	f1 f7       	brne	.-4      	; 0xa0a <PAGE2+0xda>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <PAGE2+0xe0>
     a10:	00 00       	nop
			_delay_us(2000);
			LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     a12:	86 e0       	ldi	r24, 0x06	; 6
     a14:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     a18:	8b e2       	ldi	r24, 0x2B	; 43
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	f1 f7       	brne	.-4      	; 0xa1c <PAGE2+0xec>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <PAGE2+0xf2>
     a22:	00 00       	nop
			_delay_us(100);
			
			LCD_COMMAND(FIRST_LINE_START);
     a24:	80 e8       	ldi	r24, 0x80	; 128
     a26:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
			LCD_DATA_STRING(u8Statement_test , u8Statement_test_size);
     a2a:	61 e1       	ldi	r22, 0x11	; 17
     a2c:	80 eb       	ldi	r24, 0xB0	; 176
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
			
			RELAY_FLICKER();
     a34:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <RELAY_FLICKER>
     a38:	7b cf       	rjmp	.-266    	; 0x930 <PAGE2>
		else if (u8Button2_reading != 0)
		{
			u8Next_page ++;
		}
		
	} while (u8Next_page == 0);
     a3a:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <u8Button2_reading>
     a3e:	88 23       	and	r24, r24
     a40:	09 f4       	brne	.+2      	; 0xa44 <PAGE2+0x114>
     a42:	76 cf       	rjmp	.-276    	; 0x930 <PAGE2>
		
}
     a44:	08 95       	ret

00000a46 <PAGE3>:
	
	uint8_t u8Next_page = 0;
	
	do
	{
		LCD_COMMAND(CLEAR_DISPLAY);
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     a4c:	8f e6       	ldi	r24, 0x6F	; 111
     a4e:	97 e1       	ldi	r25, 0x17	; 23
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	f1 f7       	brne	.-4      	; 0xa50 <PAGE3+0xa>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <PAGE3+0x10>
     a56:	00 00       	nop
		_delay_us(2000);
		LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     a58:	86 e0       	ldi	r24, 0x06	; 6
     a5a:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     a5e:	8b e2       	ldi	r24, 0x2B	; 43
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	f1 f7       	brne	.-4      	; 0xa62 <PAGE3+0x1c>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <PAGE3+0x22>
     a68:	00 00       	nop
		_delay_us(100);
		
		LCD_COMMAND(FIRST_LINE_START);
     a6a:	80 e8       	ldi	r24, 0x80	; 128
     a6c:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p3_1 , u8Statement_p3_1_size);
     a70:	61 e1       	ldi	r22, 0x11	; 17
     a72:	88 e4       	ldi	r24, 0x48	; 72
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
		
		LCD_COMMAND(SECOND_LINE_START);
     a7a:	80 ec       	ldi	r24, 0xC0	; 192
     a7c:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p3_2 , u8Statement_p3_2_size);
     a80:	61 e1       	ldi	r22, 0x11	; 17
     a82:	87 e3       	ldi	r24, 0x37	; 55
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
		
		do
		{
			BUTTON0_READ(&u8Button0_reading);
     a8a:	8a ed       	ldi	r24, 0xDA	; 218
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	0e 94 b5 08 	call	0x116a	; 0x116a <BUTTON0_READ>
			BUTTON2_READ(&u8Button2_reading);
     a92:	88 ed       	ldi	r24, 0xD8	; 216
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	0e 94 23 09 	call	0x1246	; 0x1246 <BUTTON2_READ>
			
		} while (u8Button0_reading == 0 && u8Button2_reading == 0);
     a9a:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <u8Button0_reading>
     a9e:	81 11       	cpse	r24, r1
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <PAGE3+0x64>
     aa2:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <u8Button2_reading>
     aa6:	88 23       	and	r24, r24
     aa8:	81 f3       	breq	.-32     	; 0xa8a <PAGE3+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aaa:	9f e7       	ldi	r25, 0x7F	; 127
     aac:	2c ef       	ldi	r18, 0xFC	; 252
     aae:	8a e0       	ldi	r24, 0x0A	; 10
     ab0:	91 50       	subi	r25, 0x01	; 1
     ab2:	20 40       	sbci	r18, 0x00	; 0
     ab4:	80 40       	sbci	r24, 0x00	; 0
     ab6:	e1 f7       	brne	.-8      	; 0xab0 <PAGE3+0x6a>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <PAGE3+0x74>
     aba:	00 00       	nop
		
		_delay_ms(DELAY_BETWEEN_ACTIONS_ms);
		
		if (u8Button0_reading != 0)
     abc:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <u8Button0_reading>
     ac0:	88 23       	and	r24, r24
     ac2:	e9 f0       	breq	.+58     	; 0xafe <PAGE3+0xb8>
		{
			LCD_COMMAND(CLEAR_DISPLAY);
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aca:	8f e6       	ldi	r24, 0x6F	; 111
     acc:	97 e1       	ldi	r25, 0x17	; 23
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <PAGE3+0x88>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <PAGE3+0x8e>
     ad4:	00 00       	nop
			_delay_us(2000);
			LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     ad6:	86 e0       	ldi	r24, 0x06	; 6
     ad8:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     adc:	8b e2       	ldi	r24, 0x2B	; 43
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	f1 f7       	brne	.-4      	; 0xae0 <PAGE3+0x9a>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <PAGE3+0xa0>
     ae6:	00 00       	nop
			_delay_us(100);
			
			LCD_COMMAND(FIRST_LINE_START);
     ae8:	80 e8       	ldi	r24, 0x80	; 128
     aea:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
			LCD_DATA_STRING(u8Statement_test , u8Statement_test_size);
     aee:	61 e1       	ldi	r22, 0x11	; 17
     af0:	80 eb       	ldi	r24, 0xB0	; 176
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
			
			BUZZER_FLICKER();
     af8:	0e 94 66 09 	call	0x12cc	; 0x12cc <BUZZER_FLICKER>
     afc:	a4 cf       	rjmp	.-184    	; 0xa46 <PAGE3>
		else if (u8Button2_reading != 0)
		{
			u8Next_page ++;
		}
		
	} while (u8Next_page == 0);
     afe:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <u8Button2_reading>
     b02:	88 23       	and	r24, r24
     b04:	09 f4       	brne	.+2      	; 0xb08 <PAGE3+0xc2>
     b06:	9f cf       	rjmp	.-194    	; 0xa46 <PAGE3>
	
}
     b08:	08 95       	ret

00000b0a <PAGE4>:

extern void PAGE4()
{
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	00 d0       	rcall	.+0      	; 0xb14 <PAGE4+0xa>
     b14:	00 d0       	rcall	.+0      	; 0xb16 <PAGE4+0xc>
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t u8Next_page = 0;
	
	uint8_t u8End = 0;
	
	uint16_t u16ADC0_reading= 0;
     b1a:	1a 82       	std	Y+2, r1	; 0x02
     b1c:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u16ADC1_reading= 0;
     b1e:	1c 82       	std	Y+4, r1	; 0x04
     b20:	1b 82       	std	Y+3, r1	; 0x03
{
	// 0) ADC  ... 2)Next
	
	uint8_t u8Next_page = 0;
	
	uint8_t u8End = 0;
     b22:	00 e0       	ldi	r16, 0x00	; 0
			do 
			{	
				ADC0_READ(&u16ADC0_reading);
				ADC1_READ(&u16ADC1_reading);
				
				u16ADC0_reading = u16ADC0_reading *  48/10;  // mv  4.78 is the actual voltage directed to AVREF NOT 5v
     b24:	10 e3       	ldi	r17, 0x30	; 48
	uint16_t u16ADC1_reading= 0;
	

	do
	{
		LCD_COMMAND(CLEAR_DISPLAY);
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     b2c:	8f e6       	ldi	r24, 0x6F	; 111
     b2e:	97 e1       	ldi	r25, 0x17	; 23
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	f1 f7       	brne	.-4      	; 0xb30 <PAGE4+0x26>
     b34:	00 c0       	rjmp	.+0      	; 0xb36 <PAGE4+0x2c>
     b36:	00 00       	nop
		_delay_us(2000);
		LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     b38:	86 e0       	ldi	r24, 0x06	; 6
     b3a:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     b3e:	8b e2       	ldi	r24, 0x2B	; 43
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	f1 f7       	brne	.-4      	; 0xb42 <PAGE4+0x38>
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <PAGE4+0x3e>
     b48:	00 00       	nop
		_delay_us(100);
		
		LCD_COMMAND(FIRST_LINE_START);
     b4a:	80 e8       	ldi	r24, 0x80	; 128
     b4c:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p4_1 , u8Statement_p4_1_size);
     b50:	61 e1       	ldi	r22, 0x11	; 17
     b52:	86 e2       	ldi	r24, 0x26	; 38
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
		
		LCD_COMMAND(SECOND_LINE_START);
     b5a:	80 ec       	ldi	r24, 0xC0	; 192
     b5c:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p4_2 , u8Statement_p4_2_size);
     b60:	61 e1       	ldi	r22, 0x11	; 17
     b62:	85 e1       	ldi	r24, 0x15	; 21
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
		
		do
		{
			BUTTON0_READ(&u8Button0_reading);
     b6a:	8a ed       	ldi	r24, 0xDA	; 218
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	0e 94 b5 08 	call	0x116a	; 0x116a <BUTTON0_READ>
			BUTTON2_READ(&u8Button2_reading);
     b72:	88 ed       	ldi	r24, 0xD8	; 216
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 23 09 	call	0x1246	; 0x1246 <BUTTON2_READ>
			
		} while (u8Button0_reading == 0 && u8Button2_reading == 0);
     b7a:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <u8Button0_reading>
     b7e:	81 11       	cpse	r24, r1
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <PAGE4+0x80>
     b82:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <u8Button2_reading>
     b86:	88 23       	and	r24, r24
     b88:	81 f3       	breq	.-32     	; 0xb6a <PAGE4+0x60>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b8a:	9f e7       	ldi	r25, 0x7F	; 127
     b8c:	2c ef       	ldi	r18, 0xFC	; 252
     b8e:	8a e0       	ldi	r24, 0x0A	; 10
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	20 40       	sbci	r18, 0x00	; 0
     b94:	80 40       	sbci	r24, 0x00	; 0
     b96:	e1 f7       	brne	.-8      	; 0xb90 <PAGE4+0x86>
     b98:	00 c0       	rjmp	.+0      	; 0xb9a <PAGE4+0x90>
     b9a:	00 00       	nop
		
		_delay_ms(DELAY_BETWEEN_ACTIONS_ms);
		
		if (u8Button0_reading != 0)
     b9c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <u8Button0_reading>
     ba0:	88 23       	and	r24, r24
     ba2:	09 f4       	brne	.+2      	; 0xba6 <PAGE4+0x9c>
     ba4:	8e c0       	rjmp	.+284    	; 0xcc2 <PAGE4+0x1b8>
		{
			LCD_COMMAND(CLEAR_DISPLAY);
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bac:	8f e6       	ldi	r24, 0x6F	; 111
     bae:	97 e1       	ldi	r25, 0x17	; 23
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	f1 f7       	brne	.-4      	; 0xbb0 <PAGE4+0xa6>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <PAGE4+0xac>
     bb6:	00 00       	nop
			_delay_us(2000);
			LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     bb8:	86 e0       	ldi	r24, 0x06	; 6
     bba:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     bbe:	8b e2       	ldi	r24, 0x2B	; 43
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <PAGE4+0xb8>
     bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <PAGE4+0xbe>
     bc8:	00 00       	nop
			_delay_us(100);
			do 
			{	
				ADC0_READ(&u16ADC0_reading);
     bca:	ce 01       	movw	r24, r28
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <ADC0_READ>
				ADC1_READ(&u16ADC1_reading);
     bd2:	ce 01       	movw	r24, r28
     bd4:	03 96       	adiw	r24, 0x03	; 3
     bd6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <ADC1_READ>
				
				u16ADC0_reading = u16ADC0_reading *  48/10;  // mv  4.78 is the actual voltage directed to AVREF NOT 5v
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	9a 81       	ldd	r25, Y+2	; 0x02
     bde:	18 9f       	mul	r17, r24
     be0:	90 01       	movw	r18, r0
     be2:	19 9f       	mul	r17, r25
     be4:	30 0d       	add	r19, r0
     be6:	11 24       	eor	r1, r1
     be8:	ad ec       	ldi	r26, 0xCD	; 205
     bea:	bc ec       	ldi	r27, 0xCC	; 204
     bec:	0e 94 05 10 	call	0x200a	; 0x200a <__umulhisi3>
     bf0:	ac 01       	movw	r20, r24
     bf2:	56 95       	lsr	r21
     bf4:	47 95       	ror	r20
     bf6:	56 95       	lsr	r21
     bf8:	47 95       	ror	r20
     bfa:	56 95       	lsr	r21
     bfc:	47 95       	ror	r20
     bfe:	5a 83       	std	Y+2, r21	; 0x02
     c00:	49 83       	std	Y+1, r20	; 0x01
				u16ADC1_reading = u16ADC1_reading * 48/10 ;  // mv
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	9c 81       	ldd	r25, Y+4	; 0x04
     c06:	18 9f       	mul	r17, r24
     c08:	90 01       	movw	r18, r0
     c0a:	19 9f       	mul	r17, r25
     c0c:	30 0d       	add	r19, r0
     c0e:	11 24       	eor	r1, r1
     c10:	0e 94 05 10 	call	0x200a	; 0x200a <__umulhisi3>
     c14:	96 95       	lsr	r25
     c16:	87 95       	ror	r24
     c18:	96 95       	lsr	r25
     c1a:	87 95       	ror	r24
     c1c:	96 95       	lsr	r25
     c1e:	87 95       	ror	r24
     c20:	9c 83       	std	Y+4, r25	; 0x04
     c22:	8b 83       	std	Y+3, r24	; 0x03
				
				ADC_VALUE_ANALYSE(u16ADC0_reading , u16ADC0_value);
     c24:	60 ed       	ldi	r22, 0xD0	; 208
     c26:	71 e0       	ldi	r23, 0x01	; 1
     c28:	ca 01       	movw	r24, r20
     c2a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <ADC_VALUE_ANALYSE>
				ADC_VALUE_ANALYSE(u16ADC1_reading , u16ADC1_value);
     c2e:	68 ec       	ldi	r22, 0xC8	; 200
     c30:	71 e0       	ldi	r23, 0x01	; 1
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <ADC_VALUE_ANALYSE>
				
				LCD_COMMAND(FIRST_LINE_START);
     c3a:	80 e8       	ldi	r24, 0x80	; 128
     c3c:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
				LCD_DATA_STRING(u8Statement_p4_1_1 , u8Statement_p4_1_1_size);
     c40:	68 e0       	ldi	r22, 0x08	; 8
     c42:	89 ec       	ldi	r24, 0xC9	; 201
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
				ADC_SHOW_VALUE(u16ADC0_value);
     c4a:	80 ed       	ldi	r24, 0xD0	; 208
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <ADC_SHOW_VALUE>
				LCD_DATA('v');
     c52:	86 e7       	ldi	r24, 0x76	; 118
     c54:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_DATA>

				LCD_COMMAND(SECOND_LINE_START);
     c58:	80 ec       	ldi	r24, 0xC0	; 192
     c5a:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
				LCD_DATA_STRING(u8Statement_p4_1_2 , u8Statement_p4_1_2_size);
     c5e:	68 e0       	ldi	r22, 0x08	; 8
     c60:	81 ec       	ldi	r24, 0xC1	; 193
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
				ADC_SHOW_VALUE(u16ADC1_value);
     c68:	88 ec       	ldi	r24, 0xC8	; 200
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <ADC_SHOW_VALUE>
				LCD_DATA('v');
     c70:	86 e7       	ldi	r24, 0x76	; 118
     c72:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_DATA>
									
				BUTTON0_READ(&u8Button0_reading);
     c76:	8a ed       	ldi	r24, 0xDA	; 218
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	0e 94 b5 08 	call	0x116a	; 0x116a <BUTTON0_READ>
				BUTTON1_READ(&u8Button1_reading);
     c7e:	89 ed       	ldi	r24, 0xD9	; 217
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <BUTTON1_READ>
				
				if (u8Button0_reading != 0 && u8Button1_reading != 0)
     c86:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <u8Button0_reading>
     c8a:	88 23       	and	r24, r24
     c8c:	21 f0       	breq	.+8      	; 0xc96 <PAGE4+0x18c>
     c8e:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <u8Button1_reading>
     c92:	81 11       	cpse	r24, r1
				{
					u8End ++;
     c94:	0f 5f       	subi	r16, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c96:	9f ef       	ldi	r25, 0xFF	; 255
     c98:	22 e5       	ldi	r18, 0x52	; 82
     c9a:	87 e0       	ldi	r24, 0x07	; 7
     c9c:	91 50       	subi	r25, 0x01	; 1
     c9e:	20 40       	sbci	r18, 0x00	; 0
     ca0:	80 40       	sbci	r24, 0x00	; 0
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <PAGE4+0x192>
     ca4:	00 c0       	rjmp	.+0      	; 0xca6 <PAGE4+0x19c>
     ca6:	00 00       	nop
				{
					
				}
				
				_delay_ms(200);
			} while (u8End == 0);
     ca8:	00 23       	and	r16, r16
     caa:	09 f4       	brne	.+2      	; 0xcae <PAGE4+0x1a4>
     cac:	8e cf       	rjmp	.-228    	; 0xbca <PAGE4+0xc0>
     cae:	9f e7       	ldi	r25, 0x7F	; 127
     cb0:	2c ef       	ldi	r18, 0xFC	; 252
     cb2:	8a e0       	ldi	r24, 0x0A	; 10
     cb4:	91 50       	subi	r25, 0x01	; 1
     cb6:	20 40       	sbci	r18, 0x00	; 0
     cb8:	80 40       	sbci	r24, 0x00	; 0
     cba:	e1 f7       	brne	.-8      	; 0xcb4 <PAGE4+0x1aa>
     cbc:	00 c0       	rjmp	.+0      	; 0xcbe <PAGE4+0x1b4>
     cbe:	00 00       	nop
     cc0:	32 cf       	rjmp	.-412    	; 0xb26 <PAGE4+0x1c>
		else if (u8Button2_reading != 0)
		{
			u8Next_page ++;
		}
		
	} while (u8Next_page == 0);
     cc2:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <u8Button2_reading>
     cc6:	88 23       	and	r24, r24
     cc8:	09 f4       	brne	.+2      	; 0xccc <PAGE4+0x1c2>
     cca:	2d cf       	rjmp	.-422    	; 0xb26 <PAGE4+0x1c>
	
}
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	08 95       	ret

00000cde <PAGE5>:


extern void PAGE5()
{
     cde:	2f 92       	push	r2
     ce0:	3f 92       	push	r3
     ce2:	4f 92       	push	r4
     ce4:	5f 92       	push	r5
     ce6:	6f 92       	push	r6
     ce8:	7f 92       	push	r7
     cea:	8f 92       	push	r8
     cec:	9f 92       	push	r9
     cee:	af 92       	push	r10
     cf0:	bf 92       	push	r11
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	28 97       	sbiw	r28, 0x08	; 8
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
	// 0)PWM  ... 2)Next
	
	uint8_t u8Next_page = 0;
	uint8_t u8End = 0;
	
	uint32_t u32ADC0_reading= 0;
     d12:	19 82       	std	Y+1, r1	; 0x01
     d14:	1a 82       	std	Y+2, r1	; 0x02
     d16:	1b 82       	std	Y+3, r1	; 0x03
     d18:	1c 82       	std	Y+4, r1	; 0x04
	uint32_t u32ADC1_reading= 0;
     d1a:	1d 82       	std	Y+5, r1	; 0x05
     d1c:	1e 82       	std	Y+6, r1	; 0x06
     d1e:	1f 82       	std	Y+7, r1	; 0x07
     d20:	18 86       	std	Y+8, r1	; 0x08
extern void PAGE5()
{
	// 0)PWM  ... 2)Next
	
	uint8_t u8Next_page = 0;
	uint8_t u8End = 0;
     d22:	91 2c       	mov	r9, r1
				{
					u32Duty_cycle_B = (u32ADC1_reading * 100) / 5000 ;
				} 
				else
				{
					u32Duty_cycle_B = 0;
     d24:	21 2c       	mov	r2, r1
     d26:	31 2c       	mov	r3, r1
     d28:	81 2c       	mov	r8, r1
	uint32_t u32Duty_cycle_B = 0 ;
	
	
	do
	{
		LCD_COMMAND(CLEAR_DISPLAY);
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d30:	8f e6       	ldi	r24, 0x6F	; 111
     d32:	97 e1       	ldi	r25, 0x17	; 23
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <PAGE5+0x56>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <PAGE5+0x5c>
     d3a:	00 00       	nop
		_delay_us(2000);
		LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     d3c:	86 e0       	ldi	r24, 0x06	; 6
     d3e:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     d42:	8b e2       	ldi	r24, 0x2B	; 43
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <PAGE5+0x68>
     d4a:	00 c0       	rjmp	.+0      	; 0xd4c <PAGE5+0x6e>
     d4c:	00 00       	nop
		_delay_us(100);
		
		LCD_COMMAND(FIRST_LINE_START);
     d4e:	80 e8       	ldi	r24, 0x80	; 128
     d50:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p5_1 , u8Statement_p5_1_size);
     d54:	61 e1       	ldi	r22, 0x11	; 17
     d56:	84 e0       	ldi	r24, 0x04	; 4
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
		
		LCD_COMMAND(SECOND_LINE_START);
     d5e:	80 ec       	ldi	r24, 0xC0	; 192
     d60:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p5_2 , u8Statement_p5_2_size);
     d64:	61 e1       	ldi	r22, 0x11	; 17
     d66:	83 ef       	ldi	r24, 0xF3	; 243
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
		
		do
		{
			BUTTON0_READ(&u8Button0_reading);
     d6e:	8a ed       	ldi	r24, 0xDA	; 218
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	0e 94 b5 08 	call	0x116a	; 0x116a <BUTTON0_READ>
			BUTTON2_READ(&u8Button2_reading);
     d76:	88 ed       	ldi	r24, 0xD8	; 216
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	0e 94 23 09 	call	0x1246	; 0x1246 <BUTTON2_READ>
			
		} while (u8Button0_reading == 0 && u8Button2_reading == 0);
     d7e:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <u8Button0_reading>
     d82:	81 11       	cpse	r24, r1
     d84:	04 c0       	rjmp	.+8      	; 0xd8e <PAGE5+0xb0>
     d86:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <u8Button2_reading>
     d8a:	88 23       	and	r24, r24
     d8c:	81 f3       	breq	.-32     	; 0xd6e <PAGE5+0x90>
		T1_PWM_INIT();
     d8e:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <T1_PWM_INIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d92:	9f e7       	ldi	r25, 0x7F	; 127
     d94:	2c ef       	ldi	r18, 0xFC	; 252
     d96:	8a e0       	ldi	r24, 0x0A	; 10
     d98:	91 50       	subi	r25, 0x01	; 1
     d9a:	20 40       	sbci	r18, 0x00	; 0
     d9c:	80 40       	sbci	r24, 0x00	; 0
     d9e:	e1 f7       	brne	.-8      	; 0xd98 <PAGE5+0xba>
     da0:	00 c0       	rjmp	.+0      	; 0xda2 <PAGE5+0xc4>
     da2:	00 00       	nop
		
		_delay_ms(DELAY_BETWEEN_ACTIONS_ms);
		
		if (u8Button0_reading != 0)
     da4:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <u8Button0_reading>
     da8:	88 23       	and	r24, r24
     daa:	09 f4       	brne	.+2      	; 0xdae <PAGE5+0xd0>
     dac:	d0 c0       	rjmp	.+416    	; 0xf4e <PAGE5+0x270>
		{
			LCD_COMMAND(CLEAR_DISPLAY);
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     db4:	8f e6       	ldi	r24, 0x6F	; 111
     db6:	97 e1       	ldi	r25, 0x17	; 23
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <PAGE5+0xda>
     dbc:	00 c0       	rjmp	.+0      	; 0xdbe <PAGE5+0xe0>
     dbe:	00 00       	nop
			_delay_us(2000);
			LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     dc0:	86 e0       	ldi	r24, 0x06	; 6
     dc2:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     dc6:	8b e2       	ldi	r24, 0x2B	; 43
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	f1 f7       	brne	.-4      	; 0xdca <PAGE5+0xec>
     dce:	00 c0       	rjmp	.+0      	; 0xdd0 <PAGE5+0xf2>
     dd0:	00 00       	nop
			_delay_us(100);
			
			do
			{
				ADC0_32_READ(&u32ADC0_reading);
     dd2:	ce 01       	movw	r24, r28
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <ADC0_32_READ>
				ADC1_32_READ(&u32ADC1_reading);
     dda:	ce 01       	movw	r24, r28
     ddc:	05 96       	adiw	r24, 0x05	; 5
     dde:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <ADC1_32_READ>
				
				u32ADC0_reading = u32ADC0_reading * 48/10;  // mv  4.78 is the actual voltage directed to AVREF NOT 5v
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	9a 81       	ldd	r25, Y+2	; 0x02
     de6:	ab 81       	ldd	r26, Y+3	; 0x03
     de8:	bc 81       	ldd	r27, Y+4	; 0x04
     dea:	ac 01       	movw	r20, r24
     dec:	bd 01       	movw	r22, r26
     dee:	44 0f       	add	r20, r20
     df0:	55 1f       	adc	r21, r21
     df2:	66 1f       	adc	r22, r22
     df4:	77 1f       	adc	r23, r23
     df6:	84 0f       	add	r24, r20
     df8:	95 1f       	adc	r25, r21
     dfa:	a6 1f       	adc	r26, r22
     dfc:	b7 1f       	adc	r27, r23
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	aa 1f       	adc	r26, r26
     e04:	bb 1f       	adc	r27, r27
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	aa 1f       	adc	r26, r26
     e0c:	bb 1f       	adc	r27, r27
     e0e:	bc 01       	movw	r22, r24
     e10:	cd 01       	movw	r24, r26
     e12:	66 0f       	add	r22, r22
     e14:	77 1f       	adc	r23, r23
     e16:	88 1f       	adc	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	66 0f       	add	r22, r22
     e1c:	77 1f       	adc	r23, r23
     e1e:	88 1f       	adc	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	2a e0       	ldi	r18, 0x0A	; 10
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	50 e0       	ldi	r21, 0x00	; 0
     e2a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__udivmodsi4>
     e2e:	69 01       	movw	r12, r18
     e30:	7a 01       	movw	r14, r20
     e32:	29 83       	std	Y+1, r18	; 0x01
     e34:	3a 83       	std	Y+2, r19	; 0x02
     e36:	4b 83       	std	Y+3, r20	; 0x03
     e38:	5c 83       	std	Y+4, r21	; 0x04
				u32ADC1_reading = u32ADC1_reading * 48/10;  // mv
     e3a:	8d 81       	ldd	r24, Y+5	; 0x05
     e3c:	9e 81       	ldd	r25, Y+6	; 0x06
     e3e:	af 81       	ldd	r26, Y+7	; 0x07
     e40:	b8 85       	ldd	r27, Y+8	; 0x08
     e42:	ac 01       	movw	r20, r24
     e44:	bd 01       	movw	r22, r26
     e46:	44 0f       	add	r20, r20
     e48:	55 1f       	adc	r21, r21
     e4a:	66 1f       	adc	r22, r22
     e4c:	77 1f       	adc	r23, r23
     e4e:	84 0f       	add	r24, r20
     e50:	95 1f       	adc	r25, r21
     e52:	a6 1f       	adc	r26, r22
     e54:	b7 1f       	adc	r27, r23
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	aa 1f       	adc	r26, r26
     e5c:	bb 1f       	adc	r27, r27
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	aa 1f       	adc	r26, r26
     e64:	bb 1f       	adc	r27, r27
     e66:	bc 01       	movw	r22, r24
     e68:	cd 01       	movw	r24, r26
     e6a:	66 0f       	add	r22, r22
     e6c:	77 1f       	adc	r23, r23
     e6e:	88 1f       	adc	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	66 0f       	add	r22, r22
     e74:	77 1f       	adc	r23, r23
     e76:	88 1f       	adc	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	2a e0       	ldi	r18, 0x0A	; 10
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__udivmodsi4>
     e86:	a2 2e       	mov	r10, r18
     e88:	b3 2e       	mov	r11, r19
     e8a:	04 2f       	mov	r16, r20
     e8c:	15 2f       	mov	r17, r21
     e8e:	42 2e       	mov	r4, r18
     e90:	53 2e       	mov	r5, r19
     e92:	64 2e       	mov	r6, r20
     e94:	75 2e       	mov	r7, r21
     e96:	2d 83       	std	Y+5, r18	; 0x05
     e98:	3e 83       	std	Y+6, r19	; 0x06
     e9a:	4f 83       	std	Y+7, r20	; 0x07
     e9c:	58 87       	std	Y+8, r21	; 0x08
				
				if (u32ADC0_reading >= 50 )
     e9e:	92 e3       	ldi	r25, 0x32	; 50
     ea0:	c9 16       	cp	r12, r25
     ea2:	d1 04       	cpc	r13, r1
     ea4:	e1 04       	cpc	r14, r1
     ea6:	f1 04       	cpc	r15, r1
     ea8:	88 f0       	brcs	.+34     	; 0xecc <PAGE5+0x1ee>
				{
					u32Duty_cycle_A = (u32ADC0_reading * 100) / 5000 ;
     eaa:	a4 e6       	ldi	r26, 0x64	; 100
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	a7 01       	movw	r20, r14
     eb0:	96 01       	movw	r18, r12
     eb2:	0e 94 14 10 	call	0x2028	; 0x2028 <__muluhisi3>
     eb6:	28 e8       	ldi	r18, 0x88	; 136
     eb8:	33 e1       	ldi	r19, 0x13	; 19
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__udivmodsi4>
     ec2:	c2 2e       	mov	r12, r18
     ec4:	d3 2e       	mov	r13, r19
     ec6:	e4 2e       	mov	r14, r20
     ec8:	f5 2e       	mov	r15, r21
     eca:	04 c0       	rjmp	.+8      	; 0xed4 <PAGE5+0x1f6>
				} 
				else
				{
					u32Duty_cycle_A = 0;
     ecc:	c2 2c       	mov	r12, r2
     ece:	d3 2c       	mov	r13, r3
     ed0:	e8 2c       	mov	r14, r8
     ed2:	f1 2c       	mov	r15, r1
				}
				
				if (u32ADC1_reading >= 50 )
     ed4:	22 e3       	ldi	r18, 0x32	; 50
     ed6:	42 16       	cp	r4, r18
     ed8:	51 04       	cpc	r5, r1
     eda:	61 04       	cpc	r6, r1
     edc:	71 04       	cpc	r7, r1
     ede:	78 f0       	brcs	.+30     	; 0xefe <PAGE5+0x220>
				{
					u32Duty_cycle_B = (u32ADC1_reading * 100) / 5000 ;
     ee0:	a4 e6       	ldi	r26, 0x64	; 100
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	2a 2d       	mov	r18, r10
     ee6:	3b 2d       	mov	r19, r11
     ee8:	40 2f       	mov	r20, r16
     eea:	51 2f       	mov	r21, r17
     eec:	0e 94 14 10 	call	0x2028	; 0x2028 <__muluhisi3>
     ef0:	28 e8       	ldi	r18, 0x88	; 136
     ef2:	33 e1       	ldi	r19, 0x13	; 19
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__udivmodsi4>
     efc:	04 c0       	rjmp	.+8      	; 0xf06 <PAGE5+0x228>
				} 
				else
				{
					u32Duty_cycle_B = 0;
     efe:	22 2d       	mov	r18, r2
     f00:	33 2d       	mov	r19, r3
     f02:	48 2d       	mov	r20, r8
     f04:	50 e0       	ldi	r21, 0x00	; 0
				}
				
				T1_PWM_DUTY_CYCLE(u32Duty_cycle_A , u32Duty_cycle_B);
     f06:	6c 2d       	mov	r22, r12
     f08:	7d 2d       	mov	r23, r13
     f0a:	8e 2d       	mov	r24, r14
     f0c:	9f 2d       	mov	r25, r15
     f0e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <T1_PWM_DUTY_CYCLE>
				
				BUTTON2_READ(&u8Button2_reading);
     f12:	88 ed       	ldi	r24, 0xD8	; 216
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	0e 94 23 09 	call	0x1246	; 0x1246 <BUTTON2_READ>
				
				if (u8Button2_reading != 0 )
     f1a:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <u8Button2_reading>
     f1e:	81 11       	cpse	r24, r1
				{
					u8End ++;
     f20:	93 94       	inc	r9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f22:	8f ef       	ldi	r24, 0xFF	; 255
     f24:	92 e5       	ldi	r25, 0x52	; 82
     f26:	27 e0       	ldi	r18, 0x07	; 7
     f28:	81 50       	subi	r24, 0x01	; 1
     f2a:	90 40       	sbci	r25, 0x00	; 0
     f2c:	20 40       	sbci	r18, 0x00	; 0
     f2e:	e1 f7       	brne	.-8      	; 0xf28 <PAGE5+0x24a>
     f30:	00 c0       	rjmp	.+0      	; 0xf32 <PAGE5+0x254>
     f32:	00 00       	nop
				{
					
				}
				
				_delay_ms(200);
			} while (u8End == 0);
     f34:	99 20       	and	r9, r9
     f36:	09 f4       	brne	.+2      	; 0xf3a <PAGE5+0x25c>
     f38:	4c cf       	rjmp	.-360    	; 0xdd2 <PAGE5+0xf4>
     f3a:	8f e7       	ldi	r24, 0x7F	; 127
     f3c:	9c ef       	ldi	r25, 0xFC	; 252
     f3e:	2a e0       	ldi	r18, 0x0A	; 10
     f40:	81 50       	subi	r24, 0x01	; 1
     f42:	90 40       	sbci	r25, 0x00	; 0
     f44:	20 40       	sbci	r18, 0x00	; 0
     f46:	e1 f7       	brne	.-8      	; 0xf40 <PAGE5+0x262>
     f48:	00 c0       	rjmp	.+0      	; 0xf4a <PAGE5+0x26c>
     f4a:	00 00       	nop
     f4c:	ee ce       	rjmp	.-548    	; 0xd2a <PAGE5+0x4c>
		else if (u8Button2_reading != 0)
		{
			u8Next_page ++;
		}
		
	} while (u8Next_page == 0);
     f4e:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <u8Button2_reading>
     f52:	88 23       	and	r24, r24
     f54:	09 f4       	brne	.+2      	; 0xf58 <PAGE5+0x27a>
     f56:	e9 ce       	rjmp	.-558    	; 0xd2a <PAGE5+0x4c>
	
	T1_PWM_DEINIT();
     f58:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <T1_PWM_DEINIT>
}
     f5c:	28 96       	adiw	r28, 0x08	; 8
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	bf 90       	pop	r11
     f7a:	af 90       	pop	r10
     f7c:	9f 90       	pop	r9
     f7e:	8f 90       	pop	r8
     f80:	7f 90       	pop	r7
     f82:	6f 90       	pop	r6
     f84:	5f 90       	pop	r5
     f86:	4f 90       	pop	r4
     f88:	3f 90       	pop	r3
     f8a:	2f 90       	pop	r2
     f8c:	08 95       	ret

00000f8e <PAGE6>:

extern void PAGE6()
{
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
	
	uint8_t u8Duty_cycle_A = 0 ;
	uint8_t u8Duty_cycle_B = 0 ;
	
	uint8_t u8PWM_A_value = 0;
	uint8_t u8PWM_B_value = 0;
     f98:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t u8End = 0;
	
	uint8_t u8Duty_cycle_A = 0 ;
	uint8_t u8Duty_cycle_B = 0 ;
	
	uint8_t u8PWM_A_value = 0;
     f9a:	c0 e0       	ldi	r28, 0x00	; 0
{
	uint8_t u8Next_page = 0;
	uint8_t u8End = 0;
	
	uint8_t u8Duty_cycle_A = 0 ;
	uint8_t u8Duty_cycle_B = 0 ;
     f9c:	10 e0       	ldi	r17, 0x00	; 0
extern void PAGE6()
{
	uint8_t u8Next_page = 0;
	uint8_t u8End = 0;
	
	uint8_t u8Duty_cycle_A = 0 ;
     f9e:	d0 e0       	ldi	r29, 0x00	; 0
}

extern void PAGE6()
{
	uint8_t u8Next_page = 0;
	uint8_t u8End = 0;
     fa0:	f1 2c       	mov	r15, r1
	uint8_t u8PWM_A_value = 0;
	uint8_t u8PWM_B_value = 0;
	
	do
	{
		LCD_COMMAND(CLEAR_DISPLAY);
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fa8:	8f e6       	ldi	r24, 0x6F	; 111
     faa:	97 e1       	ldi	r25, 0x17	; 23
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	f1 f7       	brne	.-4      	; 0xfac <PAGE6+0x1e>
     fb0:	00 c0       	rjmp	.+0      	; 0xfb2 <PAGE6+0x24>
     fb2:	00 00       	nop
		_delay_us(2000);
		LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     fb4:	86 e0       	ldi	r24, 0x06	; 6
     fb6:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
     fba:	8b e2       	ldi	r24, 0x2B	; 43
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <PAGE6+0x30>
     fc2:	00 c0       	rjmp	.+0      	; 0xfc4 <PAGE6+0x36>
     fc4:	00 00       	nop
		_delay_us(100);
		
		LCD_COMMAND(FIRST_LINE_START);
     fc6:	80 e8       	ldi	r24, 0x80	; 128
     fc8:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p6_1 , u8Statement_p6_1_size);
     fcc:	61 e1       	ldi	r22, 0x11	; 17
     fce:	82 ee       	ldi	r24, 0xE2	; 226
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
		
		LCD_COMMAND(SECOND_LINE_START);
     fd6:	80 ec       	ldi	r24, 0xC0	; 192
     fd8:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p6_2 , u8Statement_p6_2_size);
     fdc:	61 e1       	ldi	r22, 0x11	; 17
     fde:	81 ed       	ldi	r24, 0xD1	; 209
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_DATA_STRING>
		
		do
		{
			BUTTON0_READ(&u8Button0_reading);
     fe6:	8a ed       	ldi	r24, 0xDA	; 218
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	0e 94 b5 08 	call	0x116a	; 0x116a <BUTTON0_READ>
			BUTTON2_READ(&u8Button2_reading);
     fee:	88 ed       	ldi	r24, 0xD8	; 216
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	0e 94 23 09 	call	0x1246	; 0x1246 <BUTTON2_READ>
			
		} while (u8Button0_reading == 0 && u8Button2_reading == 0);
     ff6:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <u8Button0_reading>
     ffa:	81 11       	cpse	r24, r1
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <PAGE6+0x78>
     ffe:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <u8Button2_reading>
    1002:	88 23       	and	r24, r24
    1004:	81 f3       	breq	.-32     	; 0xfe6 <PAGE6+0x58>
		T1_PWM_INIT();
    1006:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <T1_PWM_INIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    100a:	9f e7       	ldi	r25, 0x7F	; 127
    100c:	2c ef       	ldi	r18, 0xFC	; 252
    100e:	8a e0       	ldi	r24, 0x0A	; 10
    1010:	91 50       	subi	r25, 0x01	; 1
    1012:	20 40       	sbci	r18, 0x00	; 0
    1014:	80 40       	sbci	r24, 0x00	; 0
    1016:	e1 f7       	brne	.-8      	; 0x1010 <PAGE6+0x82>
    1018:	00 c0       	rjmp	.+0      	; 0x101a <PAGE6+0x8c>
    101a:	00 00       	nop
		
		_delay_ms(DELAY_BETWEEN_ACTIONS_ms);
		
		if (u8Button0_reading != 0)
    101c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <u8Button0_reading>
    1020:	88 23       	and	r24, r24
    1022:	09 f4       	brne	.+2      	; 0x1026 <PAGE6+0x98>
    1024:	88 c0       	rjmp	.+272    	; 0x1136 <PAGE6+0x1a8>
		{
			LCD_COMMAND(CLEAR_DISPLAY);
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    102c:	8f e6       	ldi	r24, 0x6F	; 111
    102e:	97 e1       	ldi	r25, 0x17	; 23
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <PAGE6+0xa2>
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <PAGE6+0xa8>
    1036:	00 00       	nop
			_delay_us(2000);
			LCD_COMMAND(SHIFT_CURSOR_RIGHT);
    1038:	86 e0       	ldi	r24, 0x06	; 6
    103a:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
    103e:	8b e2       	ldi	r24, 0x2B	; 43
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <PAGE6+0xb4>
    1046:	00 c0       	rjmp	.+0      	; 0x1048 <PAGE6+0xba>
    1048:	00 00       	nop
			_delay_us(100);
			
			do
			{
				LCD_COMMAND(FIRST_LINE_START);
    104a:	80 e8       	ldi	r24, 0x80	; 128
    104c:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
				LCD_DATA(u8PWM_A_value);
    1050:	8c 2f       	mov	r24, r28
    1052:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_DATA>
				LCD_DATA(' ');
    1056:	80 e2       	ldi	r24, 0x20	; 32
    1058:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_DATA>
				LCD_DATA('+');
    105c:	8b e2       	ldi	r24, 0x2B	; 43
    105e:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_DATA>
				
				LCD_COMMAND(SECOND_LINE_START);
    1062:	80 ec       	ldi	r24, 0xC0	; 192
    1064:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
				LCD_DATA(u8PWM_B_value);
    1068:	80 2f       	mov	r24, r16
    106a:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_DATA>
				LCD_DATA(' ');
    106e:	80 e2       	ldi	r24, 0x20	; 32
    1070:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_DATA>
				LCD_DATA('-');
    1074:	8d e2       	ldi	r24, 0x2D	; 45
    1076:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_DATA>
				
				
				BUTTON0_READ(&u8Button0_reading);
    107a:	8a ed       	ldi	r24, 0xDA	; 218
    107c:	91 e0       	ldi	r25, 0x01	; 1
    107e:	0e 94 b5 08 	call	0x116a	; 0x116a <BUTTON0_READ>
				BUTTON1_READ(&u8Button1_reading);
    1082:	89 ed       	ldi	r24, 0xD9	; 217
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <BUTTON1_READ>
				BUTTON2_READ(&u8Button2_reading);
    108a:	88 ed       	ldi	r24, 0xD8	; 216
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	0e 94 23 09 	call	0x1246	; 0x1246 <BUTTON2_READ>
				
				T1_PWM_DUTY_CYCLE(u8Duty_cycle_A , u8Duty_cycle_B);
    1092:	41 2f       	mov	r20, r17
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	8d 2f       	mov	r24, r29
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	a0 e0       	ldi	r26, 0x00	; 0
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	9a 01       	movw	r18, r20
    10a4:	ab 01       	movw	r20, r22
    10a6:	bc 01       	movw	r22, r24
    10a8:	cd 01       	movw	r24, r26
    10aa:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <T1_PWM_DUTY_CYCLE>
				
				if (u8Button0_reading != 0)
    10ae:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <u8Button0_reading>
    10b2:	88 23       	and	r24, r24
    10b4:	89 f0       	breq	.+34     	; 0x10d8 <PAGE6+0x14a>
				{
					if (u8PWM_A_value <= 9)
    10b6:	ca 30       	cpi	r28, 0x0A	; 10
    10b8:	40 f5       	brcc	.+80     	; 0x110a <PAGE6+0x17c>
					{
						u8PWM_A_value ++ ;
    10ba:	cf 5f       	subi	r28, 0xFF	; 255
						u8PWM_B_value ++ ;
    10bc:	0f 5f       	subi	r16, 0xFF	; 255
						
						u8Duty_cycle_A = u8PWM_A_value * 10 ;
    10be:	8c 2f       	mov	r24, r28
    10c0:	88 0f       	add	r24, r24
    10c2:	d8 2f       	mov	r29, r24
    10c4:	dd 0f       	add	r29, r29
    10c6:	dd 0f       	add	r29, r29
    10c8:	d8 0f       	add	r29, r24
						u8Duty_cycle_B = u8PWM_B_value * 10 ;
    10ca:	80 2f       	mov	r24, r16
    10cc:	88 0f       	add	r24, r24
    10ce:	18 2f       	mov	r17, r24
    10d0:	11 0f       	add	r17, r17
    10d2:	11 0f       	add	r17, r17
    10d4:	18 0f       	add	r17, r24
    10d6:	19 c0       	rjmp	.+50     	; 0x110a <PAGE6+0x17c>
					else
					{
						
					}
				}
				else if (u8Button1_reading != 0)
    10d8:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <u8Button1_reading>
    10dc:	88 23       	and	r24, r24
    10de:	89 f0       	breq	.+34     	; 0x1102 <PAGE6+0x174>
				{
					if (u8PWM_A_value != 0)
    10e0:	cc 23       	and	r28, r28
    10e2:	99 f0       	breq	.+38     	; 0x110a <PAGE6+0x17c>
					{
						u8PWM_A_value -- ;
    10e4:	c1 50       	subi	r28, 0x01	; 1
						u8PWM_B_value -- ;
    10e6:	01 50       	subi	r16, 0x01	; 1
						
						u8Duty_cycle_A = u8PWM_A_value * 10 ;
    10e8:	8c 2f       	mov	r24, r28
    10ea:	88 0f       	add	r24, r24
    10ec:	d8 2f       	mov	r29, r24
    10ee:	dd 0f       	add	r29, r29
    10f0:	dd 0f       	add	r29, r29
    10f2:	d8 0f       	add	r29, r24
						u8Duty_cycle_B = u8PWM_B_value * 10 ;
    10f4:	80 2f       	mov	r24, r16
    10f6:	88 0f       	add	r24, r24
    10f8:	18 2f       	mov	r17, r24
    10fa:	11 0f       	add	r17, r17
    10fc:	11 0f       	add	r17, r17
    10fe:	18 0f       	add	r17, r24
    1100:	04 c0       	rjmp	.+8      	; 0x110a <PAGE6+0x17c>
					else
					{
						
					}
				}
				else if (u8Button2_reading != 0)
    1102:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <u8Button2_reading>
    1106:	81 11       	cpse	r24, r1
				{
					u8End ++ ;
    1108:	f3 94       	inc	r15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    110a:	9f ef       	ldi	r25, 0xFF	; 255
    110c:	22 e5       	ldi	r18, 0x52	; 82
    110e:	87 e0       	ldi	r24, 0x07	; 7
    1110:	91 50       	subi	r25, 0x01	; 1
    1112:	20 40       	sbci	r18, 0x00	; 0
    1114:	80 40       	sbci	r24, 0x00	; 0
    1116:	e1 f7       	brne	.-8      	; 0x1110 <PAGE6+0x182>
    1118:	00 c0       	rjmp	.+0      	; 0x111a <PAGE6+0x18c>
    111a:	00 00       	nop
				}
				
				
				_delay_ms(200);
			} while (u8End == 0);
    111c:	ff 20       	and	r15, r15
    111e:	09 f4       	brne	.+2      	; 0x1122 <PAGE6+0x194>
    1120:	94 cf       	rjmp	.-216    	; 0x104a <PAGE6+0xbc>
    1122:	9f e7       	ldi	r25, 0x7F	; 127
    1124:	2c ef       	ldi	r18, 0xFC	; 252
    1126:	8a e0       	ldi	r24, 0x0A	; 10
    1128:	91 50       	subi	r25, 0x01	; 1
    112a:	20 40       	sbci	r18, 0x00	; 0
    112c:	80 40       	sbci	r24, 0x00	; 0
    112e:	e1 f7       	brne	.-8      	; 0x1128 <PAGE6+0x19a>
    1130:	00 c0       	rjmp	.+0      	; 0x1132 <PAGE6+0x1a4>
    1132:	00 00       	nop
    1134:	36 cf       	rjmp	.-404    	; 0xfa2 <PAGE6+0x14>
		else if (u8Button2_reading != 0)
		{
			u8Next_page ++;
		}
		
	} while (u8Next_page == 0);
    1136:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <u8Button2_reading>
    113a:	88 23       	and	r24, r24
    113c:	09 f4       	brne	.+2      	; 0x1140 <PAGE6+0x1b2>
    113e:	31 cf       	rjmp	.-414    	; 0xfa2 <PAGE6+0x14>
	
	T1_PWM_DEINIT();
    1140:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <T1_PWM_DEINIT>
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	ff 90       	pop	r15
    114e:	08 95       	ret

00001150 <LCD_TEST>:
static uint16_t u16ADC0_value[4] = {0};
static uint16_t u16ADC1_value[4] = {0};

extern void LCD_TEST()
{
	HOME_PAGE();
    1150:	0e 94 64 04 	call	0x8c8	; 0x8c8 <HOME_PAGE>
	PAGE2();
    1154:	0e 94 98 04 	call	0x930	; 0x930 <PAGE2>
	PAGE3();
    1158:	0e 94 23 05 	call	0xa46	; 0xa46 <PAGE3>
	PAGE4();
    115c:	0e 94 85 05 	call	0xb0a	; 0xb0a <PAGE4>
	PAGE5();
    1160:	0e 94 6f 06 	call	0xcde	; 0xcde <PAGE5>
	PAGE6();
    1164:	0e 94 c7 07 	call	0xf8e	; 0xf8e <PAGE6>
    1168:	08 95       	ret

0000116a <BUTTON0_READ>:
 */ 

#include "BUTTON_INTERFACE.h"

extern void BUTTON0_READ(uint8_t *pu8Reading)
{
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	1f 92       	push	r1
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	7c 01       	movw	r14, r24
	uint8_t u8Temp = 0;
    117e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Num_of_correct_checks = 0;
	
	Pin_read(BUTTON0_PIN , BUTTON0_PIN_NUMBER , &u8Temp);
    1180:	ae 01       	movw	r20, r28
    1182:	4f 5f       	subi	r20, 0xFF	; 255
    1184:	5f 4f       	sbci	r21, 0xFF	; 255
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	80 e3       	ldi	r24, 0x30	; 48
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
	
	if (u8Temp != 0)
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	88 23       	and	r24, r24
    1194:	b9 f0       	breq	.+46     	; 0x11c4 <BUTTON0_READ+0x5a>
    1196:	16 e9       	ldi	r17, 0x96	; 150
    1198:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
		{
			Pin_read(BUTTON0_PIN , BUTTON0_PIN_NUMBER , &u8Temp);
    119a:	ae 01       	movw	r20, r28
    119c:	4f 5f       	subi	r20, 0xFF	; 255
    119e:	5f 4f       	sbci	r21, 0xFF	; 255
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	80 e3       	ldi	r24, 0x30	; 48
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
			
			if (u8Temp != 0)
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	81 11       	cpse	r24, r1
			{
				u8Num_of_correct_checks ++ ;
    11ae:	0f 5f       	subi	r16, 0xFF	; 255
    11b0:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(BUTTON0_PIN , BUTTON0_PIN_NUMBER , &u8Temp);
	
	if (u8Temp != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
    11b2:	99 f7       	brne	.-26     	; 0x119a <BUTTON0_READ+0x30>
			{
				
			}
		}
		
		if (u8Num_of_correct_checks == NUMBER_OF_CHECKS)
    11b4:	06 39       	cpi	r16, 0x96	; 150
    11b6:	19 f4       	brne	.+6      	; 0x11be <BUTTON0_READ+0x54>
		{
			*pu8Reading = u8Temp;
    11b8:	f7 01       	movw	r30, r14
    11ba:	80 83       	st	Z, r24
    11bc:	05 c0       	rjmp	.+10     	; 0x11c8 <BUTTON0_READ+0x5e>
		}
		else
		{
			*pu8Reading = 0;
    11be:	f7 01       	movw	r30, r14
    11c0:	10 82       	st	Z, r1
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <BUTTON0_READ+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
    11c4:	f7 01       	movw	r30, r14
    11c6:	10 82       	st	Z, r1
	}
	
}
    11c8:	0f 90       	pop	r0
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	ff 90       	pop	r15
    11d4:	ef 90       	pop	r14
    11d6:	08 95       	ret

000011d8 <BUTTON1_READ>:

extern void BUTTON1_READ(uint8_t *pu8Reading)
{
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	1f 92       	push	r1
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	7c 01       	movw	r14, r24
	uint8_t u8Temp = 0;
    11ec:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Num_of_correct_checks = 0;
	
	Pin_read(BUTTON1_PIN , BUTTON1_PIN_NUMBER , &u8Temp);
    11ee:	ae 01       	movw	r20, r28
    11f0:	4f 5f       	subi	r20, 0xFF	; 255
    11f2:	5f 4f       	sbci	r21, 0xFF	; 255
    11f4:	61 e0       	ldi	r22, 0x01	; 1
    11f6:	80 e3       	ldi	r24, 0x30	; 48
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
	
	if (u8Temp != 0)
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	88 23       	and	r24, r24
    1202:	b9 f0       	breq	.+46     	; 0x1232 <BUTTON1_READ+0x5a>
    1204:	16 e9       	ldi	r17, 0x96	; 150
    1206:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
		{
			Pin_read(BUTTON1_PIN , BUTTON1_PIN_NUMBER , &u8Temp);
    1208:	ae 01       	movw	r20, r28
    120a:	4f 5f       	subi	r20, 0xFF	; 255
    120c:	5f 4f       	sbci	r21, 0xFF	; 255
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	80 e3       	ldi	r24, 0x30	; 48
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
			
			if (u8Temp != 0)
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	81 11       	cpse	r24, r1
			{
				u8Num_of_correct_checks ++ ;
    121c:	0f 5f       	subi	r16, 0xFF	; 255
    121e:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(BUTTON1_PIN , BUTTON1_PIN_NUMBER , &u8Temp);
	
	if (u8Temp != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
    1220:	99 f7       	brne	.-26     	; 0x1208 <BUTTON1_READ+0x30>
			{
				
			}
		}
		
		if (u8Num_of_correct_checks == NUMBER_OF_CHECKS)
    1222:	06 39       	cpi	r16, 0x96	; 150
    1224:	19 f4       	brne	.+6      	; 0x122c <BUTTON1_READ+0x54>
		{
			*pu8Reading = u8Temp;
    1226:	f7 01       	movw	r30, r14
    1228:	80 83       	st	Z, r24
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <BUTTON1_READ+0x5e>
		}
		else
		{
			*pu8Reading = 0;
    122c:	f7 01       	movw	r30, r14
    122e:	10 82       	st	Z, r1
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <BUTTON1_READ+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
    1232:	f7 01       	movw	r30, r14
    1234:	10 82       	st	Z, r1
	}
}
    1236:	0f 90       	pop	r0
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	08 95       	ret

00001246 <BUTTON2_READ>:

extern void BUTTON2_READ(uint8_t *pu8Reading)
{
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	1f 92       	push	r1
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	7c 01       	movw	r14, r24
	uint8_t u8Temp = 0;
    125a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Num_of_correct_checks = 0;
	
	Pin_read(BUTTON2_PIN , BUTTON2_PIN_NUMBER , &u8Temp);
    125c:	ae 01       	movw	r20, r28
    125e:	4f 5f       	subi	r20, 0xFF	; 255
    1260:	5f 4f       	sbci	r21, 0xFF	; 255
    1262:	62 e0       	ldi	r22, 0x02	; 2
    1264:	80 e3       	ldi	r24, 0x30	; 48
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
	
	if (u8Temp != 0)
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	88 23       	and	r24, r24
    1270:	b9 f0       	breq	.+46     	; 0x12a0 <BUTTON2_READ+0x5a>
    1272:	16 e9       	ldi	r17, 0x96	; 150
    1274:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
		{
			Pin_read(BUTTON2_PIN , BUTTON2_PIN_NUMBER , &u8Temp);
    1276:	ae 01       	movw	r20, r28
    1278:	4f 5f       	subi	r20, 0xFF	; 255
    127a:	5f 4f       	sbci	r21, 0xFF	; 255
    127c:	62 e0       	ldi	r22, 0x02	; 2
    127e:	80 e3       	ldi	r24, 0x30	; 48
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
			
			if (u8Temp != 0)
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	81 11       	cpse	r24, r1
			{
				u8Num_of_correct_checks ++ ;
    128a:	0f 5f       	subi	r16, 0xFF	; 255
    128c:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(BUTTON2_PIN , BUTTON2_PIN_NUMBER , &u8Temp);
	
	if (u8Temp != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
    128e:	99 f7       	brne	.-26     	; 0x1276 <BUTTON2_READ+0x30>
			{
				
			}
		}
		
		if (u8Num_of_correct_checks == NUMBER_OF_CHECKS)
    1290:	06 39       	cpi	r16, 0x96	; 150
    1292:	19 f4       	brne	.+6      	; 0x129a <BUTTON2_READ+0x54>
		{
			*pu8Reading = u8Temp;
    1294:	f7 01       	movw	r30, r14
    1296:	80 83       	st	Z, r24
    1298:	05 c0       	rjmp	.+10     	; 0x12a4 <BUTTON2_READ+0x5e>
		}
		else
		{
			*pu8Reading = 0;
    129a:	f7 01       	movw	r30, r14
    129c:	10 82       	st	Z, r1
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <BUTTON2_READ+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
    12a0:	f7 01       	movw	r30, r14
    12a2:	10 82       	st	Z, r1
	}
    12a4:	0f 90       	pop	r0
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	08 95       	ret

000012b4 <BUZZER_ON>:
 */ 
#include "BUZZER_INTERFACE.h"

extern void BUZZER_ON()
{
	Pin_set(BUZZER_PORT , BUZZER_PIN_NUMBER);
    12b4:	64 e0       	ldi	r22, 0x04	; 4
    12b6:	82 e3       	ldi	r24, 0x32	; 50
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Pin_set>
    12be:	08 95       	ret

000012c0 <BUZZER_OFF>:
}

extern void BUZZER_OFF()
{
	Pin_reset(BUZZER_PORT , BUZZER_PIN_NUMBER);
    12c0:	64 e0       	ldi	r22, 0x04	; 4
    12c2:	82 e3       	ldi	r24, 0x32	; 50
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
    12ca:	08 95       	ret

000012cc <BUZZER_FLICKER>:
}

extern void BUZZER_FLICKER()
{
    12cc:	cf 93       	push	r28
    12ce:	c3 e0       	ldi	r28, 0x03	; 3
	uint8_t u8Count = 0;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_BUZZER_FLICKERS ; u8Count ++)
	{
		BUZZER_ON();
    12d0:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <BUZZER_ON>
    12d4:	2f e7       	ldi	r18, 0x7F	; 127
    12d6:	8c ef       	ldi	r24, 0xFC	; 252
    12d8:	9a e0       	ldi	r25, 0x0A	; 10
    12da:	21 50       	subi	r18, 0x01	; 1
    12dc:	80 40       	sbci	r24, 0x00	; 0
    12de:	90 40       	sbci	r25, 0x00	; 0
    12e0:	e1 f7       	brne	.-8      	; 0x12da <BUZZER_FLICKER+0xe>
    12e2:	00 c0       	rjmp	.+0      	; 0x12e4 <BUZZER_FLICKER+0x18>
    12e4:	00 00       	nop
		_delay_ms(BUZZER_FLICKERING_PERIOD);
		BUZZER_OFF();
    12e6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <BUZZER_OFF>
    12ea:	2f e7       	ldi	r18, 0x7F	; 127
    12ec:	8c ef       	ldi	r24, 0xFC	; 252
    12ee:	9a e0       	ldi	r25, 0x0A	; 10
    12f0:	21 50       	subi	r18, 0x01	; 1
    12f2:	80 40       	sbci	r24, 0x00	; 0
    12f4:	90 40       	sbci	r25, 0x00	; 0
    12f6:	e1 f7       	brne	.-8      	; 0x12f0 <BUZZER_FLICKER+0x24>
    12f8:	00 c0       	rjmp	.+0      	; 0x12fa <BUZZER_FLICKER+0x2e>
    12fa:	00 00       	nop
    12fc:	c1 50       	subi	r28, 0x01	; 1

extern void BUZZER_FLICKER()
{
	uint8_t u8Count = 0;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_BUZZER_FLICKERS ; u8Count ++)
    12fe:	41 f7       	brne	.-48     	; 0x12d0 <BUZZER_FLICKER+0x4>
		BUZZER_ON();
		_delay_ms(BUZZER_FLICKERING_PERIOD);
		BUZZER_OFF();
		_delay_ms(BUZZER_FLICKERING_PERIOD);
	}
    1300:	cf 91       	pop	r28
    1302:	08 95       	ret

00001304 <POWER_ROW1>:

#include "KEYPAD_INTERFACE.h"

extern void POWER_ROW1()
{
	Pin_set(ROW1_PORT , ROW1_PIN_NUMBER);
    1304:	64 e0       	ldi	r22, 0x04	; 4
    1306:	85 e3       	ldi	r24, 0x35	; 53
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Pin_set>
    130e:	08 95       	ret

00001310 <POWER_ROW2>:
}

extern void POWER_ROW2()
{
	Pin_set(ROW2_PORT , ROW2_PIN_NUMBER);
    1310:	65 e0       	ldi	r22, 0x05	; 5
    1312:	85 e3       	ldi	r24, 0x35	; 53
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Pin_set>
    131a:	08 95       	ret

0000131c <POWER_ROW3>:
}

extern void POWER_ROW3()
{
	Pin_set(ROW3_PORT , ROW3_PIN_NUMBER);
    131c:	66 e0       	ldi	r22, 0x06	; 6
    131e:	85 e3       	ldi	r24, 0x35	; 53
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Pin_set>
    1326:	08 95       	ret

00001328 <POWER_ROW4>:
}

extern void POWER_ROW4()
{
	Pin_set(ROW4_PORT , ROW4_PIN_NUMBER);
    1328:	67 e0       	ldi	r22, 0x07	; 7
    132a:	85 e3       	ldi	r24, 0x35	; 53
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Pin_set>
    1332:	08 95       	ret

00001334 <POWER_ALL_ROWS>:
}

extern void POWER_ALL_ROWS()
{
	POWER_ROW1();
    1334:	0e 94 82 09 	call	0x1304	; 0x1304 <POWER_ROW1>
	POWER_ROW2();
    1338:	0e 94 88 09 	call	0x1310	; 0x1310 <POWER_ROW2>
	POWER_ROW3();
    133c:	0e 94 8e 09 	call	0x131c	; 0x131c <POWER_ROW3>
	POWER_ROW4();
    1340:	0e 94 94 09 	call	0x1328	; 0x1328 <POWER_ROW4>
    1344:	08 95       	ret

00001346 <GROUND_ALL_ROWS>:
}

extern void GROUND_ALL_ROWS()
{
	Pin_reset(ROW1_PORT , ROW1_PIN_NUMBER);
    1346:	64 e0       	ldi	r22, 0x04	; 4
    1348:	85 e3       	ldi	r24, 0x35	; 53
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
	Pin_reset(ROW2_PORT , ROW2_PIN_NUMBER);
    1350:	65 e0       	ldi	r22, 0x05	; 5
    1352:	85 e3       	ldi	r24, 0x35	; 53
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
	Pin_reset(ROW3_PORT , ROW3_PIN_NUMBER);
    135a:	66 e0       	ldi	r22, 0x06	; 6
    135c:	85 e3       	ldi	r24, 0x35	; 53
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
	Pin_reset(ROW4_PORT , ROW4_PIN_NUMBER);
    1364:	67 e0       	ldi	r22, 0x07	; 7
    1366:	85 e3       	ldi	r24, 0x35	; 53
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
    136e:	08 95       	ret

00001370 <READ_ROW1>:
}

extern void READ_ROW1(uint8_t *pu8Reading)
{
    1370:	ef 92       	push	r14
    1372:	ff 92       	push	r15
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	1f 92       	push	r1
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	7c 01       	movw	r14, r24
	uint8_t u8Reading = 0;
    1384:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Number_of_correct_checks = 0;
	
	Pin_read(ROW1_PIN , ROW1_PIN_NUMBER , &u8Reading);
    1386:	ae 01       	movw	r20, r28
    1388:	4f 5f       	subi	r20, 0xFF	; 255
    138a:	5f 4f       	sbci	r21, 0xFF	; 255
    138c:	64 e0       	ldi	r22, 0x04	; 4
    138e:	83 e3       	ldi	r24, 0x33	; 51
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
	
	if (u8Reading != 0)
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	88 23       	and	r24, r24
    139a:	b9 f0       	breq	.+46     	; 0x13ca <READ_ROW1+0x5a>
    139c:	16 e9       	ldi	r17, 0x96	; 150
    139e:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
		{
			Pin_read(ROW1_PIN , ROW1_PIN_NUMBER , &u8Reading);
    13a0:	ae 01       	movw	r20, r28
    13a2:	4f 5f       	subi	r20, 0xFF	; 255
    13a4:	5f 4f       	sbci	r21, 0xFF	; 255
    13a6:	64 e0       	ldi	r22, 0x04	; 4
    13a8:	83 e3       	ldi	r24, 0x33	; 51
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
			
			if (u8Reading != 0)
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	81 11       	cpse	r24, r1
			{
				u8Number_of_correct_checks ++ ;
    13b4:	0f 5f       	subi	r16, 0xFF	; 255
    13b6:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(ROW1_PIN , ROW1_PIN_NUMBER , &u8Reading);
	
	if (u8Reading != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
    13b8:	99 f7       	brne	.-26     	; 0x13a0 <READ_ROW1+0x30>
			{
				
			}
		}
		
		if (u8Number_of_correct_checks == NUMBER_OF_KEYPAD_CHECKS)
    13ba:	06 39       	cpi	r16, 0x96	; 150
    13bc:	19 f4       	brne	.+6      	; 0x13c4 <READ_ROW1+0x54>
		{
			*pu8Reading = u8Reading ;
    13be:	f7 01       	movw	r30, r14
    13c0:	80 83       	st	Z, r24
    13c2:	05 c0       	rjmp	.+10     	; 0x13ce <READ_ROW1+0x5e>
		}
		else
		{
			*pu8Reading = 0;
    13c4:	f7 01       	movw	r30, r14
    13c6:	10 82       	st	Z, r1
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <READ_ROW1+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
    13ca:	f7 01       	movw	r30, r14
    13cc:	10 82       	st	Z, r1
	}
	
}
    13ce:	0f 90       	pop	r0
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	08 95       	ret

000013de <READ_ROW2>:

extern void READ_ROW2(uint8_t *pu8Reading)
{
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	1f 92       	push	r1
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	7c 01       	movw	r14, r24
	uint8_t u8Reading = 0;
    13f2:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Number_of_correct_checks = 0;
	
	Pin_read(ROW2_PIN , ROW2_PIN_NUMBER , &u8Reading);
    13f4:	ae 01       	movw	r20, r28
    13f6:	4f 5f       	subi	r20, 0xFF	; 255
    13f8:	5f 4f       	sbci	r21, 0xFF	; 255
    13fa:	65 e0       	ldi	r22, 0x05	; 5
    13fc:	83 e3       	ldi	r24, 0x33	; 51
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
	
	if (u8Reading != 0)
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	88 23       	and	r24, r24
    1408:	b9 f0       	breq	.+46     	; 0x1438 <READ_ROW2+0x5a>
    140a:	16 e9       	ldi	r17, 0x96	; 150
    140c:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
		{
			Pin_read(ROW2_PIN , ROW2_PIN_NUMBER , &u8Reading);
    140e:	ae 01       	movw	r20, r28
    1410:	4f 5f       	subi	r20, 0xFF	; 255
    1412:	5f 4f       	sbci	r21, 0xFF	; 255
    1414:	65 e0       	ldi	r22, 0x05	; 5
    1416:	83 e3       	ldi	r24, 0x33	; 51
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
			
			if (u8Reading != 0)
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	81 11       	cpse	r24, r1
			{
				u8Number_of_correct_checks ++ ;
    1422:	0f 5f       	subi	r16, 0xFF	; 255
    1424:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(ROW2_PIN , ROW2_PIN_NUMBER , &u8Reading);
	
	if (u8Reading != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
    1426:	99 f7       	brne	.-26     	; 0x140e <READ_ROW2+0x30>
			{
				
			}
		}
		
		if (u8Number_of_correct_checks == NUMBER_OF_KEYPAD_CHECKS)
    1428:	06 39       	cpi	r16, 0x96	; 150
    142a:	19 f4       	brne	.+6      	; 0x1432 <READ_ROW2+0x54>
		{
			*pu8Reading = u8Reading ;
    142c:	f7 01       	movw	r30, r14
    142e:	80 83       	st	Z, r24
    1430:	05 c0       	rjmp	.+10     	; 0x143c <READ_ROW2+0x5e>
		}
		else
		{
			*pu8Reading = 0;
    1432:	f7 01       	movw	r30, r14
    1434:	10 82       	st	Z, r1
    1436:	02 c0       	rjmp	.+4      	; 0x143c <READ_ROW2+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
    1438:	f7 01       	movw	r30, r14
    143a:	10 82       	st	Z, r1
	}
	
}
    143c:	0f 90       	pop	r0
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	08 95       	ret

0000144c <READ_ROW3>:

extern void READ_ROW3(uint8_t *pu8Reading)
{
    144c:	ef 92       	push	r14
    144e:	ff 92       	push	r15
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	1f 92       	push	r1
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	7c 01       	movw	r14, r24
	uint8_t u8Reading = 0;
    1460:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Number_of_correct_checks = 0;
	
	Pin_read(ROW3_PIN , ROW3_PIN_NUMBER , &u8Reading);
    1462:	ae 01       	movw	r20, r28
    1464:	4f 5f       	subi	r20, 0xFF	; 255
    1466:	5f 4f       	sbci	r21, 0xFF	; 255
    1468:	66 e0       	ldi	r22, 0x06	; 6
    146a:	83 e3       	ldi	r24, 0x33	; 51
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
	
	if (u8Reading != 0)
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	88 23       	and	r24, r24
    1476:	b9 f0       	breq	.+46     	; 0x14a6 <READ_ROW3+0x5a>
    1478:	16 e9       	ldi	r17, 0x96	; 150
    147a:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
		{
			Pin_read(ROW3_PIN , ROW3_PIN_NUMBER , &u8Reading);
    147c:	ae 01       	movw	r20, r28
    147e:	4f 5f       	subi	r20, 0xFF	; 255
    1480:	5f 4f       	sbci	r21, 0xFF	; 255
    1482:	66 e0       	ldi	r22, 0x06	; 6
    1484:	83 e3       	ldi	r24, 0x33	; 51
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
			
			if (u8Reading != 0)
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	81 11       	cpse	r24, r1
			{
				u8Number_of_correct_checks ++ ;
    1490:	0f 5f       	subi	r16, 0xFF	; 255
    1492:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(ROW3_PIN , ROW3_PIN_NUMBER , &u8Reading);
	
	if (u8Reading != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
    1494:	99 f7       	brne	.-26     	; 0x147c <READ_ROW3+0x30>
			{
				
			}
		}
		
		if (u8Number_of_correct_checks == NUMBER_OF_KEYPAD_CHECKS)
    1496:	06 39       	cpi	r16, 0x96	; 150
    1498:	19 f4       	brne	.+6      	; 0x14a0 <READ_ROW3+0x54>
		{
			*pu8Reading = u8Reading ;
    149a:	f7 01       	movw	r30, r14
    149c:	80 83       	st	Z, r24
    149e:	05 c0       	rjmp	.+10     	; 0x14aa <READ_ROW3+0x5e>
		}
		else
		{
			*pu8Reading = 0;
    14a0:	f7 01       	movw	r30, r14
    14a2:	10 82       	st	Z, r1
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <READ_ROW3+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
    14a6:	f7 01       	movw	r30, r14
    14a8:	10 82       	st	Z, r1
	}
	
}
    14aa:	0f 90       	pop	r0
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	ff 90       	pop	r15
    14b6:	ef 90       	pop	r14
    14b8:	08 95       	ret

000014ba <READ_ROW4>:

extern void READ_ROW4(uint8_t *pu8Reading)
{
    14ba:	ef 92       	push	r14
    14bc:	ff 92       	push	r15
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	1f 92       	push	r1
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	7c 01       	movw	r14, r24
	uint8_t u8Reading = 0;
    14ce:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Number_of_correct_checks = 0;
	
	Pin_read(ROW4_PIN , ROW4_PIN_NUMBER , &u8Reading);
    14d0:	ae 01       	movw	r20, r28
    14d2:	4f 5f       	subi	r20, 0xFF	; 255
    14d4:	5f 4f       	sbci	r21, 0xFF	; 255
    14d6:	67 e0       	ldi	r22, 0x07	; 7
    14d8:	83 e3       	ldi	r24, 0x33	; 51
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
	
	if (u8Reading != 0)
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	88 23       	and	r24, r24
    14e4:	b9 f0       	breq	.+46     	; 0x1514 <READ_ROW4+0x5a>
    14e6:	16 e9       	ldi	r17, 0x96	; 150
    14e8:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
		{
			Pin_read(ROW4_PIN , ROW4_PIN_NUMBER , &u8Reading);
    14ea:	ae 01       	movw	r20, r28
    14ec:	4f 5f       	subi	r20, 0xFF	; 255
    14ee:	5f 4f       	sbci	r21, 0xFF	; 255
    14f0:	67 e0       	ldi	r22, 0x07	; 7
    14f2:	83 e3       	ldi	r24, 0x33	; 51
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
			
			if (u8Reading != 0)
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	81 11       	cpse	r24, r1
			{
				u8Number_of_correct_checks ++ ;
    14fe:	0f 5f       	subi	r16, 0xFF	; 255
    1500:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(ROW4_PIN , ROW4_PIN_NUMBER , &u8Reading);
	
	if (u8Reading != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
    1502:	99 f7       	brne	.-26     	; 0x14ea <READ_ROW4+0x30>
			{
				
			}
		}
		
		if (u8Number_of_correct_checks == NUMBER_OF_KEYPAD_CHECKS)
    1504:	06 39       	cpi	r16, 0x96	; 150
    1506:	19 f4       	brne	.+6      	; 0x150e <READ_ROW4+0x54>
		{
			*pu8Reading = u8Reading ;
    1508:	f7 01       	movw	r30, r14
    150a:	80 83       	st	Z, r24
    150c:	05 c0       	rjmp	.+10     	; 0x1518 <READ_ROW4+0x5e>
		}
		else
		{
			*pu8Reading = 0;
    150e:	f7 01       	movw	r30, r14
    1510:	10 82       	st	Z, r1
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <READ_ROW4+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
    1514:	f7 01       	movw	r30, r14
    1516:	10 82       	st	Z, r1
	}
	
}
    1518:	0f 90       	pop	r0
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	ff 90       	pop	r15
    1524:	ef 90       	pop	r14
    1526:	08 95       	ret

00001528 <SET_ROWS_INPUT>:

extern void SET_ROWS_INPUT()
{
	Pin_mode(ROW1_PORT , ROW1_DDR , ROW1_PIN_NUMBER , INPUT);
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	44 e0       	ldi	r20, 0x04	; 4
    152c:	64 e3       	ldi	r22, 0x34	; 52
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	85 e3       	ldi	r24, 0x35	; 53
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(ROW2_PORT , ROW2_DDR , ROW2_PIN_NUMBER , INPUT);
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	45 e0       	ldi	r20, 0x05	; 5
    153c:	64 e3       	ldi	r22, 0x34	; 52
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	85 e3       	ldi	r24, 0x35	; 53
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(ROW3_PORT , ROW3_DDR , ROW3_PIN_NUMBER , INPUT);
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	46 e0       	ldi	r20, 0x06	; 6
    154c:	64 e3       	ldi	r22, 0x34	; 52
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	85 e3       	ldi	r24, 0x35	; 53
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(ROW4_PORT , ROW4_DDR , ROW4_PIN_NUMBER , INPUT);
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	47 e0       	ldi	r20, 0x07	; 7
    155c:	64 e3       	ldi	r22, 0x34	; 52
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	85 e3       	ldi	r24, 0x35	; 53
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
    1568:	08 95       	ret

0000156a <SET_ROWS_OUTPUT>:

}

extern void SET_ROWS_OUTPUT()
{
	Pin_mode(ROW1_PORT , ROW1_DDR , ROW1_PIN_NUMBER , OUTPUT);
    156a:	21 e0       	ldi	r18, 0x01	; 1
    156c:	44 e0       	ldi	r20, 0x04	; 4
    156e:	64 e3       	ldi	r22, 0x34	; 52
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	85 e3       	ldi	r24, 0x35	; 53
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(ROW2_PORT , ROW2_DDR , ROW2_PIN_NUMBER , OUTPUT);
    157a:	21 e0       	ldi	r18, 0x01	; 1
    157c:	45 e0       	ldi	r20, 0x05	; 5
    157e:	64 e3       	ldi	r22, 0x34	; 52
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	85 e3       	ldi	r24, 0x35	; 53
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(ROW3_PORT , ROW3_DDR , ROW3_PIN_NUMBER , OUTPUT);
    158a:	21 e0       	ldi	r18, 0x01	; 1
    158c:	46 e0       	ldi	r20, 0x06	; 6
    158e:	64 e3       	ldi	r22, 0x34	; 52
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	85 e3       	ldi	r24, 0x35	; 53
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(ROW4_PORT , ROW4_DDR , ROW4_PIN_NUMBER , OUTPUT);
    159a:	21 e0       	ldi	r18, 0x01	; 1
    159c:	47 e0       	ldi	r20, 0x07	; 7
    159e:	64 e3       	ldi	r22, 0x34	; 52
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	85 e3       	ldi	r24, 0x35	; 53
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
    15aa:	08 95       	ret

000015ac <POWER_COLUMN1>:

}

extern void POWER_COLUMN1()
{
	Pin_set(COLUMN1_PORT , COLUMN1_PIN_NUMBER);
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	85 e3       	ldi	r24, 0x35	; 53
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Pin_set>
    15b6:	08 95       	ret

000015b8 <POWER_COLUMN2>:
}

extern void POWER_COLUMN2()
{
	Pin_set(COLUMN2_PORT , COLUMN2_PIN_NUMBER);
    15b8:	61 e0       	ldi	r22, 0x01	; 1
    15ba:	85 e3       	ldi	r24, 0x35	; 53
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Pin_set>
    15c2:	08 95       	ret

000015c4 <POWER_COLUMN3>:
}

extern void POWER_COLUMN3()
{
	Pin_set(COLUMN3_PORT , COLUMN3_PIN_NUMBER);
    15c4:	62 e0       	ldi	r22, 0x02	; 2
    15c6:	85 e3       	ldi	r24, 0x35	; 53
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Pin_set>
    15ce:	08 95       	ret

000015d0 <POWER_COLUMN4>:
}

extern void POWER_COLUMN4()
{
	Pin_set(COLUMN4_PORT , COLUMN4_PIN_NUMBER);
    15d0:	63 e0       	ldi	r22, 0x03	; 3
    15d2:	85 e3       	ldi	r24, 0x35	; 53
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Pin_set>
    15da:	08 95       	ret

000015dc <POWER_ALL_COLUMNS>:
}

extern void POWER_ALL_COLUMNS()
{
	POWER_COLUMN1();
    15dc:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <POWER_COLUMN1>
	POWER_COLUMN2();
    15e0:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <POWER_COLUMN2>
	POWER_COLUMN3();
    15e4:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <POWER_COLUMN3>
	POWER_COLUMN4();
    15e8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <POWER_COLUMN4>
    15ec:	08 95       	ret

000015ee <GROUND_ALL_COLUMNS>:
}

extern void GROUND_ALL_COLUMNS()
{
	Pin_reset(COLUMN1_PORT , COLUMN1_PIN_NUMBER);
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	85 e3       	ldi	r24, 0x35	; 53
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
	Pin_reset(COLUMN2_PORT , COLUMN2_PIN_NUMBER);
    15f8:	61 e0       	ldi	r22, 0x01	; 1
    15fa:	85 e3       	ldi	r24, 0x35	; 53
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
	Pin_reset(COLUMN3_PORT , COLUMN3_PIN_NUMBER);
    1602:	62 e0       	ldi	r22, 0x02	; 2
    1604:	85 e3       	ldi	r24, 0x35	; 53
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
	Pin_reset(COLUMN4_PORT , COLUMN4_PIN_NUMBER);
    160c:	63 e0       	ldi	r22, 0x03	; 3
    160e:	85 e3       	ldi	r24, 0x35	; 53
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
    1616:	08 95       	ret

00001618 <READ_COLUMN1>:
}

extern void READ_COLUMN1(uint8_t *pu8Reading)
{
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	1f 92       	push	r1
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	7c 01       	movw	r14, r24
	uint8_t u8Reading = 0;
    162c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Number_of_correct_checks = 0;
	
	Pin_read(COLUMN1_PIN , COLUMN1_PIN_NUMBER , &u8Reading);
    162e:	ae 01       	movw	r20, r28
    1630:	4f 5f       	subi	r20, 0xFF	; 255
    1632:	5f 4f       	sbci	r21, 0xFF	; 255
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	83 e3       	ldi	r24, 0x33	; 51
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
	
	if (u8Reading != 0)
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	88 23       	and	r24, r24
    1642:	b9 f0       	breq	.+46     	; 0x1672 <READ_COLUMN1+0x5a>
    1644:	16 e9       	ldi	r17, 0x96	; 150
    1646:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
		{
			Pin_read(COLUMN1_PIN , COLUMN1_PIN_NUMBER , &u8Reading);
    1648:	ae 01       	movw	r20, r28
    164a:	4f 5f       	subi	r20, 0xFF	; 255
    164c:	5f 4f       	sbci	r21, 0xFF	; 255
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	83 e3       	ldi	r24, 0x33	; 51
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
			
			if (u8Reading != 0)
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	81 11       	cpse	r24, r1
			{
				u8Number_of_correct_checks ++ ;
    165c:	0f 5f       	subi	r16, 0xFF	; 255
    165e:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(COLUMN1_PIN , COLUMN1_PIN_NUMBER , &u8Reading);
	
	if (u8Reading != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
    1660:	99 f7       	brne	.-26     	; 0x1648 <READ_COLUMN1+0x30>
			{
				
			}
		}
		
		if (u8Number_of_correct_checks == NUMBER_OF_KEYPAD_CHECKS)
    1662:	06 39       	cpi	r16, 0x96	; 150
    1664:	19 f4       	brne	.+6      	; 0x166c <READ_COLUMN1+0x54>
		{
			*pu8Reading = u8Reading ; 
    1666:	f7 01       	movw	r30, r14
    1668:	80 83       	st	Z, r24
    166a:	05 c0       	rjmp	.+10     	; 0x1676 <READ_COLUMN1+0x5e>
		}
		else
		{
			*pu8Reading = 0;
    166c:	f7 01       	movw	r30, r14
    166e:	10 82       	st	Z, r1
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <READ_COLUMN1+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
    1672:	f7 01       	movw	r30, r14
    1674:	10 82       	st	Z, r1
	}
	
	
}
    1676:	0f 90       	pop	r0
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	08 95       	ret

00001686 <READ_COLUMN2>:

extern void READ_COLUMN2(uint8_t *pu8Reading)
{
    1686:	ef 92       	push	r14
    1688:	ff 92       	push	r15
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	1f 92       	push	r1
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	7c 01       	movw	r14, r24
	uint8_t u8Reading = 0;
    169a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Number_of_correct_checks = 0;
	
	Pin_read(COLUMN2_PIN , COLUMN2_PIN_NUMBER , &u8Reading);
    169c:	ae 01       	movw	r20, r28
    169e:	4f 5f       	subi	r20, 0xFF	; 255
    16a0:	5f 4f       	sbci	r21, 0xFF	; 255
    16a2:	61 e0       	ldi	r22, 0x01	; 1
    16a4:	83 e3       	ldi	r24, 0x33	; 51
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
	
	if (u8Reading != 0)
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	88 23       	and	r24, r24
    16b0:	b9 f0       	breq	.+46     	; 0x16e0 <READ_COLUMN2+0x5a>
    16b2:	16 e9       	ldi	r17, 0x96	; 150
    16b4:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
		{
			Pin_read(COLUMN2_PIN , COLUMN2_PIN_NUMBER , &u8Reading);
    16b6:	ae 01       	movw	r20, r28
    16b8:	4f 5f       	subi	r20, 0xFF	; 255
    16ba:	5f 4f       	sbci	r21, 0xFF	; 255
    16bc:	61 e0       	ldi	r22, 0x01	; 1
    16be:	83 e3       	ldi	r24, 0x33	; 51
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
			
			if (u8Reading != 0)
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	81 11       	cpse	r24, r1
			{
				u8Number_of_correct_checks ++ ;
    16ca:	0f 5f       	subi	r16, 0xFF	; 255
    16cc:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(COLUMN2_PIN , COLUMN2_PIN_NUMBER , &u8Reading);
	
	if (u8Reading != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
    16ce:	99 f7       	brne	.-26     	; 0x16b6 <READ_COLUMN2+0x30>
			{
				
			}
		}
		
		if (u8Number_of_correct_checks == NUMBER_OF_KEYPAD_CHECKS)
    16d0:	06 39       	cpi	r16, 0x96	; 150
    16d2:	19 f4       	brne	.+6      	; 0x16da <READ_COLUMN2+0x54>
		{
			*pu8Reading = u8Reading ;
    16d4:	f7 01       	movw	r30, r14
    16d6:	80 83       	st	Z, r24
    16d8:	05 c0       	rjmp	.+10     	; 0x16e4 <READ_COLUMN2+0x5e>
		}
		else
		{
			*pu8Reading = 0;
    16da:	f7 01       	movw	r30, r14
    16dc:	10 82       	st	Z, r1
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <READ_COLUMN2+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
    16e0:	f7 01       	movw	r30, r14
    16e2:	10 82       	st	Z, r1
	}
}
    16e4:	0f 90       	pop	r0
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	ff 90       	pop	r15
    16f0:	ef 90       	pop	r14
    16f2:	08 95       	ret

000016f4 <READ_COLUMN3>:

extern void READ_COLUMN3(uint8_t *pu8Reading)
{
    16f4:	ef 92       	push	r14
    16f6:	ff 92       	push	r15
    16f8:	0f 93       	push	r16
    16fa:	1f 93       	push	r17
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	1f 92       	push	r1
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	7c 01       	movw	r14, r24
	uint8_t u8Reading = 0;
    1708:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Number_of_correct_checks = 0;
	
	Pin_read(COLUMN3_PIN , COLUMN3_PIN_NUMBER , &u8Reading);
    170a:	ae 01       	movw	r20, r28
    170c:	4f 5f       	subi	r20, 0xFF	; 255
    170e:	5f 4f       	sbci	r21, 0xFF	; 255
    1710:	62 e0       	ldi	r22, 0x02	; 2
    1712:	83 e3       	ldi	r24, 0x33	; 51
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
	
	if (u8Reading != 0)
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	88 23       	and	r24, r24
    171e:	b9 f0       	breq	.+46     	; 0x174e <READ_COLUMN3+0x5a>
    1720:	16 e9       	ldi	r17, 0x96	; 150
    1722:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
		{
			Pin_read(COLUMN3_PIN , COLUMN3_PIN_NUMBER , &u8Reading);
    1724:	ae 01       	movw	r20, r28
    1726:	4f 5f       	subi	r20, 0xFF	; 255
    1728:	5f 4f       	sbci	r21, 0xFF	; 255
    172a:	62 e0       	ldi	r22, 0x02	; 2
    172c:	83 e3       	ldi	r24, 0x33	; 51
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
			
			if (u8Reading != 0)
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	81 11       	cpse	r24, r1
			{
				u8Number_of_correct_checks ++ ;
    1738:	0f 5f       	subi	r16, 0xFF	; 255
    173a:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(COLUMN3_PIN , COLUMN3_PIN_NUMBER , &u8Reading);
	
	if (u8Reading != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
    173c:	99 f7       	brne	.-26     	; 0x1724 <READ_COLUMN3+0x30>
			{
				
			}
		}
		
		if (u8Number_of_correct_checks == NUMBER_OF_KEYPAD_CHECKS)
    173e:	06 39       	cpi	r16, 0x96	; 150
    1740:	19 f4       	brne	.+6      	; 0x1748 <READ_COLUMN3+0x54>
		{
			*pu8Reading = u8Reading ;
    1742:	f7 01       	movw	r30, r14
    1744:	80 83       	st	Z, r24
    1746:	05 c0       	rjmp	.+10     	; 0x1752 <READ_COLUMN3+0x5e>
		}
		else
		{
			*pu8Reading = 0;
    1748:	f7 01       	movw	r30, r14
    174a:	10 82       	st	Z, r1
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <READ_COLUMN3+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
    174e:	f7 01       	movw	r30, r14
    1750:	10 82       	st	Z, r1
	}
}
    1752:	0f 90       	pop	r0
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	ff 90       	pop	r15
    175e:	ef 90       	pop	r14
    1760:	08 95       	ret

00001762 <READ_COLUMN4>:

extern void READ_COLUMN4(uint8_t *pu8Reading)
{
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	1f 92       	push	r1
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	7c 01       	movw	r14, r24
	uint8_t u8Reading = 0;
    1776:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Number_of_correct_checks = 0;
	
	Pin_read(COLUMN4_PIN , COLUMN4_PIN_NUMBER , &u8Reading);
    1778:	ae 01       	movw	r20, r28
    177a:	4f 5f       	subi	r20, 0xFF	; 255
    177c:	5f 4f       	sbci	r21, 0xFF	; 255
    177e:	63 e0       	ldi	r22, 0x03	; 3
    1780:	83 e3       	ldi	r24, 0x33	; 51
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
	
	if (u8Reading != 0)
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	88 23       	and	r24, r24
    178c:	b9 f0       	breq	.+46     	; 0x17bc <READ_COLUMN4+0x5a>
    178e:	16 e9       	ldi	r17, 0x96	; 150
    1790:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
		{
			Pin_read(COLUMN4_PIN , COLUMN4_PIN_NUMBER , &u8Reading);
    1792:	ae 01       	movw	r20, r28
    1794:	4f 5f       	subi	r20, 0xFF	; 255
    1796:	5f 4f       	sbci	r21, 0xFF	; 255
    1798:	63 e0       	ldi	r22, 0x03	; 3
    179a:	83 e3       	ldi	r24, 0x33	; 51
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Pin_read>
			
			if (u8Reading != 0)
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	81 11       	cpse	r24, r1
			{
				u8Number_of_correct_checks ++ ;
    17a6:	0f 5f       	subi	r16, 0xFF	; 255
    17a8:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(COLUMN4_PIN , COLUMN4_PIN_NUMBER , &u8Reading);
	
	if (u8Reading != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
    17aa:	99 f7       	brne	.-26     	; 0x1792 <READ_COLUMN4+0x30>
			{
				
			}
		}
		
		if (u8Number_of_correct_checks == NUMBER_OF_KEYPAD_CHECKS)
    17ac:	06 39       	cpi	r16, 0x96	; 150
    17ae:	19 f4       	brne	.+6      	; 0x17b6 <READ_COLUMN4+0x54>
		{
			*pu8Reading = u8Reading ;
    17b0:	f7 01       	movw	r30, r14
    17b2:	80 83       	st	Z, r24
    17b4:	05 c0       	rjmp	.+10     	; 0x17c0 <READ_COLUMN4+0x5e>
		}
		else
		{
			*pu8Reading = 0;
    17b6:	f7 01       	movw	r30, r14
    17b8:	10 82       	st	Z, r1
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <READ_COLUMN4+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
    17bc:	f7 01       	movw	r30, r14
    17be:	10 82       	st	Z, r1
	}
}
    17c0:	0f 90       	pop	r0
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	ff 90       	pop	r15
    17cc:	ef 90       	pop	r14
    17ce:	08 95       	ret

000017d0 <SET_COLUMNS_INPUT>:

extern void SET_COLUMNS_INPUT()
{
	Pin_mode(COLUMN1_PORT , COLUMN1_DDR , COLUMN1_PIN_NUMBER , INPUT);
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	64 e3       	ldi	r22, 0x34	; 52
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	85 e3       	ldi	r24, 0x35	; 53
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(COLUMN2_PORT , COLUMN2_DDR , COLUMN2_PIN_NUMBER , INPUT);
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	41 e0       	ldi	r20, 0x01	; 1
    17e4:	64 e3       	ldi	r22, 0x34	; 52
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	85 e3       	ldi	r24, 0x35	; 53
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(COLUMN3_PORT , COLUMN3_DDR , COLUMN3_PIN_NUMBER , INPUT);
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	42 e0       	ldi	r20, 0x02	; 2
    17f4:	64 e3       	ldi	r22, 0x34	; 52
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	85 e3       	ldi	r24, 0x35	; 53
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(COLUMN4_PORT , COLUMN4_DDR , COLUMN4_PIN_NUMBER , INPUT);
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	43 e0       	ldi	r20, 0x03	; 3
    1804:	64 e3       	ldi	r22, 0x34	; 52
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	85 e3       	ldi	r24, 0x35	; 53
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
    1810:	08 95       	ret

00001812 <SET_COLUMNS_OUTPUT>:
}

extern void SET_COLUMNS_OUTPUT()
{
	Pin_mode(COLUMN1_PORT , COLUMN1_DDR , COLUMN1_PIN_NUMBER , OUTPUT);
    1812:	21 e0       	ldi	r18, 0x01	; 1
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	64 e3       	ldi	r22, 0x34	; 52
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	85 e3       	ldi	r24, 0x35	; 53
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(COLUMN2_PORT , COLUMN2_DDR , COLUMN2_PIN_NUMBER , OUTPUT);
    1822:	21 e0       	ldi	r18, 0x01	; 1
    1824:	41 e0       	ldi	r20, 0x01	; 1
    1826:	64 e3       	ldi	r22, 0x34	; 52
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	85 e3       	ldi	r24, 0x35	; 53
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(COLUMN3_PORT , COLUMN3_DDR , COLUMN3_PIN_NUMBER , OUTPUT);
    1832:	21 e0       	ldi	r18, 0x01	; 1
    1834:	42 e0       	ldi	r20, 0x02	; 2
    1836:	64 e3       	ldi	r22, 0x34	; 52
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	85 e3       	ldi	r24, 0x35	; 53
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(COLUMN4_PORT , COLUMN4_DDR , COLUMN4_PIN_NUMBER , OUTPUT);
    1842:	21 e0       	ldi	r18, 0x01	; 1
    1844:	43 e0       	ldi	r20, 0x03	; 3
    1846:	64 e3       	ldi	r22, 0x34	; 52
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	85 e3       	ldi	r24, 0x35	; 53
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
    1852:	08 95       	ret

00001854 <RW_STATE>:
 */ 

#include "LCD_INTERFACE.h"

extern void RW_STATE(uint8_t u8State)
{
    1854:	cf 93       	push	r28
    1856:	c8 2f       	mov	r28, r24
	Pin_mode(RW_PORT, RW_DDR , RW_PIN_NUMBER , OUTPUT);
    1858:	21 e0       	ldi	r18, 0x01	; 1
    185a:	42 e0       	ldi	r20, 0x02	; 2
    185c:	67 e3       	ldi	r22, 0x37	; 55
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	88 e3       	ldi	r24, 0x38	; 56
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>

	if (u8State == RW_WRITE)
    1868:	c1 11       	cpse	r28, r1
    186a:	06 c0       	rjmp	.+12     	; 0x1878 <RW_STATE+0x24>
	{
		Pin_reset(RW_PORT , RW_PIN_NUMBER);
    186c:	62 e0       	ldi	r22, 0x02	; 2
    186e:	88 e3       	ldi	r24, 0x38	; 56
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
    1876:	07 c0       	rjmp	.+14     	; 0x1886 <RW_STATE+0x32>
	}
	else if (u8State == RW_READ)
    1878:	c1 30       	cpi	r28, 0x01	; 1
    187a:	29 f4       	brne	.+10     	; 0x1886 <RW_STATE+0x32>
	{
		Pin_set(RW_PORT , RW_PIN_NUMBER);
    187c:	62 e0       	ldi	r22, 0x02	; 2
    187e:	88 e3       	ldi	r24, 0x38	; 56
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Pin_set>
	}
	else
	{
		
	}
}
    1886:	cf 91       	pop	r28
    1888:	08 95       	ret

0000188a <RS_STATE>:

extern void RS_STATE(uint8_t u8State)
{
    188a:	cf 93       	push	r28
    188c:	c8 2f       	mov	r28, r24
	Pin_mode(RS_PORT, RS_DDR , RS_PIN_NUMBER , OUTPUT);
    188e:	21 e0       	ldi	r18, 0x01	; 1
    1890:	41 e0       	ldi	r20, 0x01	; 1
    1892:	67 e3       	ldi	r22, 0x37	; 55
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	88 e3       	ldi	r24, 0x38	; 56
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>

	if (u8State == RS_COMMAND)
    189e:	c1 11       	cpse	r28, r1
    18a0:	06 c0       	rjmp	.+12     	; 0x18ae <RS_STATE+0x24>
	{
		Pin_reset(RS_PORT , RS_PIN_NUMBER);
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	88 e3       	ldi	r24, 0x38	; 56
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
    18ac:	07 c0       	rjmp	.+14     	; 0x18bc <RS_STATE+0x32>
	}
	else if (u8State == RS_DATA)
    18ae:	c1 30       	cpi	r28, 0x01	; 1
    18b0:	29 f4       	brne	.+10     	; 0x18bc <RS_STATE+0x32>
	{
		Pin_set(RS_PORT , RS_PIN_NUMBER);
    18b2:	61 e0       	ldi	r22, 0x01	; 1
    18b4:	88 e3       	ldi	r24, 0x38	; 56
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Pin_set>
	}
	else
	{
		
	}
}
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <ENABLE_STATE>:

extern void ENABLE_STATE(uint8_t u8State)
{
    18c0:	cf 93       	push	r28
    18c2:	c8 2f       	mov	r28, r24
	Pin_mode(ENABLE_PORT, ENABLE_DDR , ENABLE_PIN_NUMBER , OUTPUT);
    18c4:	21 e0       	ldi	r18, 0x01	; 1
    18c6:	43 e0       	ldi	r20, 0x03	; 3
    18c8:	67 e3       	ldi	r22, 0x37	; 55
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	88 e3       	ldi	r24, 0x38	; 56
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>

	if (u8State == ENABLE_LOW)
    18d4:	c1 11       	cpse	r28, r1
    18d6:	06 c0       	rjmp	.+12     	; 0x18e4 <ENABLE_STATE+0x24>
	{
		Pin_reset(ENABLE_PORT , ENABLE_PIN_NUMBER);
    18d8:	63 e0       	ldi	r22, 0x03	; 3
    18da:	88 e3       	ldi	r24, 0x38	; 56
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
    18e2:	07 c0       	rjmp	.+14     	; 0x18f2 <ENABLE_STATE+0x32>
	}
	else if (u8State == ENABLE_HIGH)
    18e4:	c1 30       	cpi	r28, 0x01	; 1
    18e6:	29 f4       	brne	.+10     	; 0x18f2 <ENABLE_STATE+0x32>
	{
		Pin_set(ENABLE_PORT , ENABLE_PIN_NUMBER);
    18e8:	63 e0       	ldi	r22, 0x03	; 3
    18ea:	88 e3       	ldi	r24, 0x38	; 56
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Pin_set>
	}
	else
	{
		
	}
}
    18f2:	cf 91       	pop	r28
    18f4:	08 95       	ret

000018f6 <HIGH_TO_LOW_PULSE>:

extern void HIGH_TO_LOW_PULSE()
{
	ENABLE_STATE(ENABLE_HIGH);
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <ENABLE_STATE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18fc:	84 e1       	ldi	r24, 0x14	; 20
    18fe:	8a 95       	dec	r24
    1900:	f1 f7       	brne	.-4      	; 0x18fe <HIGH_TO_LOW_PULSE+0x8>
	_delay_us(PULSE_WIDTH);
	ENABLE_STATE(ENABLE_LOW);
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <ENABLE_STATE>
    1908:	80 e5       	ldi	r24, 0x50	; 80
    190a:	8a 95       	dec	r24
    190c:	f1 f7       	brne	.-4      	; 0x190a <HIGH_TO_LOW_PULSE+0x14>
    190e:	08 95       	ret

00001910 <LCD_COMMAND>:
	_delay_us(20);  
}

extern void LCD_COMMAND(uint8_t u8Command)
{
    1910:	cf 93       	push	r28
    1912:	c8 2f       	mov	r28, r24
	*((unsigned int *)(D4_PORT)) =(*((unsigned int *)(D4_PORT)) & 0x0F) | (u8Command & 0xF0) ;
    1914:	8b b3       	in	r24, 0x1b	; 27
    1916:	9c b3       	in	r25, 0x1c	; 28
    1918:	8f 70       	andi	r24, 0x0F	; 15
    191a:	99 27       	eor	r25, r25
    191c:	2c 2f       	mov	r18, r28
    191e:	20 7f       	andi	r18, 0xF0	; 240
    1920:	82 2b       	or	r24, r18
    1922:	9c bb       	out	0x1c, r25	; 28
    1924:	8b bb       	out	0x1b, r24	; 27
	RS_STATE(RS_COMMAND);
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	0e 94 45 0c 	call	0x188a	; 0x188a <RS_STATE>
	RW_STATE(RW_WRITE);
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	0e 94 2a 0c 	call	0x1854	; 0x1854 <RW_STATE>
	HIGH_TO_LOW_PULSE();
    1932:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <HIGH_TO_LOW_PULSE>
	
	 *((unsigned int *)(D4_PORT)) = u8Command << 4;
    1936:	20 e1       	ldi	r18, 0x10	; 16
    1938:	c2 9f       	mul	r28, r18
    193a:	c0 01       	movw	r24, r0
    193c:	11 24       	eor	r1, r1
    193e:	9c bb       	out	0x1c, r25	; 28
    1940:	8b bb       	out	0x1b, r24	; 27
	 HIGH_TO_LOW_PULSE();
    1942:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <HIGH_TO_LOW_PULSE>
}
    1946:	cf 91       	pop	r28
    1948:	08 95       	ret

0000194a <LCD_DATA>:

extern void LCD_DATA(uint8_t u8Data)
{
    194a:	cf 93       	push	r28
    194c:	c8 2f       	mov	r28, r24
	*((unsigned int *)(D4_PORT)) = (*((unsigned int *)(D4_PORT)) & 0x0F) | (u8Data & 0xF0) ;
    194e:	8b b3       	in	r24, 0x1b	; 27
    1950:	9c b3       	in	r25, 0x1c	; 28
    1952:	8f 70       	andi	r24, 0x0F	; 15
    1954:	99 27       	eor	r25, r25
    1956:	2c 2f       	mov	r18, r28
    1958:	20 7f       	andi	r18, 0xF0	; 240
    195a:	82 2b       	or	r24, r18
    195c:	9c bb       	out	0x1c, r25	; 28
    195e:	8b bb       	out	0x1b, r24	; 27
	RS_STATE(RS_DATA);
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	0e 94 45 0c 	call	0x188a	; 0x188a <RS_STATE>
	RW_STATE(RW_WRITE);
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	0e 94 2a 0c 	call	0x1854	; 0x1854 <RW_STATE>
	HIGH_TO_LOW_PULSE();
    196c:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <HIGH_TO_LOW_PULSE>
	
	*((unsigned int *)(D4_PORT)) = u8Data << 4;
    1970:	20 e1       	ldi	r18, 0x10	; 16
    1972:	c2 9f       	mul	r28, r18
    1974:	c0 01       	movw	r24, r0
    1976:	11 24       	eor	r1, r1
    1978:	9c bb       	out	0x1c, r25	; 28
    197a:	8b bb       	out	0x1b, r24	; 27
	HIGH_TO_LOW_PULSE();
    197c:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <HIGH_TO_LOW_PULSE>
}
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <LCD_DATA_STRING>:

extern void LCD_DATA_STRING(uint8_t *pu8Data , uint8_t u8Size)
{
    1984:	ef 92       	push	r14
    1986:	ff 92       	push	r15
    1988:	0f 93       	push	r16
    198a:	1f 93       	push	r17
    198c:	cf 93       	push	r28
    198e:	7c 01       	movw	r14, r24
	uint8_t u8Count = 0;
	
	for (u8Count = 0; u8Count < u8Size - 1 ; u8Count ++)
    1990:	06 2f       	mov	r16, r22
    1992:	10 e0       	ldi	r17, 0x00	; 0
    1994:	01 50       	subi	r16, 0x01	; 1
    1996:	11 09       	sbc	r17, r1
    1998:	10 16       	cp	r1, r16
    199a:	11 06       	cpc	r1, r17
    199c:	6c f4       	brge	.+26     	; 0x19b8 <LCD_DATA_STRING+0x34>
    199e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_DATA(pu8Data[u8Count]);
    19a0:	f7 01       	movw	r30, r14
    19a2:	ec 0f       	add	r30, r28
    19a4:	f1 1d       	adc	r31, r1
    19a6:	80 81       	ld	r24, Z
    19a8:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_DATA>

extern void LCD_DATA_STRING(uint8_t *pu8Data , uint8_t u8Size)
{
	uint8_t u8Count = 0;
	
	for (u8Count = 0; u8Count < u8Size - 1 ; u8Count ++)
    19ac:	cf 5f       	subi	r28, 0xFF	; 255
    19ae:	8c 2f       	mov	r24, r28
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	80 17       	cp	r24, r16
    19b4:	91 07       	cpc	r25, r17
    19b6:	a4 f3       	brlt	.-24     	; 0x19a0 <LCD_DATA_STRING+0x1c>
	{
		LCD_DATA(pu8Data[u8Count]);
	}
	LCD_COMMAND(SHIFT_CURSOR_POSITION_RIGHT);
    19b8:	84 e1       	ldi	r24, 0x14	; 20
    19ba:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
}
    19be:	cf 91       	pop	r28
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	ff 90       	pop	r15
    19c6:	ef 90       	pop	r14
    19c8:	08 95       	ret

000019ca <LCD_INIT>:

extern void LCD_INIT()
{
	Pin_mode(RW_PORT, RW_DDR , RW_PIN_NUMBER , OUTPUT);
    19ca:	21 e0       	ldi	r18, 0x01	; 1
    19cc:	42 e0       	ldi	r20, 0x02	; 2
    19ce:	67 e3       	ldi	r22, 0x37	; 55
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	88 e3       	ldi	r24, 0x38	; 56
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(RS_PORT, RS_DDR , RS_PIN_NUMBER , OUTPUT);
    19da:	21 e0       	ldi	r18, 0x01	; 1
    19dc:	41 e0       	ldi	r20, 0x01	; 1
    19de:	67 e3       	ldi	r22, 0x37	; 55
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	88 e3       	ldi	r24, 0x38	; 56
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(ENABLE_PORT, ENABLE_DDR , ENABLE_PIN_NUMBER , OUTPUT);
    19ea:	21 e0       	ldi	r18, 0x01	; 1
    19ec:	43 e0       	ldi	r20, 0x03	; 3
    19ee:	67 e3       	ldi	r22, 0x37	; 55
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	88 e3       	ldi	r24, 0x38	; 56
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	
	Pin_mode(D4_PORT, D4_DDR , D4_PIN_NUMBER , OUTPUT);
    19fa:	21 e0       	ldi	r18, 0x01	; 1
    19fc:	44 e0       	ldi	r20, 0x04	; 4
    19fe:	6a e3       	ldi	r22, 0x3A	; 58
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	8b e3       	ldi	r24, 0x3B	; 59
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(D5_PORT, D5_DDR , D5_PIN_NUMBER , OUTPUT);
    1a0a:	21 e0       	ldi	r18, 0x01	; 1
    1a0c:	45 e0       	ldi	r20, 0x05	; 5
    1a0e:	6a e3       	ldi	r22, 0x3A	; 58
    1a10:	70 e0       	ldi	r23, 0x00	; 0
    1a12:	8b e3       	ldi	r24, 0x3B	; 59
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(D6_PORT, D6_DDR , D6_PIN_NUMBER , OUTPUT);
    1a1a:	21 e0       	ldi	r18, 0x01	; 1
    1a1c:	46 e0       	ldi	r20, 0x06	; 6
    1a1e:	6a e3       	ldi	r22, 0x3A	; 58
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	8b e3       	ldi	r24, 0x3B	; 59
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(D7_PORT, D7_DDR , D7_PIN_NUMBER , OUTPUT);
    1a2a:	21 e0       	ldi	r18, 0x01	; 1
    1a2c:	47 e0       	ldi	r20, 0x07	; 7
    1a2e:	6a e3       	ldi	r22, 0x3A	; 58
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	8b e3       	ldi	r24, 0x3B	; 59
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	
	ENABLE_STATE(ENABLE_LOW);
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <ENABLE_STATE>
    1a40:	8f e6       	ldi	r24, 0x6F	; 111
    1a42:	97 e1       	ldi	r25, 0x17	; 23
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <LCD_INIT+0x7a>
    1a48:	00 c0       	rjmp	.+0      	; 0x1a4a <LCD_INIT+0x80>
    1a4a:	00 00       	nop
	_delay_us(2000);
	
	LCD_COMMAND(INITIALIZE_COMMAND_1); 
    1a4c:	83 e3       	ldi	r24, 0x33	; 51
    1a4e:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
    1a52:	8b e2       	ldi	r24, 0x2B	; 43
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <LCD_INIT+0x8c>
    1a5a:	00 c0       	rjmp	.+0      	; 0x1a5c <LCD_INIT+0x92>
    1a5c:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(INITIALIZE_COMMAND_2); 
    1a5e:	82 e3       	ldi	r24, 0x32	; 50
    1a60:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
    1a64:	8b e2       	ldi	r24, 0x2B	; 43
    1a66:	91 e0       	ldi	r25, 0x01	; 1
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <LCD_INIT+0x9e>
    1a6c:	00 c0       	rjmp	.+0      	; 0x1a6e <LCD_INIT+0xa4>
    1a6e:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(BIT_MODE4); 
    1a70:	88 e2       	ldi	r24, 0x28	; 40
    1a72:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
    1a76:	8b e2       	ldi	r24, 0x2B	; 43
    1a78:	91 e0       	ldi	r25, 0x01	; 1
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LCD_INIT+0xb0>
    1a7e:	00 c0       	rjmp	.+0      	; 0x1a80 <LCD_INIT+0xb6>
    1a80:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(DISPLAY_ON_CURSOR_BLINKING); 
    1a82:	8f e0       	ldi	r24, 0x0F	; 15
    1a84:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
    1a88:	8b e2       	ldi	r24, 0x2B	; 43
    1a8a:	91 e0       	ldi	r25, 0x01	; 1
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_INIT+0xc2>
    1a90:	00 c0       	rjmp	.+0      	; 0x1a92 <LCD_INIT+0xc8>
    1a92:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(CLEAR_DISPLAY); 
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
    1a9a:	8f e6       	ldi	r24, 0x6F	; 111
    1a9c:	97 e1       	ldi	r25, 0x17	; 23
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <LCD_INIT+0xd4>
    1aa2:	00 c0       	rjmp	.+0      	; 0x1aa4 <LCD_INIT+0xda>
    1aa4:	00 00       	nop
	_delay_us(2000);
	LCD_COMMAND(SHIFT_CURSOR_RIGHT); 
    1aa6:	86 e0       	ldi	r24, 0x06	; 6
    1aa8:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_COMMAND>
    1aac:	8b e2       	ldi	r24, 0x2B	; 43
    1aae:	91 e0       	ldi	r25, 0x01	; 1
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <LCD_INIT+0xe6>
    1ab4:	00 c0       	rjmp	.+0      	; 0x1ab6 <LCD_INIT+0xec>
    1ab6:	00 00       	nop
    1ab8:	08 95       	ret

00001aba <LED_ON>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	31 f4       	brne	.+12     	; 0x1aca <LED_ON+0x10>
    1abe:	65 e0       	ldi	r22, 0x05	; 5
    1ac0:	82 e3       	ldi	r24, 0x32	; 50
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Pin_set>
    1ac8:	08 95       	ret
    1aca:	82 30       	cpi	r24, 0x02	; 2
    1acc:	31 f4       	brne	.+12     	; 0x1ada <LED_ON+0x20>
    1ace:	66 e0       	ldi	r22, 0x06	; 6
    1ad0:	82 e3       	ldi	r24, 0x32	; 50
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Pin_set>
    1ad8:	08 95       	ret
    1ada:	83 30       	cpi	r24, 0x03	; 3
    1adc:	29 f4       	brne	.+10     	; 0x1ae8 <LED_ON+0x2e>
    1ade:	67 e0       	ldi	r22, 0x07	; 7
    1ae0:	82 e3       	ldi	r24, 0x32	; 50
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Pin_set>
    1ae8:	08 95       	ret

00001aea <LED_OFF>:
    1aea:	81 30       	cpi	r24, 0x01	; 1
    1aec:	31 f4       	brne	.+12     	; 0x1afa <LED_OFF+0x10>
    1aee:	65 e0       	ldi	r22, 0x05	; 5
    1af0:	82 e3       	ldi	r24, 0x32	; 50
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
    1af8:	08 95       	ret
    1afa:	82 30       	cpi	r24, 0x02	; 2
    1afc:	31 f4       	brne	.+12     	; 0x1b0a <LED_OFF+0x20>
    1afe:	66 e0       	ldi	r22, 0x06	; 6
    1b00:	82 e3       	ldi	r24, 0x32	; 50
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
    1b08:	08 95       	ret
    1b0a:	83 30       	cpi	r24, 0x03	; 3
    1b0c:	29 f4       	brne	.+10     	; 0x1b18 <LED_OFF+0x2e>
    1b0e:	67 e0       	ldi	r22, 0x07	; 7
    1b10:	82 e3       	ldi	r24, 0x32	; 50
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
    1b18:	08 95       	ret

00001b1a <LEDS_FLASH>:
		
	}
}

extern void LEDS_FLASH()
{
    1b1a:	cf 93       	push	r28
    1b1c:	c5 e0       	ldi	r28, 0x05	; 5
	uint8_t u8Count = 0 ;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_LEDS_FLICKERS ; u8Count ++)
	{
		LED_ON(LED1);
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <LED_ON>
		LED_ON(LED2);
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <LED_ON>
		LED_ON(LED3);
    1b2a:	83 e0       	ldi	r24, 0x03	; 3
    1b2c:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <LED_ON>
    1b30:	2f e7       	ldi	r18, 0x7F	; 127
    1b32:	8f e4       	ldi	r24, 0x4F	; 79
    1b34:	92 e1       	ldi	r25, 0x12	; 18
    1b36:	21 50       	subi	r18, 0x01	; 1
    1b38:	80 40       	sbci	r24, 0x00	; 0
    1b3a:	90 40       	sbci	r25, 0x00	; 0
    1b3c:	e1 f7       	brne	.-8      	; 0x1b36 <LEDS_FLASH+0x1c>
    1b3e:	00 c0       	rjmp	.+0      	; 0x1b40 <LEDS_FLASH+0x26>
    1b40:	00 00       	nop
		_delay_ms(LEDS_FLASHING_PERIOD);
		LED_OFF(LED1);
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_OFF>
		LED_OFF(LED2);
    1b48:	82 e0       	ldi	r24, 0x02	; 2
    1b4a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_OFF>
		LED_OFF(LED3);
    1b4e:	83 e0       	ldi	r24, 0x03	; 3
    1b50:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_OFF>
    1b54:	2f e7       	ldi	r18, 0x7F	; 127
    1b56:	8f e4       	ldi	r24, 0x4F	; 79
    1b58:	92 e1       	ldi	r25, 0x12	; 18
    1b5a:	21 50       	subi	r18, 0x01	; 1
    1b5c:	80 40       	sbci	r24, 0x00	; 0
    1b5e:	90 40       	sbci	r25, 0x00	; 0
    1b60:	e1 f7       	brne	.-8      	; 0x1b5a <LEDS_FLASH+0x40>
    1b62:	00 c0       	rjmp	.+0      	; 0x1b64 <LEDS_FLASH+0x4a>
    1b64:	00 00       	nop
    1b66:	c1 50       	subi	r28, 0x01	; 1

extern void LEDS_FLASH()
{
	uint8_t u8Count = 0 ;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_LEDS_FLICKERS ; u8Count ++)
    1b68:	d1 f6       	brne	.-76     	; 0x1b1e <LEDS_FLASH+0x4>
		LED_OFF(LED1);
		LED_OFF(LED2);
		LED_OFF(LED3);
		_delay_ms(LEDS_FLASHING_PERIOD);	
	}
    1b6a:	cf 91       	pop	r28
    1b6c:	08 95       	ret

00001b6e <RELAY_ON>:

#include "RELAY_INTERFACE.h"

extern void RELAY_ON()
{
	Pin_set(RELAY_PORT , RELAY_PIN_NUMBER);
    1b6e:	63 e0       	ldi	r22, 0x03	; 3
    1b70:	82 e3       	ldi	r24, 0x32	; 50
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Pin_set>
    1b78:	08 95       	ret

00001b7a <RELAY_OFF>:
}

extern void RELAY_OFF()
{
	Pin_reset(RELAY_PORT , RELAY_PIN_NUMBER);
    1b7a:	63 e0       	ldi	r22, 0x03	; 3
    1b7c:	82 e3       	ldi	r24, 0x32	; 50
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
    1b84:	08 95       	ret

00001b86 <RELAY_FLICKER>:
}

extern void RELAY_FLICKER()
{
    1b86:	cf 93       	push	r28
    1b88:	c5 e0       	ldi	r28, 0x05	; 5
	uint8_t u8Count = 0;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_RELAY_FLICKERS ; u8Count ++)
	{
		RELAY_ON();
    1b8a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <RELAY_ON>
    1b8e:	2f e7       	ldi	r18, 0x7F	; 127
    1b90:	8f e4       	ldi	r24, 0x4F	; 79
    1b92:	92 e1       	ldi	r25, 0x12	; 18
    1b94:	21 50       	subi	r18, 0x01	; 1
    1b96:	80 40       	sbci	r24, 0x00	; 0
    1b98:	90 40       	sbci	r25, 0x00	; 0
    1b9a:	e1 f7       	brne	.-8      	; 0x1b94 <RELAY_FLICKER+0xe>
    1b9c:	00 c0       	rjmp	.+0      	; 0x1b9e <RELAY_FLICKER+0x18>
    1b9e:	00 00       	nop
		_delay_ms(RELAY_FLICKERING_PERIOD);
		RELAY_OFF();
    1ba0:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <RELAY_OFF>
    1ba4:	2f e7       	ldi	r18, 0x7F	; 127
    1ba6:	8f e4       	ldi	r24, 0x4F	; 79
    1ba8:	92 e1       	ldi	r25, 0x12	; 18
    1baa:	21 50       	subi	r18, 0x01	; 1
    1bac:	80 40       	sbci	r24, 0x00	; 0
    1bae:	90 40       	sbci	r25, 0x00	; 0
    1bb0:	e1 f7       	brne	.-8      	; 0x1baa <RELAY_FLICKER+0x24>
    1bb2:	00 c0       	rjmp	.+0      	; 0x1bb4 <RELAY_FLICKER+0x2e>
    1bb4:	00 00       	nop
    1bb6:	c1 50       	subi	r28, 0x01	; 1

extern void RELAY_FLICKER()
{
	uint8_t u8Count = 0;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_RELAY_FLICKERS ; u8Count ++)
    1bb8:	41 f7       	brne	.-48     	; 0x1b8a <RELAY_FLICKER+0x4>
		_delay_ms(RELAY_FLICKERING_PERIOD);
		RELAY_OFF();
		_delay_ms(RELAY_FLICKERING_PERIOD);
	}
	
    1bba:	cf 91       	pop	r28
    1bbc:	08 95       	ret

00001bbe <main>:
int main(void)
{	
	// OUTPUTS
	
		// LEDS
	Pin_mode(LED1_PORT , LED1_DDR , LED1_PIN_NUMBER , OUTPUT);
    1bbe:	21 e0       	ldi	r18, 0x01	; 1
    1bc0:	45 e0       	ldi	r20, 0x05	; 5
    1bc2:	61 e3       	ldi	r22, 0x31	; 49
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	82 e3       	ldi	r24, 0x32	; 50
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(LED2_PORT , LED2_DDR , LED2_PIN_NUMBER , OUTPUT);
    1bce:	21 e0       	ldi	r18, 0x01	; 1
    1bd0:	46 e0       	ldi	r20, 0x06	; 6
    1bd2:	61 e3       	ldi	r22, 0x31	; 49
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	82 e3       	ldi	r24, 0x32	; 50
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(LED3_PORT , LED3_DDR , LED3_PIN_NUMBER , OUTPUT);
    1bde:	21 e0       	ldi	r18, 0x01	; 1
    1be0:	47 e0       	ldi	r20, 0x07	; 7
    1be2:	61 e3       	ldi	r22, 0x31	; 49
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	82 e3       	ldi	r24, 0x32	; 50
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
		
		//BUZZER
	Pin_mode(BUZZER_PORT , BUZZER_DDR , BUZZER_PIN_NUMBER , OUTPUT);
    1bee:	21 e0       	ldi	r18, 0x01	; 1
    1bf0:	44 e0       	ldi	r20, 0x04	; 4
    1bf2:	61 e3       	ldi	r22, 0x31	; 49
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	82 e3       	ldi	r24, 0x32	; 50
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
		
		//RELAY
	Pin_mode(RELAY_PORT , RELAY_DDR , RELAY_PIN_NUMBER , OUTPUT);
    1bfe:	21 e0       	ldi	r18, 0x01	; 1
    1c00:	43 e0       	ldi	r20, 0x03	; 3
    1c02:	61 e3       	ldi	r22, 0x31	; 49
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	82 e3       	ldi	r24, 0x32	; 50
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(SEGMENT_D_PORT , SEGMENT_D_DDR , SEGMENT_D_PIN_NUMBER , OUTPUT);
	*/
	// INPUTS

		// BUTTONS
	Pin_mode(BUTTON0_PORT , BUTTON0_DDR , BUTTON0_PIN_NUMBER , INPUT);
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	61 e3       	ldi	r22, 0x31	; 49
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	82 e3       	ldi	r24, 0x32	; 50
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(BUTTON1_PORT , BUTTON1_DDR , BUTTON1_PIN_NUMBER , INPUT);
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	41 e0       	ldi	r20, 0x01	; 1
    1c22:	61 e3       	ldi	r22, 0x31	; 49
    1c24:	70 e0       	ldi	r23, 0x00	; 0
    1c26:	82 e3       	ldi	r24, 0x32	; 50
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
	Pin_mode(BUTTON2_PORT , BUTTON2_DDR , BUTTON2_PIN_NUMBER , INPUT);
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	42 e0       	ldi	r20, 0x02	; 2
    1c32:	61 e3       	ldi	r22, 0x31	; 49
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	82 e3       	ldi	r24, 0x32	; 50
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Pin_mode>
		// ADC
	Pin_reset(ADC0_DDR, ADC0_PIN_NUMBER); //No pull up resistors
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	8a e3       	ldi	r24, 0x3A	; 58
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
	Pin_reset(ADC1_DDR, ADC1_PIN_NUMBER);
    1c48:	61 e0       	ldi	r22, 0x01	; 1
    1c4a:	8a e3       	ldi	r24, 0x3A	; 58
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Pin_reset>
	// Setting initial states
	
	LED_OFF(LED1);
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_OFF>
	LED_OFF(LED2);
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_OFF>
	LED_OFF(LED3);
    1c5e:	83 e0       	ldi	r24, 0x03	; 3
    1c60:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_OFF>
	BUZZER_OFF();
    1c64:	0e 94 60 09 	call	0x12c0	; 0x12c0 <BUZZER_OFF>
	RELAY_OFF();
    1c68:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <RELAY_OFF>
	/*SEGMENT_RESET();*/
	LCD_INIT();
    1c6c:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LCD_INIT>
	
extern void KEYPAD_TEST();

	while (1)
	{
		if (gu8ID_right != 0 || gu8Password_right != 0)
    1c70:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <gu8ID_right>
    1c74:	81 11       	cpse	r24, r1
    1c76:	04 c0       	rjmp	.+8      	; 0x1c80 <main+0xc2>
    1c78:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <gu8Password_right>
    1c7c:	88 23       	and	r24, r24
    1c7e:	19 f0       	breq	.+6      	; 0x1c86 <main+0xc8>
		{
			LCD_TEST();
    1c80:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_TEST>
    1c84:	f5 cf       	rjmp	.-22     	; 0x1c70 <main+0xb2>
		} 
		else
		{
			KEYPAD_WITH_LCD();
    1c86:	0e 94 35 02 	call	0x46a	; 0x46a <KEYPAD_WITH_LCD>
    1c8a:	f2 cf       	rjmp	.-28     	; 0x1c70 <main+0xb2>

00001c8c <ADC0_INIT>:

#include "ADC.h"

extern void ADC0_INIT()
{
	ADC_CSRA = 0x86 ;
    1c8c:	86 e8       	ldi	r24, 0x86	; 134
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	97 b9       	out	0x07, r25	; 7
    1c92:	86 b9       	out	0x06, r24	; 6
	ADC_MUX = 0x40 ;
    1c94:	80 e4       	ldi	r24, 0x40	; 64
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	98 b9       	out	0x08, r25	; 8
    1c9a:	87 b9       	out	0x07, r24	; 7
    1c9c:	08 95       	ret

00001c9e <ADC1_INIT>:
}

extern void ADC1_INIT()
{
	ADC_CSRA = 0x86 ;
    1c9e:	86 e8       	ldi	r24, 0x86	; 134
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	97 b9       	out	0x07, r25	; 7
    1ca4:	86 b9       	out	0x06, r24	; 6
	ADC_MUX = 0x41 ;
    1ca6:	81 e4       	ldi	r24, 0x41	; 65
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	98 b9       	out	0x08, r25	; 8
    1cac:	87 b9       	out	0x07, r24	; 7
    1cae:	08 95       	ret

00001cb0 <ADC_START>:
}

extern void ADC_START()
{
	ADC_CSRA |= (1<<ADC_SC);
    1cb0:	86 b1       	in	r24, 0x06	; 6
    1cb2:	97 b1       	in	r25, 0x07	; 7
    1cb4:	80 64       	ori	r24, 0x40	; 64
    1cb6:	97 b9       	out	0x07, r25	; 7
    1cb8:	86 b9       	out	0x06, r24	; 6
    1cba:	08 95       	ret

00001cbc <ADC_WAIT_FOR_CONVERSION_END>:
}

extern void ADC_WAIT_FOR_CONVERSION_END()
{
	while (((ADC_CSRA) & (1 << ADC_IF )) == 0);
    1cbc:	86 b1       	in	r24, 0x06	; 6
    1cbe:	97 b1       	in	r25, 0x07	; 7
    1cc0:	84 ff       	sbrs	r24, 4
    1cc2:	fc cf       	rjmp	.-8      	; 0x1cbc <ADC_WAIT_FOR_CONVERSION_END>
}
    1cc4:	08 95       	ret

00001cc6 <ADC0_READ>:

extern void ADC0_READ(uint16_t *pu16ADC0_reading)
{
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	ec 01       	movw	r28, r24
	uint16_t u16ADCL_reading = 0;
	uint16_t u16ADCH_reading = 0;
	uint16_t u16ADC0_reading = 0;
	ADC0_INIT();
    1ccc:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <ADC0_INIT>
	
	ADC_START();
    1cd0:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <ADC_START>
	ADC_WAIT_FOR_CONVERSION_END();
    1cd4:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <ADC_WAIT_FOR_CONVERSION_END>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cd8:	88 e7       	ldi	r24, 0x78	; 120
    1cda:	8a 95       	dec	r24
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <ADC0_READ+0x14>
	
	_delay_us(30);
		
	u16ADCL_reading = (int)ADC_L ;
    1cde:	24 b1       	in	r18, 0x04	; 4
    1ce0:	35 b1       	in	r19, 0x05	; 5
	u16ADCH_reading = (int)ADC_H ;
    1ce2:	85 b1       	in	r24, 0x05	; 5
    1ce4:	96 b1       	in	r25, 0x06	; 6
	
	u16ADC0_reading = u16ADCL_reading | (u16ADCH_reading << 8);
	
	*pu16ADC0_reading = u16ADC0_reading ;
    1ce6:	98 2f       	mov	r25, r24
    1ce8:	88 27       	eor	r24, r24
    1cea:	82 2b       	or	r24, r18
    1cec:	93 2b       	or	r25, r19
    1cee:	99 83       	std	Y+1, r25	; 0x01
    1cf0:	88 83       	st	Y, r24
}
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	08 95       	ret

00001cf8 <ADC1_READ>:

extern void ADC1_READ(uint16_t *pu16ADC1_reading)
{
    1cf8:	cf 93       	push	r28
    1cfa:	df 93       	push	r29
    1cfc:	ec 01       	movw	r28, r24
	uint16_t u16ADCL_reading = 0;
	uint16_t u16ADCH_reading = 0;
	uint16_t u16ADC1_reading = 0;

	ADC1_INIT();
    1cfe:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <ADC1_INIT>
	
	ADC_START();
    1d02:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <ADC_START>
	ADC_WAIT_FOR_CONVERSION_END();
    1d06:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <ADC_WAIT_FOR_CONVERSION_END>
    1d0a:	88 e7       	ldi	r24, 0x78	; 120
    1d0c:	8a 95       	dec	r24
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <ADC1_READ+0x14>
	
	_delay_us(30);

	u16ADCL_reading = (int)ADC_L ;
    1d10:	24 b1       	in	r18, 0x04	; 4
    1d12:	35 b1       	in	r19, 0x05	; 5
	u16ADCH_reading = (int)ADC_H ;
    1d14:	85 b1       	in	r24, 0x05	; 5
    1d16:	96 b1       	in	r25, 0x06	; 6
	
	u16ADC1_reading = u16ADCL_reading | (u16ADCH_reading << 8);
	
	*pu16ADC1_reading = u16ADC1_reading ;
    1d18:	98 2f       	mov	r25, r24
    1d1a:	88 27       	eor	r24, r24
    1d1c:	82 2b       	or	r24, r18
    1d1e:	93 2b       	or	r25, r19
    1d20:	99 83       	std	Y+1, r25	; 0x01
    1d22:	88 83       	st	Y, r24
}
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	08 95       	ret

00001d2a <ADC0_32_READ>:

extern void ADC0_32_READ(uint32_t *pu32ADC0_reading)
{
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	ec 01       	movw	r28, r24
	uint32_t u32ADCL_reading = 0;
	uint32_t u32ADCH_reading = 0;
	uint32_t u32ADC0_reading = 0;
	ADC0_INIT();
    1d30:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <ADC0_INIT>
	
	ADC_START();
    1d34:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <ADC_START>
	ADC_WAIT_FOR_CONVERSION_END();
    1d38:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <ADC_WAIT_FOR_CONVERSION_END>
    1d3c:	88 e7       	ldi	r24, 0x78	; 120
    1d3e:	8a 95       	dec	r24
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <ADC0_32_READ+0x14>
	
	_delay_us(30);
	
	u32ADCL_reading = (int)ADC_L ;
    1d42:	44 b1       	in	r20, 0x04	; 4
    1d44:	55 b1       	in	r21, 0x05	; 5
	u32ADCH_reading = (int)ADC_H ;
    1d46:	85 b1       	in	r24, 0x05	; 5
    1d48:	96 b1       	in	r25, 0x06	; 6
	
	u32ADC0_reading = u32ADCL_reading | (u32ADCH_reading << 8);
	
	*pu32ADC0_reading = u32ADC0_reading ;
    1d4a:	09 2e       	mov	r0, r25
    1d4c:	00 0c       	add	r0, r0
    1d4e:	aa 0b       	sbc	r26, r26
    1d50:	bb 0b       	sbc	r27, r27
    1d52:	ba 2f       	mov	r27, r26
    1d54:	a9 2f       	mov	r26, r25
    1d56:	98 2f       	mov	r25, r24
    1d58:	88 27       	eor	r24, r24
    1d5a:	05 2e       	mov	r0, r21
    1d5c:	00 0c       	add	r0, r0
    1d5e:	66 0b       	sbc	r22, r22
    1d60:	77 0b       	sbc	r23, r23
    1d62:	84 2b       	or	r24, r20
    1d64:	95 2b       	or	r25, r21
    1d66:	a6 2b       	or	r26, r22
    1d68:	b7 2b       	or	r27, r23
    1d6a:	88 83       	st	Y, r24
    1d6c:	99 83       	std	Y+1, r25	; 0x01
    1d6e:	aa 83       	std	Y+2, r26	; 0x02
    1d70:	bb 83       	std	Y+3, r27	; 0x03
}
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	08 95       	ret

00001d78 <ADC1_32_READ>:

extern void ADC1_32_READ(uint32_t *pu32ADC1_reading)
{
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	ec 01       	movw	r28, r24
	uint32_t u32ADCL_reading = 0;
	uint32_t u32ADCH_reading = 0;
	uint32_t u32ADC1_reading = 0;
	
	ADC1_INIT();
    1d7e:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <ADC1_INIT>
	
	ADC_START();
    1d82:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <ADC_START>
	ADC_WAIT_FOR_CONVERSION_END();
    1d86:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <ADC_WAIT_FOR_CONVERSION_END>
    1d8a:	88 e7       	ldi	r24, 0x78	; 120
    1d8c:	8a 95       	dec	r24
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <ADC1_32_READ+0x14>
	
	_delay_us(30);
	
	u32ADCL_reading = (int)ADC_L ;
    1d90:	44 b1       	in	r20, 0x04	; 4
    1d92:	55 b1       	in	r21, 0x05	; 5
	u32ADCH_reading = (int)ADC_H ;
    1d94:	85 b1       	in	r24, 0x05	; 5
    1d96:	96 b1       	in	r25, 0x06	; 6
	
	u32ADC1_reading = u32ADCL_reading | (u32ADCH_reading << 8);
	
	*pu32ADC1_reading = u32ADC1_reading ;
    1d98:	09 2e       	mov	r0, r25
    1d9a:	00 0c       	add	r0, r0
    1d9c:	aa 0b       	sbc	r26, r26
    1d9e:	bb 0b       	sbc	r27, r27
    1da0:	ba 2f       	mov	r27, r26
    1da2:	a9 2f       	mov	r26, r25
    1da4:	98 2f       	mov	r25, r24
    1da6:	88 27       	eor	r24, r24
    1da8:	05 2e       	mov	r0, r21
    1daa:	00 0c       	add	r0, r0
    1dac:	66 0b       	sbc	r22, r22
    1dae:	77 0b       	sbc	r23, r23
    1db0:	84 2b       	or	r24, r20
    1db2:	95 2b       	or	r25, r21
    1db4:	a6 2b       	or	r26, r22
    1db6:	b7 2b       	or	r27, r23
    1db8:	88 83       	st	Y, r24
    1dba:	99 83       	std	Y+1, r25	; 0x01
    1dbc:	aa 83       	std	Y+2, r26	; 0x02
    1dbe:	bb 83       	std	Y+3, r27	; 0x03
}
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	08 95       	ret

00001dc6 <ADC_VALUE_ANALYSE>:


extern void ADC_VALUE_ANALYSE(uint16_t u16ADC_value , uint16_t *pu16ADC_array_value)
{
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	ac 01       	movw	r20, r24
    1dcc:	fb 01       	movw	r30, r22
    1dce:	eb 01       	movw	r28, r22
    1dd0:	28 96       	adiw	r28, 0x08	; 8
	
	uint16_t u16Temp_value = u16ADC_value;
	
	for (u8Count = 0 ; u8Count < 4 ; u8Count ++)
	{
		pu16ADC_array_value[u8Count] = (u16Temp_value % 10) + '0' ;
    1dd2:	9a 01       	movw	r18, r20
    1dd4:	ad ec       	ldi	r26, 0xCD	; 205
    1dd6:	bc ec       	ldi	r27, 0xCC	; 204
    1dd8:	0e 94 05 10 	call	0x200a	; 0x200a <__umulhisi3>
    1ddc:	96 95       	lsr	r25
    1dde:	87 95       	ror	r24
    1de0:	96 95       	lsr	r25
    1de2:	87 95       	ror	r24
    1de4:	96 95       	lsr	r25
    1de6:	87 95       	ror	r24
    1de8:	9c 01       	movw	r18, r24
    1dea:	22 0f       	add	r18, r18
    1dec:	33 1f       	adc	r19, r19
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	88 0f       	add	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	88 0f       	add	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	82 0f       	add	r24, r18
    1dfc:	93 1f       	adc	r25, r19
    1dfe:	9a 01       	movw	r18, r20
    1e00:	28 1b       	sub	r18, r24
    1e02:	39 0b       	sbc	r19, r25
    1e04:	c9 01       	movw	r24, r18
    1e06:	c0 96       	adiw	r24, 0x30	; 48
    1e08:	81 93       	st	Z+, r24
    1e0a:	91 93       	st	Z+, r25
		u16Temp_value /= 10 ;
    1e0c:	9a 01       	movw	r18, r20
    1e0e:	0e 94 05 10 	call	0x200a	; 0x200a <__umulhisi3>
    1e12:	ac 01       	movw	r20, r24
    1e14:	56 95       	lsr	r21
    1e16:	47 95       	ror	r20
    1e18:	56 95       	lsr	r21
    1e1a:	47 95       	ror	r20
    1e1c:	56 95       	lsr	r21
    1e1e:	47 95       	ror	r20
{
	uint8_t u8Count = 0;
	
	uint16_t u16Temp_value = u16ADC_value;
	
	for (u8Count = 0 ; u8Count < 4 ; u8Count ++)
    1e20:	ec 17       	cp	r30, r28
    1e22:	fd 07       	cpc	r31, r29
    1e24:	b1 f6       	brne	.-84     	; 0x1dd2 <ADC_VALUE_ANALYSE+0xc>
	{
		pu16ADC_array_value[u8Count] = (u16Temp_value % 10) + '0' ;
		u16Temp_value /= 10 ;
	}
	
}
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	08 95       	ret

00001e2c <ADC_SHOW_VALUE>:

extern void ADC_SHOW_VALUE(uint16_t *pu16Value)
{
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	ec 01       	movw	r28, r24
	LCD_DATA(pu16Value[3]);
    1e32:	8e 81       	ldd	r24, Y+6	; 0x06
    1e34:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_DATA>
	LCD_DATA('.');
    1e38:	8e e2       	ldi	r24, 0x2E	; 46
    1e3a:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_DATA>
	
	LCD_DATA(pu16Value[2]);
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_DATA>
	LCD_DATA(pu16Value[1]);
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_DATA>
	LCD_DATA(pu16Value[0]);
    1e4a:	88 81       	ld	r24, Y
    1e4c:	0e 94 a5 0c 	call	0x194a	; 0x194a <LCD_DATA>
}
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	08 95       	ret

00001e56 <Pin_set>:
	(*(volatile uint8_t *) (PORT_address)) &= ~(1<<Pin_index);
}

extern void Pin_toggle( unsigned int PORT_address , uint8_t Pin_index)
{
	(*(volatile uint8_t *) (PORT_address)) ^= (1<<Pin_index);
    1e56:	fc 01       	movw	r30, r24
    1e58:	40 81       	ld	r20, Z
    1e5a:	21 e0       	ldi	r18, 0x01	; 1
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <Pin_set+0xe>
    1e60:	22 0f       	add	r18, r18
    1e62:	33 1f       	adc	r19, r19
    1e64:	6a 95       	dec	r22
    1e66:	e2 f7       	brpl	.-8      	; 0x1e60 <Pin_set+0xa>
    1e68:	24 2b       	or	r18, r20
    1e6a:	20 83       	st	Z, r18
    1e6c:	08 95       	ret

00001e6e <Pin_reset>:
    1e6e:	fc 01       	movw	r30, r24
    1e70:	90 81       	ld	r25, Z
    1e72:	21 e0       	ldi	r18, 0x01	; 1
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <Pin_reset+0xe>
    1e78:	22 0f       	add	r18, r18
    1e7a:	33 1f       	adc	r19, r19
    1e7c:	6a 95       	dec	r22
    1e7e:	e2 f7       	brpl	.-8      	; 0x1e78 <Pin_reset+0xa>
    1e80:	20 95       	com	r18
    1e82:	29 23       	and	r18, r25
    1e84:	20 83       	st	Z, r18
    1e86:	08 95       	ret

00001e88 <Pin_mode>:
}

extern void Pin_mode(unsigned int PORT_address , unsigned int DDR_address , uint8_t Pin_index , uint8_t Pin_state)
{
	if (Pin_state == INPUT)
    1e88:	21 11       	cpse	r18, r1
    1e8a:	12 c0       	rjmp	.+36     	; 0x1eb0 <Pin_mode+0x28>
	{
		(*(volatile uint8_t *)(DDR_address)) &= ~(1<<Pin_index) ;
    1e8c:	fb 01       	movw	r30, r22
    1e8e:	50 81       	ld	r21, Z
    1e90:	21 e0       	ldi	r18, 0x01	; 1
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <Pin_mode+0x12>
    1e96:	22 0f       	add	r18, r18
    1e98:	33 1f       	adc	r19, r19
    1e9a:	4a 95       	dec	r20
    1e9c:	e2 f7       	brpl	.-8      	; 0x1e96 <Pin_mode+0xe>
    1e9e:	32 2f       	mov	r19, r18
    1ea0:	30 95       	com	r19
    1ea2:	35 23       	and	r19, r21
    1ea4:	30 83       	st	Z, r19
		(*(volatile uint8_t *)(PORT_address)) |= (1<<Pin_index); // To activate the pull up resistor
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	30 81       	ld	r19, Z
    1eaa:	23 2b       	or	r18, r19
    1eac:	20 83       	st	Z, r18
    1eae:	08 95       	ret
	}
	else if (Pin_state == OUTPUT)
    1eb0:	21 30       	cpi	r18, 0x01	; 1
    1eb2:	59 f4       	brne	.+22     	; 0x1eca <Pin_mode+0x42>
	{
		(*(volatile uint8_t *)(DDR_address )) |= (1<<Pin_index) ;
    1eb4:	fb 01       	movw	r30, r22
    1eb6:	20 81       	ld	r18, Z
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <Pin_mode+0x3a>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	4a 95       	dec	r20
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <Pin_mode+0x36>
    1ec6:	82 2b       	or	r24, r18
    1ec8:	80 83       	st	Z, r24
    1eca:	08 95       	ret

00001ecc <Pin_read>:

extern void Pin_read(unsigned int PIN_address , uint8_t u8Pin_index , volatile uint8_t *pu8PORT_reading)
{
	uint8_t u8Temp = 0;
	
	u8Temp = (*(volatile uint8_t *)(PIN_address)) & (1 << u8Pin_index) ;
    1ecc:	fc 01       	movw	r30, r24
    1ece:	20 81       	ld	r18, Z
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <Pin_read+0xe>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	6a 95       	dec	r22
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <Pin_read+0xa>
    1ede:	82 23       	and	r24, r18
	
	*pu8PORT_reading = u8Temp ;
    1ee0:	fa 01       	movw	r30, r20
    1ee2:	80 83       	st	Z, r24
    1ee4:	08 95       	ret

00001ee6 <__vector_11>:
{
	TCIMSK |= (1 << TOIE0);
}

ISR(TIMER0_OVF_vect)
{
    1ee6:	1f 92       	push	r1
    1ee8:	0f 92       	push	r0
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	0f 92       	push	r0
    1eee:	11 24       	eor	r1, r1
    1ef0:	8f 93       	push	r24
	gu8Flag ++ ;
    1ef2:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <gu8Flag>
    1ef6:	8f 5f       	subi	r24, 0xFF	; 255
    1ef8:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <gu8Flag>
    1efc:	8f 91       	pop	r24
    1efe:	0f 90       	pop	r0
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	0f 90       	pop	r0
    1f04:	1f 90       	pop	r1
    1f06:	18 95       	reti

00001f08 <T1_PWM_INIT>:

extern volatile uint8_t gu8T1_flag ;

extern void T1_PWM_INIT(void)
{
	TCCR_1A = 0x00 ;
    1f08:	10 be       	out	0x30, r1	; 48
    1f0a:	1f bc       	out	0x2f, r1	; 47
	TCCR_1B = 0x00 ;
    1f0c:	1f bc       	out	0x2f, r1	; 47
    1f0e:	1e bc       	out	0x2e, r1	; 46
	
	TCCR_1A |= 0xa1 ;
    1f10:	8f b5       	in	r24, 0x2f	; 47
    1f12:	90 b7       	in	r25, 0x30	; 48
    1f14:	81 6a       	ori	r24, 0xA1	; 161
    1f16:	90 bf       	out	0x30, r25	; 48
    1f18:	8f bd       	out	0x2f, r24	; 47
	TCCR_1B |= 0x0a ;
    1f1a:	8e b5       	in	r24, 0x2e	; 46
    1f1c:	9f b5       	in	r25, 0x2f	; 47
    1f1e:	8a 60       	ori	r24, 0x0A	; 10
    1f20:	9f bd       	out	0x2f, r25	; 47
    1f22:	8e bd       	out	0x2e, r24	; 46
    1f24:	08 95       	ret

00001f26 <T1_PWM_DEINIT>:
}

extern void T1_PWM_DEINIT(void)
{
	TCCR_1A = 0x00;
    1f26:	10 be       	out	0x30, r1	; 48
    1f28:	1f bc       	out	0x2f, r1	; 47
	TCCR_1B = 0x00;
    1f2a:	1f bc       	out	0x2f, r1	; 47
    1f2c:	1e bc       	out	0x2e, r1	; 46
	
	TOCR1A_1L = 0x00;
    1f2e:	1b bc       	out	0x2b, r1	; 43
    1f30:	1a bc       	out	0x2a, r1	; 42
	TOCR1B_1L = 0x00;
    1f32:	19 bc       	out	0x29, r1	; 41
    1f34:	18 bc       	out	0x28, r1	; 40
    1f36:	08 95       	ret

00001f38 <T1_PWM_DUTY_CYCLE>:
}

extern void T1_PWM_DUTY_CYCLE(uint32_t u32Duty_cycle_A , uint32_t u32Duty_cycle_B)
{
    1f38:	cf 92       	push	r12
    1f3a:	df 92       	push	r13
    1f3c:	ef 92       	push	r14
    1f3e:	ff 92       	push	r15
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	69 01       	movw	r12, r18
    1f46:	7a 01       	movw	r14, r20
	TOCR1A_1L = 0x00 ;
    1f48:	1b bc       	out	0x2b, r1	; 43
    1f4a:	1a bc       	out	0x2a, r1	; 42
	TOCR1B_1L = 0x00 ;
    1f4c:	19 bc       	out	0x29, r1	; 41
    1f4e:	18 bc       	out	0x28, r1	; 40
	
	if (u32Duty_cycle_A >= 1 )
    1f50:	61 15       	cp	r22, r1
    1f52:	71 05       	cpc	r23, r1
    1f54:	81 05       	cpc	r24, r1
    1f56:	91 05       	cpc	r25, r1
    1f58:	99 f0       	breq	.+38     	; 0x1f80 <T1_PWM_DUTY_CYCLE+0x48>
	{
		TOCR1A_1L |= ((u32Duty_cycle_A * 256) / 100) -1 ;
    1f5a:	ca b5       	in	r28, 0x2a	; 42
    1f5c:	db b5       	in	r29, 0x2b	; 43
    1f5e:	98 2f       	mov	r25, r24
    1f60:	87 2f       	mov	r24, r23
    1f62:	76 2f       	mov	r23, r22
    1f64:	66 27       	eor	r22, r22
    1f66:	24 e6       	ldi	r18, 0x64	; 100
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
    1f6e:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__udivmodsi4>
    1f72:	21 50       	subi	r18, 0x01	; 1
    1f74:	31 09       	sbc	r19, r1
    1f76:	2c 2b       	or	r18, r28
    1f78:	3d 2b       	or	r19, r29
    1f7a:	3b bd       	out	0x2b, r19	; 43
    1f7c:	2a bd       	out	0x2a, r18	; 42
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <T1_PWM_DUTY_CYCLE+0x4c>
	}
	else
	{
		TOCR1A_1L = 0x00 ;
    1f80:	1b bc       	out	0x2b, r1	; 43
    1f82:	1a bc       	out	0x2a, r1	; 42
	}
	if (u32Duty_cycle_B >= 1 )
    1f84:	c1 14       	cp	r12, r1
    1f86:	d1 04       	cpc	r13, r1
    1f88:	e1 04       	cpc	r14, r1
    1f8a:	f1 04       	cpc	r15, r1
    1f8c:	99 f0       	breq	.+38     	; 0x1fb4 <T1_PWM_DUTY_CYCLE+0x7c>
	{
		TOCR1B_1L |= ((u32Duty_cycle_B * 256) / 100) -1 ;
    1f8e:	c8 b5       	in	r28, 0x28	; 40
    1f90:	d9 b5       	in	r29, 0x29	; 41
    1f92:	9e 2d       	mov	r25, r14
    1f94:	8d 2d       	mov	r24, r13
    1f96:	7c 2d       	mov	r23, r12
    1f98:	66 27       	eor	r22, r22
    1f9a:	24 e6       	ldi	r18, 0x64	; 100
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	50 e0       	ldi	r21, 0x00	; 0
    1fa2:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__udivmodsi4>
    1fa6:	21 50       	subi	r18, 0x01	; 1
    1fa8:	31 09       	sbc	r19, r1
    1faa:	2c 2b       	or	r18, r28
    1fac:	3d 2b       	or	r19, r29
    1fae:	39 bd       	out	0x29, r19	; 41
    1fb0:	28 bd       	out	0x28, r18	; 40
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <T1_PWM_DUTY_CYCLE+0x80>
	}
	else
	{
		TOCR1B_1L = 0x00 ;
    1fb4:	19 bc       	out	0x29, r1	; 41
    1fb6:	18 bc       	out	0x28, r1	; 40
	}
}
    1fb8:	df 91       	pop	r29
    1fba:	cf 91       	pop	r28
    1fbc:	ff 90       	pop	r15
    1fbe:	ef 90       	pop	r14
    1fc0:	df 90       	pop	r13
    1fc2:	cf 90       	pop	r12
    1fc4:	08 95       	ret

00001fc6 <__udivmodsi4>:
    1fc6:	a1 e2       	ldi	r26, 0x21	; 33
    1fc8:	1a 2e       	mov	r1, r26
    1fca:	aa 1b       	sub	r26, r26
    1fcc:	bb 1b       	sub	r27, r27
    1fce:	fd 01       	movw	r30, r26
    1fd0:	0d c0       	rjmp	.+26     	; 0x1fec <__udivmodsi4_ep>

00001fd2 <__udivmodsi4_loop>:
    1fd2:	aa 1f       	adc	r26, r26
    1fd4:	bb 1f       	adc	r27, r27
    1fd6:	ee 1f       	adc	r30, r30
    1fd8:	ff 1f       	adc	r31, r31
    1fda:	a2 17       	cp	r26, r18
    1fdc:	b3 07       	cpc	r27, r19
    1fde:	e4 07       	cpc	r30, r20
    1fe0:	f5 07       	cpc	r31, r21
    1fe2:	20 f0       	brcs	.+8      	; 0x1fec <__udivmodsi4_ep>
    1fe4:	a2 1b       	sub	r26, r18
    1fe6:	b3 0b       	sbc	r27, r19
    1fe8:	e4 0b       	sbc	r30, r20
    1fea:	f5 0b       	sbc	r31, r21

00001fec <__udivmodsi4_ep>:
    1fec:	66 1f       	adc	r22, r22
    1fee:	77 1f       	adc	r23, r23
    1ff0:	88 1f       	adc	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	1a 94       	dec	r1
    1ff6:	69 f7       	brne	.-38     	; 0x1fd2 <__udivmodsi4_loop>
    1ff8:	60 95       	com	r22
    1ffa:	70 95       	com	r23
    1ffc:	80 95       	com	r24
    1ffe:	90 95       	com	r25
    2000:	9b 01       	movw	r18, r22
    2002:	ac 01       	movw	r20, r24
    2004:	bd 01       	movw	r22, r26
    2006:	cf 01       	movw	r24, r30
    2008:	08 95       	ret

0000200a <__umulhisi3>:
    200a:	a2 9f       	mul	r26, r18
    200c:	b0 01       	movw	r22, r0
    200e:	b3 9f       	mul	r27, r19
    2010:	c0 01       	movw	r24, r0
    2012:	a3 9f       	mul	r26, r19
    2014:	70 0d       	add	r23, r0
    2016:	81 1d       	adc	r24, r1
    2018:	11 24       	eor	r1, r1
    201a:	91 1d       	adc	r25, r1
    201c:	b2 9f       	mul	r27, r18
    201e:	70 0d       	add	r23, r0
    2020:	81 1d       	adc	r24, r1
    2022:	11 24       	eor	r1, r1
    2024:	91 1d       	adc	r25, r1
    2026:	08 95       	ret

00002028 <__muluhisi3>:
    2028:	0e 94 05 10 	call	0x200a	; 0x200a <__umulhisi3>
    202c:	a5 9f       	mul	r26, r21
    202e:	90 0d       	add	r25, r0
    2030:	b4 9f       	mul	r27, r20
    2032:	90 0d       	add	r25, r0
    2034:	a4 9f       	mul	r26, r20
    2036:	80 0d       	add	r24, r0
    2038:	91 1d       	adc	r25, r1
    203a:	11 24       	eor	r1, r1
    203c:	08 95       	ret

0000203e <_exit>:
    203e:	f8 94       	cli

00002040 <__stop_program>:
    2040:	ff cf       	rjmp	.-2      	; 0x2040 <__stop_program>
