
AMIT_LEARNING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00800060  000015b8  0000164c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080013e  0080013e  0000172a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000172a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a0f  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010c9  00000000  00000000  000064d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002436  00000000  00000000  000075a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000788  00000000  00000000  000099d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c09  00000000  00000000  0000a160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000282c  00000000  00000000  0000ad69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000d595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 33       	cpi	r26, 0x3E	; 62
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae e3       	ldi	r26, 0x3E	; 62
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 35       	cpi	r26, 0x50	; 80
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 24 0a 	call	0x1448	; 0x1448 <main>
      8a:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GET_KEY_ROW>:
	}
	
}

extern void GET_KEY_ROW(uint8_t *pu8Captured_row)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	ec 01       	movw	r28, r24
	SET_ROWS_INPUT();
      98:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <SET_ROWS_INPUT>
	POWER_ALL_ROWS(); // To deactivate pull up resistors
      9c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <POWER_ALL_ROWS>
	
	SET_COLUMNS_OUTPUT();
      a0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <SET_COLUMNS_OUTPUT>
	GROUND_ALL_COLUMNS();
      a4:	0e 94 46 07 	call	0xe8c	; 0xe8c <GROUND_ALL_COLUMNS>
	
	while (1)
	{
		READ_ROW1(&u8Row1_reading);
      a8:	83 e4       	ldi	r24, 0x43	; 67
      aa:	91 e0       	ldi	r25, 0x01	; 1
      ac:	0e 94 07 06 	call	0xc0e	; 0xc0e <READ_ROW1>
		
		if (u8Row1_reading == 0)
      b0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8Row1_reading>
      b4:	81 11       	cpse	r24, r1
      b6:	02 c0       	rjmp	.+4      	; 0xbc <GET_KEY_ROW+0x2a>
		{
			*pu8Captured_row = ROW1 ;
      b8:	18 82       	st	Y, r1
			break;
      ba:	20 c0       	rjmp	.+64     	; 0xfc <GET_KEY_ROW+0x6a>
		else
		{
			
		}
		
		READ_ROW2(&u8Row2_reading);
      bc:	82 e4       	ldi	r24, 0x42	; 66
      be:	91 e0       	ldi	r25, 0x01	; 1
      c0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <READ_ROW2>
		
		if (u8Row2_reading == 0)
      c4:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <u8Row2_reading>
      c8:	81 11       	cpse	r24, r1
      ca:	03 c0       	rjmp	.+6      	; 0xd2 <GET_KEY_ROW+0x40>
		{
			*pu8Captured_row = ROW2 ;
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	88 83       	st	Y, r24
			break;
      d0:	15 c0       	rjmp	.+42     	; 0xfc <GET_KEY_ROW+0x6a>
		else
		{
			
		}
		
		READ_ROW3(&u8Row3_reading);
      d2:	81 e4       	ldi	r24, 0x41	; 65
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	0e 94 75 06 	call	0xcea	; 0xcea <READ_ROW3>
		
		if (u8Row3_reading == 0)
      da:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <u8Row3_reading>
      de:	81 11       	cpse	r24, r1
      e0:	03 c0       	rjmp	.+6      	; 0xe8 <GET_KEY_ROW+0x56>
		{
			*pu8Captured_row = ROW3 ;
      e2:	82 e0       	ldi	r24, 0x02	; 2
      e4:	88 83       	st	Y, r24
			break;
      e6:	0a c0       	rjmp	.+20     	; 0xfc <GET_KEY_ROW+0x6a>
		else
		{
			
		}
		
		READ_ROW4(&u8Row4_reading);
      e8:	80 e4       	ldi	r24, 0x40	; 64
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	0e 94 ac 06 	call	0xd58	; 0xd58 <READ_ROW4>
		
		if (u8Row4_reading == 0)
      f0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8Row4_reading>
      f4:	81 11       	cpse	r24, r1
      f6:	d8 cf       	rjmp	.-80     	; 0xa8 <GET_KEY_ROW+0x16>
		{
			*pu8Captured_row = ROW4 ;
      f8:	83 e0       	ldi	r24, 0x03	; 3
      fa:	88 83       	st	Y, r24
			
		}

	}
		
	GROUND_ALL_COLUMNS();
      fc:	0e 94 46 07 	call	0xe8c	; 0xe8c <GROUND_ALL_COLUMNS>
	
}
     100:	df 91       	pop	r29
     102:	cf 91       	pop	r28
     104:	08 95       	ret

00000106 <GET_KEY_COLUMN>:

extern void GET_KEY_COLUMN(uint8_t *pu8Captured_column)
{
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	ec 01       	movw	r28, r24
	SET_COLUMNS_INPUT();
     10c:	0e 94 37 08 	call	0x106e	; 0x106e <SET_COLUMNS_INPUT>
	POWER_ALL_COLUMNS(); // To activate pull up resistors
     110:	0e 94 3d 07 	call	0xe7a	; 0xe7a <POWER_ALL_COLUMNS>
	
	SET_ROWS_OUTPUT();
     114:	0e 94 04 07 	call	0xe08	; 0xe08 <SET_ROWS_OUTPUT>
	GROUND_ALL_ROWS();
     118:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <GROUND_ALL_ROWS>
	
	while (1)
	{
		READ_COLUMN1(&u8Column1_reading);
     11c:	87 e4       	ldi	r24, 0x47	; 71
     11e:	91 e0       	ldi	r25, 0x01	; 1
     120:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <READ_COLUMN1>
		
		if (u8Column1_reading == 0)
     124:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8Column1_reading>
     128:	81 11       	cpse	r24, r1
     12a:	02 c0       	rjmp	.+4      	; 0x130 <GET_KEY_COLUMN+0x2a>
		{
			*pu8Captured_column = COLUMN1 ;
     12c:	18 82       	st	Y, r1
			break;
     12e:	20 c0       	rjmp	.+64     	; 0x170 <GET_KEY_COLUMN+0x6a>
		else
		{
			
		}
		
		READ_COLUMN2(&u8Column2_reading);
     130:	86 e4       	ldi	r24, 0x46	; 70
     132:	91 e0       	ldi	r25, 0x01	; 1
     134:	0e 94 92 07 	call	0xf24	; 0xf24 <READ_COLUMN2>
		
		if (u8Column2_reading == 0)
     138:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8Column2_reading>
     13c:	81 11       	cpse	r24, r1
     13e:	03 c0       	rjmp	.+6      	; 0x146 <GET_KEY_COLUMN+0x40>
		{
			*pu8Captured_column = COLUMN2 ;
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	88 83       	st	Y, r24
			break;
     144:	15 c0       	rjmp	.+42     	; 0x170 <GET_KEY_COLUMN+0x6a>
		else
		{
			
		}
		
		READ_COLUMN3(&u8Column3_reading);
     146:	85 e4       	ldi	r24, 0x45	; 69
     148:	91 e0       	ldi	r25, 0x01	; 1
     14a:	0e 94 c9 07 	call	0xf92	; 0xf92 <READ_COLUMN3>
		
		if (u8Column3_reading == 0)
     14e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8Column3_reading>
     152:	81 11       	cpse	r24, r1
     154:	03 c0       	rjmp	.+6      	; 0x15c <GET_KEY_COLUMN+0x56>
		{
			*pu8Captured_column = COLUMN3 ;
     156:	82 e0       	ldi	r24, 0x02	; 2
     158:	88 83       	st	Y, r24
			break;
     15a:	0a c0       	rjmp	.+20     	; 0x170 <GET_KEY_COLUMN+0x6a>
		else
		{
			
		}
		
		READ_COLUMN4(&u8Column4_reading);
     15c:	84 e4       	ldi	r24, 0x44	; 68
     15e:	91 e0       	ldi	r25, 0x01	; 1
     160:	0e 94 00 08 	call	0x1000	; 0x1000 <READ_COLUMN4>
		
		if (u8Column4_reading == 0)
     164:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8Column4_reading>
     168:	81 11       	cpse	r24, r1
     16a:	d8 cf       	rjmp	.-80     	; 0x11c <GET_KEY_COLUMN+0x16>
		{
			*pu8Captured_column = COLUMN4 ;
     16c:	83 e0       	ldi	r24, 0x03	; 3
     16e:	88 83       	st	Y, r24
			
		}
		
	}
	
	GROUND_ALL_ROWS();
     170:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <GROUND_ALL_ROWS>
}
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	08 95       	ret

0000017a <ANALYZE_PRESS>:

extern void ANALYZE_PRESS(uint8_t u8Temp_character )
{
	if (u8Temp_character == '2')
     17a:	82 33       	cpi	r24, 0x32	; 50
     17c:	f1 f4       	brne	.+60     	; 0x1ba <ANALYZE_PRESS+0x40>
	{
		if (u8Key_sequence == 0)
     17e:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <u8Key_sequence>
     182:	91 11       	cpse	r25, r1
     184:	07 c0       	rjmp	.+14     	; 0x194 <ANALYZE_PRESS+0x1a>
		{
			u8Entered_character = 'A';
     186:	91 e4       	ldi	r25, 0x41	; 65
     188:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <u8Key_sequence>
     192:	53 c0       	rjmp	.+166    	; 0x23a <ANALYZE_PRESS+0xc0>
		}
		else if (u8Key_sequence == 1)
     194:	91 30       	cpi	r25, 0x01	; 1
     196:	39 f4       	brne	.+14     	; 0x1a6 <ANALYZE_PRESS+0x2c>
		{
			u8Entered_character = 'B';
     198:	92 e4       	ldi	r25, 0x42	; 66
     19a:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     19e:	92 e0       	ldi	r25, 0x02	; 2
     1a0:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <u8Key_sequence>
     1a4:	4a c0       	rjmp	.+148    	; 0x23a <ANALYZE_PRESS+0xc0>
		}
		else if (u8Key_sequence == 2)
     1a6:	92 30       	cpi	r25, 0x02	; 2
     1a8:	09 f0       	breq	.+2      	; 0x1ac <ANALYZE_PRESS+0x32>
     1aa:	47 c0       	rjmp	.+142    	; 0x23a <ANALYZE_PRESS+0xc0>
		{
			u8Entered_character = 'C';
     1ac:	93 e4       	ldi	r25, 0x43	; 67
     1ae:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u8Entered_character>
			u8Key_sequence = '5' ;
     1b2:	95 e3       	ldi	r25, 0x35	; 53
     1b4:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <u8Key_sequence>
     1b8:	40 c0       	rjmp	.+128    	; 0x23a <ANALYZE_PRESS+0xc0>
		}
	}
	
	if (u8Temp_character == '3')
     1ba:	83 33       	cpi	r24, 0x33	; 51
     1bc:	f1 f4       	brne	.+60     	; 0x1fa <ANALYZE_PRESS+0x80>
	{
		if (u8Key_sequence == 0)
     1be:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <u8Key_sequence>
     1c2:	91 11       	cpse	r25, r1
     1c4:	07 c0       	rjmp	.+14     	; 0x1d4 <ANALYZE_PRESS+0x5a>
		{
			u8Entered_character = 'D';
     1c6:	94 e4       	ldi	r25, 0x44	; 68
     1c8:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <u8Key_sequence>
     1d2:	53 c0       	rjmp	.+166    	; 0x27a <ANALYZE_PRESS+0x100>
		}
		else if (u8Key_sequence == 1)
     1d4:	91 30       	cpi	r25, 0x01	; 1
     1d6:	39 f4       	brne	.+14     	; 0x1e6 <ANALYZE_PRESS+0x6c>
		{
			u8Entered_character = 'E';
     1d8:	95 e4       	ldi	r25, 0x45	; 69
     1da:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     1de:	92 e0       	ldi	r25, 0x02	; 2
     1e0:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <u8Key_sequence>
     1e4:	4a c0       	rjmp	.+148    	; 0x27a <ANALYZE_PRESS+0x100>
		}
		else if (u8Key_sequence == 2)
     1e6:	92 30       	cpi	r25, 0x02	; 2
     1e8:	09 f0       	breq	.+2      	; 0x1ec <ANALYZE_PRESS+0x72>
     1ea:	47 c0       	rjmp	.+142    	; 0x27a <ANALYZE_PRESS+0x100>
		{
			u8Entered_character = 'F';
     1ec:	96 e4       	ldi	r25, 0x46	; 70
     1ee:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u8Entered_character>
			u8Key_sequence = '5' ;
     1f2:	95 e3       	ldi	r25, 0x35	; 53
     1f4:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <u8Key_sequence>
     1f8:	40 c0       	rjmp	.+128    	; 0x27a <ANALYZE_PRESS+0x100>
		}
	}
	
	if (u8Temp_character == '4')
     1fa:	84 33       	cpi	r24, 0x34	; 52
     1fc:	f1 f4       	brne	.+60     	; 0x23a <ANALYZE_PRESS+0xc0>
	{
		if (u8Key_sequence == 0)
     1fe:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <u8Key_sequence>
     202:	91 11       	cpse	r25, r1
     204:	07 c0       	rjmp	.+14     	; 0x214 <ANALYZE_PRESS+0x9a>
		{
			u8Entered_character = 'G';
     206:	97 e4       	ldi	r25, 0x47	; 71
     208:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <u8Key_sequence>
     212:	53 c0       	rjmp	.+166    	; 0x2ba <ANALYZE_PRESS+0x140>
		}
		else if (u8Key_sequence == 1)
     214:	91 30       	cpi	r25, 0x01	; 1
     216:	39 f4       	brne	.+14     	; 0x226 <ANALYZE_PRESS+0xac>
		{
			u8Entered_character = 'H';
     218:	98 e4       	ldi	r25, 0x48	; 72
     21a:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     21e:	92 e0       	ldi	r25, 0x02	; 2
     220:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <u8Key_sequence>
     224:	4a c0       	rjmp	.+148    	; 0x2ba <ANALYZE_PRESS+0x140>
		}
		else if (u8Key_sequence == 2)
     226:	92 30       	cpi	r25, 0x02	; 2
     228:	09 f0       	breq	.+2      	; 0x22c <ANALYZE_PRESS+0xb2>
     22a:	47 c0       	rjmp	.+142    	; 0x2ba <ANALYZE_PRESS+0x140>
		{
			u8Entered_character = 'I';
     22c:	99 e4       	ldi	r25, 0x49	; 73
     22e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u8Entered_character>
			u8Key_sequence = '5' ;
     232:	95 e3       	ldi	r25, 0x35	; 53
     234:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <u8Key_sequence>
     238:	40 c0       	rjmp	.+128    	; 0x2ba <ANALYZE_PRESS+0x140>
		}
	}
	
	if (u8Temp_character == '5')
     23a:	85 33       	cpi	r24, 0x35	; 53
     23c:	f1 f4       	brne	.+60     	; 0x27a <ANALYZE_PRESS+0x100>
	{
		if (u8Key_sequence == 0)
     23e:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <u8Key_sequence>
     242:	91 11       	cpse	r25, r1
     244:	07 c0       	rjmp	.+14     	; 0x254 <ANALYZE_PRESS+0xda>
		{
			u8Entered_character = 'J';
     246:	9a e4       	ldi	r25, 0x4A	; 74
     248:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <u8Key_sequence>
     252:	5c c0       	rjmp	.+184    	; 0x30c <ANALYZE_PRESS+0x192>
		}
		else if (u8Key_sequence == 1)
     254:	91 30       	cpi	r25, 0x01	; 1
     256:	39 f4       	brne	.+14     	; 0x266 <ANALYZE_PRESS+0xec>
		{
			u8Entered_character = 'K';
     258:	9b e4       	ldi	r25, 0x4B	; 75
     25a:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     25e:	92 e0       	ldi	r25, 0x02	; 2
     260:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <u8Key_sequence>
     264:	53 c0       	rjmp	.+166    	; 0x30c <ANALYZE_PRESS+0x192>
		}
		else if (u8Key_sequence == 2)
     266:	92 30       	cpi	r25, 0x02	; 2
     268:	09 f0       	breq	.+2      	; 0x26c <ANALYZE_PRESS+0xf2>
     26a:	50 c0       	rjmp	.+160    	; 0x30c <ANALYZE_PRESS+0x192>
		{
			u8Entered_character = 'L';
     26c:	9c e4       	ldi	r25, 0x4C	; 76
     26e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u8Entered_character>
			u8Key_sequence = '5' ;
     272:	95 e3       	ldi	r25, 0x35	; 53
     274:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <u8Key_sequence>
     278:	49 c0       	rjmp	.+146    	; 0x30c <ANALYZE_PRESS+0x192>
		}
	}
	
	if (u8Temp_character == '6')
     27a:	86 33       	cpi	r24, 0x36	; 54
     27c:	f1 f4       	brne	.+60     	; 0x2ba <ANALYZE_PRESS+0x140>
	{
		if (u8Key_sequence == 0)
     27e:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <u8Key_sequence>
     282:	91 11       	cpse	r25, r1
     284:	07 c0       	rjmp	.+14     	; 0x294 <ANALYZE_PRESS+0x11a>
		{
			u8Entered_character = 'M';
     286:	9d e4       	ldi	r25, 0x4D	; 77
     288:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <u8Key_sequence>
     292:	5b c0       	rjmp	.+182    	; 0x34a <ANALYZE_PRESS+0x1d0>
		}
		else if (u8Key_sequence == 1)
     294:	91 30       	cpi	r25, 0x01	; 1
     296:	39 f4       	brne	.+14     	; 0x2a6 <ANALYZE_PRESS+0x12c>
		{
			u8Entered_character = 'N';
     298:	9e e4       	ldi	r25, 0x4E	; 78
     29a:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     29e:	92 e0       	ldi	r25, 0x02	; 2
     2a0:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <u8Key_sequence>
     2a4:	52 c0       	rjmp	.+164    	; 0x34a <ANALYZE_PRESS+0x1d0>
		}
		else if (u8Key_sequence == 2)
     2a6:	92 30       	cpi	r25, 0x02	; 2
     2a8:	09 f0       	breq	.+2      	; 0x2ac <ANALYZE_PRESS+0x132>
     2aa:	4f c0       	rjmp	.+158    	; 0x34a <ANALYZE_PRESS+0x1d0>
		{
			u8Entered_character = 'O';
     2ac:	9f e4       	ldi	r25, 0x4F	; 79
     2ae:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u8Entered_character>
			u8Key_sequence = '5' ;
     2b2:	95 e3       	ldi	r25, 0x35	; 53
     2b4:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <u8Key_sequence>
     2b8:	48 c0       	rjmp	.+144    	; 0x34a <ANALYZE_PRESS+0x1d0>
		}
	}
	
	if (u8Temp_character == '7')
     2ba:	87 33       	cpi	r24, 0x37	; 55
     2bc:	39 f5       	brne	.+78     	; 0x30c <ANALYZE_PRESS+0x192>
	{
		if (u8Key_sequence == 0)
     2be:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8Key_sequence>
     2c2:	81 11       	cpse	r24, r1
     2c4:	07 c0       	rjmp	.+14     	; 0x2d4 <ANALYZE_PRESS+0x15a>
		{
			u8Entered_character = 'P';
     2c6:	80 e5       	ldi	r24, 0x50	; 80
     2c8:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8Key_sequence>
     2d2:	08 95       	ret
		}
		else if (u8Key_sequence == 1)
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	39 f4       	brne	.+14     	; 0x2e6 <ANALYZE_PRESS+0x16c>
		{
			u8Entered_character = 'Q';
     2d8:	81 e5       	ldi	r24, 0x51	; 81
     2da:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8Key_sequence>
     2e4:	08 95       	ret
		}
		else if (u8Key_sequence == 2)
     2e6:	82 30       	cpi	r24, 0x02	; 2
     2e8:	39 f4       	brne	.+14     	; 0x2f8 <ANALYZE_PRESS+0x17e>
		{
			u8Entered_character = 'R';
     2ea:	82 e5       	ldi	r24, 0x52	; 82
     2ec:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     2f0:	83 e0       	ldi	r24, 0x03	; 3
     2f2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8Key_sequence>
     2f6:	08 95       	ret
		}
		else if (u8Key_sequence == 3)
     2f8:	83 30       	cpi	r24, 0x03	; 3
     2fa:	09 f0       	breq	.+2      	; 0x2fe <ANALYZE_PRESS+0x184>
     2fc:	4d c0       	rjmp	.+154    	; 0x398 <ANALYZE_PRESS+0x21e>
		{
			u8Entered_character = 'S';
     2fe:	83 e5       	ldi	r24, 0x53	; 83
     300:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8Entered_character>
			u8Key_sequence = '5' ;
     304:	85 e3       	ldi	r24, 0x35	; 53
     306:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8Key_sequence>
     30a:	08 95       	ret
		}
	}
	
	if (u8Temp_character == '8')
     30c:	88 33       	cpi	r24, 0x38	; 56
     30e:	e9 f4       	brne	.+58     	; 0x34a <ANALYZE_PRESS+0x1d0>
	{
		if (u8Key_sequence == 0)
     310:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8Key_sequence>
     314:	81 11       	cpse	r24, r1
     316:	07 c0       	rjmp	.+14     	; 0x326 <ANALYZE_PRESS+0x1ac>
		{
			u8Entered_character = 'T';
     318:	84 e5       	ldi	r24, 0x54	; 84
     31a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8Key_sequence>
     324:	08 95       	ret
		}
		else if (u8Key_sequence == 1)
     326:	81 30       	cpi	r24, 0x01	; 1
     328:	39 f4       	brne	.+14     	; 0x338 <ANALYZE_PRESS+0x1be>
		{
			u8Entered_character = 'U';
     32a:	85 e5       	ldi	r24, 0x55	; 85
     32c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8Key_sequence>
     336:	08 95       	ret
		}
		else if (u8Key_sequence == 2)
     338:	82 30       	cpi	r24, 0x02	; 2
     33a:	71 f5       	brne	.+92     	; 0x398 <ANALYZE_PRESS+0x21e>
		{
			u8Entered_character = 'V';
     33c:	86 e5       	ldi	r24, 0x56	; 86
     33e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8Entered_character>
			u8Key_sequence = '5' ;
     342:	85 e3       	ldi	r24, 0x35	; 53
     344:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8Key_sequence>
     348:	08 95       	ret
		}
	}
	
	if (u8Temp_character == '9')
     34a:	89 33       	cpi	r24, 0x39	; 57
     34c:	29 f5       	brne	.+74     	; 0x398 <ANALYZE_PRESS+0x21e>
	{
		if (u8Key_sequence == 0)
     34e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8Key_sequence>
     352:	81 11       	cpse	r24, r1
     354:	07 c0       	rjmp	.+14     	; 0x364 <ANALYZE_PRESS+0x1ea>
		{
			u8Entered_character = 'W';
     356:	87 e5       	ldi	r24, 0x57	; 87
     358:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8Key_sequence>
     362:	08 95       	ret
		}
		else if (u8Key_sequence == 1)
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	39 f4       	brne	.+14     	; 0x376 <ANALYZE_PRESS+0x1fc>
		{
			u8Entered_character = 'X';
     368:	88 e5       	ldi	r24, 0x58	; 88
     36a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     36e:	82 e0       	ldi	r24, 0x02	; 2
     370:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8Key_sequence>
     374:	08 95       	ret
		}
		else if (u8Key_sequence == 2)
     376:	82 30       	cpi	r24, 0x02	; 2
     378:	39 f4       	brne	.+14     	; 0x388 <ANALYZE_PRESS+0x20e>
		{
			u8Entered_character = 'Y';
     37a:	89 e5       	ldi	r24, 0x59	; 89
     37c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8Entered_character>
			u8Key_sequence ++ ;
     380:	83 e0       	ldi	r24, 0x03	; 3
     382:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8Key_sequence>
     386:	08 95       	ret
		}
		else if (u8Key_sequence == 3)
     388:	83 30       	cpi	r24, 0x03	; 3
     38a:	31 f4       	brne	.+12     	; 0x398 <ANALYZE_PRESS+0x21e>
		{
			u8Entered_character = 'Z';
     38c:	8a e5       	ldi	r24, 0x5A	; 90
     38e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8Entered_character>
			u8Key_sequence = '5' ;
     392:	85 e3       	ldi	r24, 0x35	; 53
     394:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8Key_sequence>
     398:	08 95       	ret

0000039a <KEYPAD_WITH_LCD>:
static uint8_t u8Statement_p2_2_size = sizeof(u8Statement_p2_2);
static uint8_t u8Statement_p3_1_size = sizeof(u8Statement_p3_1);
static uint8_t u8Statement_p3_2_size = sizeof(u8Statement_p3_2);
	
extern void KEYPAD_WITH_LCD()
{
     39a:	8f 92       	push	r8
     39c:	9f 92       	push	r9
     39e:	bf 92       	push	r11
     3a0:	cf 92       	push	r12
     3a2:	df 92       	push	r13
     3a4:	ef 92       	push	r14
     3a6:	ff 92       	push	r15
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
     3b4:	6c 97       	sbiw	r28, 0x1c	; 28
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8ID_check = 0;
	uint8_t u8Password_check = 0;
	
	uint8_t u8Temp_character = 0;
	
	gu8Password_right = 0;
     3c0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <gu8Password_right>
	
	unsigned char u8Entered_password[MAXIMUM_NUMBER_OF_LETTERS] = {0};
     3c4:	87 e0       	ldi	r24, 0x07	; 7
     3c6:	fe 01       	movw	r30, r28
     3c8:	31 96       	adiw	r30, 0x01	; 1
     3ca:	df 01       	movw	r26, r30
     3cc:	28 2f       	mov	r18, r24
     3ce:	1d 92       	st	X+, r1
     3d0:	2a 95       	dec	r18
     3d2:	e9 f7       	brne	.-6      	; 0x3ce <KEYPAD_WITH_LCD+0x34>
	unsigned char u8Entered_ID[MAXIMUM_NUMBER_OF_LETTERS] = {0};
     3d4:	37 96       	adiw	r30, 0x07	; 7
     3d6:	df 01       	movw	r26, r30
     3d8:	28 2f       	mov	r18, r24
     3da:	1d 92       	st	X+, r1
     3dc:	2a 95       	dec	r18
     3de:	e9 f7       	brne	.-6      	; 0x3da <KEYPAD_WITH_LCD+0x40>
		
	unsigned char u8Actual_ID[MAXIMUM_NUMBER_OF_LETTERS] = {'A','E','L','K','A','D','Y'};
     3e0:	97 e0       	ldi	r25, 0x07	; 7
     3e2:	e7 e2       	ldi	r30, 0x27	; 39
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	de 01       	movw	r26, r28
     3e8:	1f 96       	adiw	r26, 0x0f	; 15
     3ea:	01 90       	ld	r0, Z+
     3ec:	0d 92       	st	X+, r0
     3ee:	9a 95       	dec	r25
     3f0:	e1 f7       	brne	.-8      	; 0x3ea <KEYPAD_WITH_LCD+0x50>
	unsigned char u8Actual_password[MAXIMUM_NUMBER_OF_LETTERS] = {'3','5','5','2','3','9'};
     3f2:	fe 01       	movw	r30, r28
     3f4:	76 96       	adiw	r30, 0x16	; 22
     3f6:	df 01       	movw	r26, r30
     3f8:	1d 92       	st	X+, r1
     3fa:	8a 95       	dec	r24
     3fc:	e9 f7       	brne	.-6      	; 0x3f8 <KEYPAD_WITH_LCD+0x5e>
     3fe:	83 e3       	ldi	r24, 0x33	; 51
     400:	8e 8b       	std	Y+22, r24	; 0x16
     402:	95 e3       	ldi	r25, 0x35	; 53
     404:	9f 8b       	std	Y+23, r25	; 0x17
     406:	98 8f       	std	Y+24, r25	; 0x18
     408:	92 e3       	ldi	r25, 0x32	; 50
     40a:	99 8f       	std	Y+25, r25	; 0x19
     40c:	8a 8f       	std	Y+26, r24	; 0x1a
     40e:	89 e3       	ldi	r24, 0x39	; 57
     410:	8b 8f       	std	Y+27, r24	; 0x1b
			
	LCD_COMMAND(CLEAR_DISPLAY);
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     418:	ef e6       	ldi	r30, 0x6F	; 111
     41a:	f7 e1       	ldi	r31, 0x17	; 23
     41c:	31 97       	sbiw	r30, 0x01	; 1
     41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     420:	00 c0       	rjmp	.+0      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     422:	00 00       	nop
	_delay_us(2000);
	
	LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     424:	86 e0       	ldi	r24, 0x06	; 6
     426:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
     42a:	8b e2       	ldi	r24, 0x2B	; 43
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     432:	00 c0       	rjmp	.+0      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     434:	00 00       	nop
	_delay_us(100);
	
	LCD_COMMAND(FIRST_LINE_START);
     436:	80 e8       	ldi	r24, 0x80	; 128
     438:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
	LCD_DATA_STRING(u8Statement_pHome_1 , u8Statement_pHome_1_size);
     43c:	65 e0       	ldi	r22, 0x05	; 5
     43e:	8b ea       	ldi	r24, 0xAB	; 171
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_DATA_STRING>
	
	do
	{
		do 
		{
			for (u8Count = 0;u8Count < MAXIMUM_NUMBER_OF_LETTERS; u8Count ++)
     446:	10 e0       	ldi	r17, 0x00	; 0
			{
							
				SET_COLUMNS_INPUT();
     448:	0e 94 37 08 	call	0x106e	; 0x106e <SET_COLUMNS_INPUT>
				POWER_ALL_COLUMNS(); // To activate pull up resistors
     44c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <POWER_ALL_COLUMNS>
							
				SET_ROWS_OUTPUT();
     450:	0e 94 04 07 	call	0xe08	; 0xe08 <SET_ROWS_OUTPUT>
				GROUND_ALL_ROWS();
     454:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <GROUND_ALL_ROWS>
							
				do  // To make sure that all buttons are released
				{
					READ_COLUMN1(&u8Column1_reading);
     458:	87 e4       	ldi	r24, 0x47	; 71
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <READ_COLUMN1>
					READ_COLUMN2(&u8Column2_reading);
     460:	86 e4       	ldi	r24, 0x46	; 70
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 92 07 	call	0xf24	; 0xf24 <READ_COLUMN2>
					READ_COLUMN3(&u8Column3_reading);
     468:	85 e4       	ldi	r24, 0x45	; 69
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	0e 94 c9 07 	call	0xf92	; 0xf92 <READ_COLUMN3>
					READ_COLUMN4(&u8Column4_reading);
     470:	84 e4       	ldi	r24, 0x44	; 68
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	0e 94 00 08 	call	0x1000	; 0x1000 <READ_COLUMN4>
								
				} while (u8Column1_reading == 0 || u8Column2_reading == 0 || u8Column3_reading == 0 || u8Column4_reading == 0 );
     478:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8Column1_reading>
     47c:	88 23       	and	r24, r24
     47e:	61 f3       	breq	.-40     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     480:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8Column2_reading>
     484:	88 23       	and	r24, r24
     486:	41 f3       	breq	.-48     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     488:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8Column3_reading>
     48c:	88 23       	and	r24, r24
     48e:	21 f3       	breq	.-56     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     490:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8Column4_reading>
     494:	88 23       	and	r24, r24
     496:	01 f3       	breq	.-64     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
							
				do  // To wait for a press
				{
					READ_COLUMN1(&u8Column1_reading);
     498:	87 e4       	ldi	r24, 0x47	; 71
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <READ_COLUMN1>
					READ_COLUMN2(&u8Column2_reading);
     4a0:	86 e4       	ldi	r24, 0x46	; 70
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 92 07 	call	0xf24	; 0xf24 <READ_COLUMN2>
					READ_COLUMN3(&u8Column3_reading);
     4a8:	85 e4       	ldi	r24, 0x45	; 69
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	0e 94 c9 07 	call	0xf92	; 0xf92 <READ_COLUMN3>
					READ_COLUMN4(&u8Column4_reading);
     4b0:	84 e4       	ldi	r24, 0x44	; 68
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	0e 94 00 08 	call	0x1000	; 0x1000 <READ_COLUMN4>
								
				} while (u8Column1_reading != 0 && u8Column2_reading != 0 && u8Column3_reading != 0 && u8Column4_reading != 0 );
     4b8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8Column1_reading>
     4bc:	88 23       	and	r24, r24
     4be:	61 f0       	breq	.+24     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4c0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8Column2_reading>
     4c4:	88 23       	and	r24, r24
     4c6:	41 f0       	breq	.+16     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4c8:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8Column3_reading>
     4cc:	88 23       	and	r24, r24
     4ce:	21 f0       	breq	.+8      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4d0:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8Column4_reading>
     4d4:	81 11       	cpse	r24, r1
     4d6:	e0 cf       	rjmp	.-64     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
							
				BUZZER_ON();
     4d8:	0e 94 a9 05 	call	0xb52	; 0xb52 <BUZZER_ON>
				GET_KEY_ROW(&u8Captured_row);
     4dc:	8f e3       	ldi	r24, 0x3F	; 63
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 49 00 	call	0x92	; 0x92 <GET_KEY_ROW>
				GET_KEY_COLUMN(&u8Captured_column);
     4e4:	8e e3       	ldi	r24, 0x3E	; 62
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	0e 94 83 00 	call	0x106	; 0x106 <GET_KEY_COLUMN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ec:	9f eb       	ldi	r25, 0xBF	; 191
     4ee:	a4 ed       	ldi	r26, 0xD4	; 212
     4f0:	b1 e0       	ldi	r27, 0x01	; 1
     4f2:	91 50       	subi	r25, 0x01	; 1
     4f4:	a0 40       	sbci	r26, 0x00	; 0
     4f6:	b0 40       	sbci	r27, 0x00	; 0
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4fc:	00 00       	nop
				_delay_ms(50);
				BUZZER_OFF();
     4fe:	0e 94 af 05 	call	0xb5e	; 0xb5e <BUZZER_OFF>
				
				u8Temp_character = 	gu8Key_pad[u8Captured_row][u8Captured_column];
     502:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <u8Captured_row>
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     50c:	ee 0f       	add	r30, r30
     50e:	ff 1f       	adc	r31, r31
     510:	ee 0f       	add	r30, r30
     512:	ff 1f       	adc	r31, r31
     514:	e2 5d       	subi	r30, 0xD2	; 210
     516:	fe 4f       	sbci	r31, 0xFE	; 254
     518:	e8 0f       	add	r30, r24
     51a:	f1 1d       	adc	r31, r1
     51c:	80 81       	ld	r24, Z
				
				if (u8Temp_character == '-')
     51e:	8d 32       	cpi	r24, 0x2D	; 45
     520:	69 f0       	breq	.+26     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
				{
					break;
				}
				else
				{
					ANALYZE_PRESS(u8Temp_character );
     522:	0e 94 bd 00 	call	0x17a	; 0x17a <ANALYZE_PRESS>
				}
					
				LCD_DATA(u8Entered_character);
     526:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8Entered_character>
     52a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCD_DATA>
				LCD_COMMAND(SHIFT_CURSOR_LEFT);
     52e:	84 e0       	ldi	r24, 0x04	; 4
     530:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
	
	do
	{
		do 
		{
			for (u8Count = 0;u8Count < MAXIMUM_NUMBER_OF_LETTERS; u8Count ++)
     534:	1f 5f       	subi	r17, 0xFF	; 255
     536:	17 30       	cpi	r17, 0x07	; 7
     538:	09 f0       	breq	.+2      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     53a:	86 cf       	rjmp	.-244    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
				LCD_DATA(u8Entered_character);
				LCD_COMMAND(SHIFT_CURSOR_LEFT);

				}
				
			} while (u8Key_sequence != 5);
     53c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8Key_sequence>
     540:	85 30       	cpi	r24, 0x05	; 5
     542:	09 f0       	breq	.+2      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     544:	80 cf       	rjmp	.-256    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			
			u8Key_sequence = 0;
     546:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <u8Key_sequence>
			
			LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     54a:	86 e0       	ldi	r24, 0x06	; 6
     54c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
						
			u8Entered_ID[u8Count] = u8Entered_character ;
     550:	e8 e0       	ldi	r30, 0x08	; 8
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	ec 0f       	add	r30, r28
     556:	fd 1f       	adc	r31, r29
     558:	e1 0f       	add	r30, r17
     55a:	f1 1d       	adc	r31, r1
     55c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8Entered_character>
     560:	80 83       	st	Z, r24
     562:	fe 01       	movw	r30, r28
     564:	38 96       	adiw	r30, 0x08	; 8
     566:	de 01       	movw	r26, r28
     568:	1f 96       	adiw	r26, 0x0f	; 15
     56a:	cd 01       	movw	r24, r26
static uint8_t u8Statement_p3_2_size = sizeof(u8Statement_p3_2);
	
extern void KEYPAD_WITH_LCD()
{
	uint8_t u8Count = 0;
	uint8_t u8ID_check = 0;
     56c:	b1 2c       	mov	r11, r1
			break;
	} while (1);
	
	for (u8Count = 0 ;u8Count < MAXIMUM_NUMBER_OF_LETTERS ; u8Count ++)
	{
		if (u8Entered_ID[u8Count] == u8Actual_ID[u8Count])
     56e:	31 91       	ld	r19, Z+
     570:	2d 91       	ld	r18, X+
     572:	32 13       	cpse	r19, r18
     574:	01 c0       	rjmp	.+2      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
		{
			u8ID_check ++;
     576:	b3 94       	inc	r11
			u8Entered_ID[u8Count] = u8Entered_character ;
			
			break;
	} while (1);
	
	for (u8Count = 0 ;u8Count < MAXIMUM_NUMBER_OF_LETTERS ; u8Count ++)
     578:	e8 17       	cp	r30, r24
     57a:	f9 07       	cpc	r31, r25
     57c:	c1 f7       	brne	.-16     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
		else
		{
		}
	}
	
	LCD_COMMAND(SECOND_LINE_START);
     57e:	80 ec       	ldi	r24, 0xC0	; 192
     580:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
	
	LCD_DATA_STRING(u8Statement_pHome_2 , u8Statement_pHome_2_size);
     584:	67 e0       	ldi	r22, 0x07	; 7
     586:	84 ea       	ldi	r24, 0xA4	; 164
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_DATA_STRING>
     58e:	7e 01       	movw	r14, r28
     590:	e8 e0       	ldi	r30, 0x08	; 8
     592:	ee 0e       	add	r14, r30
     594:	f1 1c       	adc	r15, r1
     596:	ce 01       	movw	r24, r28
     598:	01 96       	adiw	r24, 0x01	; 1
     59a:	6c 01       	movw	r12, r24
     59c:	47 01       	movw	r8, r14
static uint8_t u8Statement_p3_2_size = sizeof(u8Statement_p3_2);
	
extern void KEYPAD_WITH_LCD()
{
	uint8_t u8Count = 0;
	uint8_t u8ID_check = 0;
     59e:	8c 01       	movw	r16, r24
	
	do
	{
		for (u8Count = 0;u8Count < MAXIMUM_NUMBER_OF_LETTERS; u8Count ++)
		{
			SET_COLUMNS_INPUT();
     5a0:	0e 94 37 08 	call	0x106e	; 0x106e <SET_COLUMNS_INPUT>
			POWER_ALL_COLUMNS(); // To activate pull up resistors
     5a4:	0e 94 3d 07 	call	0xe7a	; 0xe7a <POWER_ALL_COLUMNS>
					
			SET_ROWS_OUTPUT();
     5a8:	0e 94 04 07 	call	0xe08	; 0xe08 <SET_ROWS_OUTPUT>
			GROUND_ALL_ROWS();
     5ac:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <GROUND_ALL_ROWS>
					
			do  // To make sure that all buttons are released
			{
				READ_COLUMN1(&u8Column1_reading);
     5b0:	87 e4       	ldi	r24, 0x47	; 71
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <READ_COLUMN1>
				READ_COLUMN2(&u8Column2_reading);
     5b8:	86 e4       	ldi	r24, 0x46	; 70
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 92 07 	call	0xf24	; 0xf24 <READ_COLUMN2>
				READ_COLUMN3(&u8Column3_reading);
     5c0:	85 e4       	ldi	r24, 0x45	; 69
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 c9 07 	call	0xf92	; 0xf92 <READ_COLUMN3>
				READ_COLUMN4(&u8Column4_reading);
     5c8:	84 e4       	ldi	r24, 0x44	; 68
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	0e 94 00 08 	call	0x1000	; 0x1000 <READ_COLUMN4>
						
			} while (u8Column1_reading == 0 || u8Column2_reading == 0 || u8Column3_reading == 0 || u8Column4_reading == 0 );
     5d0:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8Column1_reading>
     5d4:	88 23       	and	r24, r24
     5d6:	61 f3       	breq	.-40     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     5d8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8Column2_reading>
     5dc:	88 23       	and	r24, r24
     5de:	41 f3       	breq	.-48     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     5e0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8Column3_reading>
     5e4:	88 23       	and	r24, r24
     5e6:	21 f3       	breq	.-56     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     5e8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8Column4_reading>
     5ec:	88 23       	and	r24, r24
     5ee:	01 f3       	breq	.-64     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
					
			do  // To wait for a press
			{
				READ_COLUMN1(&u8Column1_reading);
     5f0:	87 e4       	ldi	r24, 0x47	; 71
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <READ_COLUMN1>
				READ_COLUMN2(&u8Column2_reading);
     5f8:	86 e4       	ldi	r24, 0x46	; 70
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 92 07 	call	0xf24	; 0xf24 <READ_COLUMN2>
				READ_COLUMN3(&u8Column3_reading);
     600:	85 e4       	ldi	r24, 0x45	; 69
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	0e 94 c9 07 	call	0xf92	; 0xf92 <READ_COLUMN3>
				READ_COLUMN4(&u8Column4_reading);
     608:	84 e4       	ldi	r24, 0x44	; 68
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 00 08 	call	0x1000	; 0x1000 <READ_COLUMN4>
						
			} while (u8Column1_reading != 0 && u8Column2_reading != 0 && u8Column3_reading != 0 && u8Column4_reading != 0 );
     610:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8Column1_reading>
     614:	88 23       	and	r24, r24
     616:	61 f0       	breq	.+24     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     618:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8Column2_reading>
     61c:	88 23       	and	r24, r24
     61e:	41 f0       	breq	.+16     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     620:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8Column3_reading>
     624:	88 23       	and	r24, r24
     626:	21 f0       	breq	.+8      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     628:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8Column4_reading>
     62c:	81 11       	cpse	r24, r1
     62e:	e0 cf       	rjmp	.-64     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
					
			BUZZER_ON();
     630:	0e 94 a9 05 	call	0xb52	; 0xb52 <BUZZER_ON>
			GET_KEY_ROW(&u8Captured_row);
     634:	8f e3       	ldi	r24, 0x3F	; 63
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	0e 94 49 00 	call	0x92	; 0x92 <GET_KEY_ROW>
			GET_KEY_COLUMN(&u8Captured_column);
     63c:	8e e3       	ldi	r24, 0x3E	; 62
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	0e 94 83 00 	call	0x106	; 0x106 <GET_KEY_COLUMN>
     644:	9f eb       	ldi	r25, 0xBF	; 191
     646:	a4 ed       	ldi	r26, 0xD4	; 212
     648:	b1 e0       	ldi	r27, 0x01	; 1
     64a:	91 50       	subi	r25, 0x01	; 1
     64c:	a0 40       	sbci	r26, 0x00	; 0
     64e:	b0 40       	sbci	r27, 0x00	; 0
     650:	e1 f7       	brne	.-8      	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     652:	00 c0       	rjmp	.+0      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     654:	00 00       	nop
			_delay_ms(50);
			BUZZER_OFF();
     656:	0e 94 af 05 	call	0xb5e	; 0xb5e <BUZZER_OFF>
					
			u8Entered_character = gu8Key_pad[u8Captured_row][u8Captured_column];
     65a:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <u8Captured_row>
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     664:	ee 0f       	add	r30, r30
     666:	ff 1f       	adc	r31, r31
     668:	ee 0f       	add	r30, r30
     66a:	ff 1f       	adc	r31, r31
     66c:	e2 5d       	subi	r30, 0xD2	; 210
     66e:	fe 4f       	sbci	r31, 0xFE	; 254
     670:	e8 0f       	add	r30, r24
     672:	f1 1d       	adc	r31, r1
     674:	80 81       	ld	r24, Z
     676:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8Entered_character>
					
			if (u8Entered_character == '-')
     67a:	8d 32       	cpi	r24, 0x2D	; 45
     67c:	79 f0       	breq	.+30     	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
			}
			else
			{
			}
					
			LCD_DATA('*');
     67e:	8a e2       	ldi	r24, 0x2A	; 42
     680:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCD_DATA>
					
			u8Entered_password[u8Count] = u8Entered_character ;
     684:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8Entered_character>
     688:	f8 01       	movw	r30, r16
     68a:	81 93       	st	Z+, r24
     68c:	8f 01       	movw	r16, r30
	
	LCD_DATA_STRING(u8Statement_pHome_2 , u8Statement_pHome_2_size);
	
	do
	{
		for (u8Count = 0;u8Count < MAXIMUM_NUMBER_OF_LETTERS; u8Count ++)
     68e:	ee 16       	cp	r14, r30
     690:	ff 06       	cpc	r15, r31
     692:	09 f0       	breq	.+2      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     694:	85 cf       	rjmp	.-246    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
					
			u8Entered_password[u8Count] = u8Entered_character ;
		}
				
				
	} while (u8Entered_character != '-');
     696:	8d 32       	cpi	r24, 0x2D	; 45
     698:	09 f0       	breq	.+2      	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
     69a:	7d cf       	rjmp	.-262    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
     69c:	fe 01       	movw	r30, r28
     69e:	76 96       	adiw	r30, 0x16	; 22
static uint8_t u8Statement_p3_2_size = sizeof(u8Statement_p3_2);
	
extern void KEYPAD_WITH_LCD()
{
	uint8_t u8Count = 0;
	uint8_t u8ID_check = 0;
     6a0:	80 e0       	ldi	r24, 0x00	; 0
				
	} while (u8Entered_character != '-');
			
	for (u8Count = 0 ;u8Count < MAXIMUM_NUMBER_OF_LETTERS ; u8Count ++)
	{
		if (u8Entered_password[u8Count] == u8Actual_password[u8Count])
     6a2:	d6 01       	movw	r26, r12
     6a4:	2d 91       	ld	r18, X+
     6a6:	6d 01       	movw	r12, r26
     6a8:	91 91       	ld	r25, Z+
     6aa:	29 13       	cpse	r18, r25
     6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
		{
			u8Password_check ++;
     6ae:	8f 5f       	subi	r24, 0xFF	; 255
		}
				
				
	} while (u8Entered_character != '-');
			
	for (u8Count = 0 ;u8Count < MAXIMUM_NUMBER_OF_LETTERS ; u8Count ++)
     6b0:	c8 14       	cp	r12, r8
     6b2:	d9 04       	cpc	r13, r9
     6b4:	b1 f7       	brne	.-20     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
		{
		}
	}

	
	if (u8ID_check == MAXIMUM_NUMBER_OF_LETTERS && u8Password_check == MAXIMUM_NUMBER_OF_LETTERS)
     6b6:	b7 e0       	ldi	r27, 0x07	; 7
     6b8:	bb 12       	cpse	r11, r27
     6ba:	48 c0       	rjmp	.+144    	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
     6bc:	87 30       	cpi	r24, 0x07	; 7
     6be:	09 f0       	breq	.+2      	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
     6c0:	45 c0       	rjmp	.+138    	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
	{
		gu8ID_right ++ ;
     6c2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <gu8ID_right>
     6c6:	8f 5f       	subi	r24, 0xFF	; 255
     6c8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <gu8ID_right>
		gu8Password_right ++ ;
     6cc:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <gu8Password_right>
     6d0:	8f 5f       	subi	r24, 0xFF	; 255
     6d2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <gu8Password_right>
		
		LCD_COMMAND(CLEAR_DISPLAY);
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6dc:	ef e6       	ldi	r30, 0x6F	; 111
     6de:	f7 e1       	ldi	r31, 0x17	; 23
     6e0:	31 97       	sbiw	r30, 0x01	; 1
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
     6e6:	00 00       	nop
		_delay_us(2000);
		LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     6e8:	86 e0       	ldi	r24, 0x06	; 6
     6ea:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
     6ee:	8b e2       	ldi	r24, 0x2B	; 43
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6f8:	00 00       	nop
		_delay_us(100);
		
		LCD_COMMAND(FIRST_LINE_START);
     6fa:	80 e8       	ldi	r24, 0x80	; 128
     6fc:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p3_1 , u8Statement_p3_1_size);
     700:	61 e1       	ldi	r22, 0x11	; 17
     702:	81 e7       	ldi	r24, 0x71	; 113
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_DATA_STRING>
		
		LCD_COMMAND(SECOND_LINE_START);
     70a:	80 ec       	ldi	r24, 0xC0	; 192
     70c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p3_2 , u8Statement_p3_2_size);
     710:	61 e1       	ldi	r22, 0x11	; 17
     712:	80 e6       	ldi	r24, 0x60	; 96
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_DATA_STRING>
		
		BUZZER_ON();
     71a:	0e 94 a9 05 	call	0xb52	; 0xb52 <BUZZER_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     71e:	9f e7       	ldi	r25, 0x7F	; 127
     720:	ac ef       	ldi	r26, 0xFC	; 252
     722:	ba e0       	ldi	r27, 0x0A	; 10
     724:	91 50       	subi	r25, 0x01	; 1
     726:	a0 40       	sbci	r26, 0x00	; 0
     728:	b0 40       	sbci	r27, 0x00	; 0
     72a:	e1 f7       	brne	.-8      	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
     72e:	00 00       	nop
		_delay_ms(300);
		BUZZER_OFF();
     730:	0e 94 af 05 	call	0xb5e	; 0xb5e <BUZZER_OFF>
     734:	ef e7       	ldi	r30, 0x7F	; 127
     736:	ff e4       	ldi	r31, 0x4F	; 79
     738:	22 e1       	ldi	r18, 0x12	; 18
     73a:	e1 50       	subi	r30, 0x01	; 1
     73c:	f0 40       	sbci	r31, 0x00	; 0
     73e:	20 40       	sbci	r18, 0x00	; 0
     740:	e1 f7       	brne	.-8      	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
     742:	00 c0       	rjmp	.+0      	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
     744:	00 00       	nop
		
		_delay_ms(500);
		RELAY_ON();
     746:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <RELAY_ON>
     74a:	24 c0       	rjmp	.+72     	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
	} 
	else
	{
		LCD_COMMAND(CLEAR_DISPLAY);
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     752:	8f e6       	ldi	r24, 0x6F	; 111
     754:	97 e1       	ldi	r25, 0x17	; 23
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	f1 f7       	brne	.-4      	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
     75a:	00 c0       	rjmp	.+0      	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
     75c:	00 00       	nop
		_delay_us(2000);
		LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     75e:	86 e0       	ldi	r24, 0x06	; 6
     760:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
     764:	ab e2       	ldi	r26, 0x2B	; 43
     766:	b1 e0       	ldi	r27, 0x01	; 1
     768:	11 97       	sbiw	r26, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
     76c:	00 c0       	rjmp	.+0      	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
     76e:	00 00       	nop
		_delay_us(100);
		
		LCD_COMMAND(FIRST_LINE_START);
     770:	80 e8       	ldi	r24, 0x80	; 128
     772:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p2_1 , u8Statement_p2_1_size);
     776:	61 e1       	ldi	r22, 0x11	; 17
     778:	83 e9       	ldi	r24, 0x93	; 147
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_DATA_STRING>
		
		LCD_COMMAND(SECOND_LINE_START);
     780:	80 ec       	ldi	r24, 0xC0	; 192
     782:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p2_2 , u8Statement_p2_2_size);
     786:	61 e1       	ldi	r22, 0x11	; 17
     788:	82 e8       	ldi	r24, 0x82	; 130
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_DATA_STRING>
		
		BUZZER_FLICKER();
     790:	0e 94 b5 05 	call	0xb6a	; 0xb6a <BUZZER_FLICKER>
	}
	
}
     794:	6c 96       	adiw	r28, 0x1c	; 28
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
     7ae:	cf 90       	pop	r12
     7b0:	bf 90       	pop	r11
     7b2:	9f 90       	pop	r9
     7b4:	8f 90       	pop	r8
     7b6:	08 95       	ret

000007b8 <HOME_PAGE>:
	PAGE3();
}

extern void HOME_PAGE()
{
	LCD_COMMAND(CLEAR_DISPLAY);
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
     7be:	8f e6       	ldi	r24, 0x6F	; 111
     7c0:	97 e1       	ldi	r25, 0x17	; 23
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <HOME_PAGE+0xa>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <HOME_PAGE+0x10>
     7c8:	00 00       	nop
	_delay_us(2000);
	LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     7ca:	86 e0       	ldi	r24, 0x06	; 6
     7cc:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
     7d0:	8b e2       	ldi	r24, 0x2B	; 43
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <HOME_PAGE+0x1c>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <HOME_PAGE+0x22>
     7da:	00 00       	nop
	_delay_us(100);
	
	LCD_COMMAND(FIRST_LINE_START);
     7dc:	80 e8       	ldi	r24, 0x80	; 128
     7de:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
	LCD_DATA_STRING(u8Statement_pHome_1 , u8Statement_pHome_1_size);
     7e2:	61 e1       	ldi	r22, 0x11	; 17
     7e4:	86 e1       	ldi	r24, 0x16	; 22
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_DATA_STRING>
	
	LCD_COMMAND(SECOND_LINE_START);
     7ec:	80 ec       	ldi	r24, 0xC0	; 192
     7ee:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
	LCD_DATA_STRING(u8Statement_pHome_2 , u8Statement_pHome_2_size);
     7f2:	61 e1       	ldi	r22, 0x11	; 17
     7f4:	85 e0       	ldi	r24, 0x05	; 5
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_DATA_STRING>
	
	do
	{
		BUTTON2_READ(&u8Button2_reading);
     7fc:	8a e4       	ldi	r24, 0x4A	; 74
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 72 05 	call	0xae4	; 0xae4 <BUTTON2_READ>
	} while (u8Button2_reading == 0 );
     804:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8Button2_reading>
     808:	88 23       	and	r24, r24
     80a:	c1 f3       	breq	.-16     	; 0x7fc <HOME_PAGE+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     80c:	9f e7       	ldi	r25, 0x7F	; 127
     80e:	2c ef       	ldi	r18, 0xFC	; 252
     810:	8a e0       	ldi	r24, 0x0A	; 10
     812:	91 50       	subi	r25, 0x01	; 1
     814:	20 40       	sbci	r18, 0x00	; 0
     816:	80 40       	sbci	r24, 0x00	; 0
     818:	e1 f7       	brne	.-8      	; 0x812 <HOME_PAGE+0x5a>
     81a:	00 c0       	rjmp	.+0      	; 0x81c <HOME_PAGE+0x64>
     81c:	00 00       	nop
     81e:	08 95       	ret

00000820 <PAGE2>:
	
	uint8_t u8Next_page = 0;
	
	do 
	{
		LCD_COMMAND(CLEAR_DISPLAY);
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     826:	8f e6       	ldi	r24, 0x6F	; 111
     828:	97 e1       	ldi	r25, 0x17	; 23
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	f1 f7       	brne	.-4      	; 0x82a <PAGE2+0xa>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <PAGE2+0x10>
     830:	00 00       	nop
		_delay_us(2000);
		LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     832:	86 e0       	ldi	r24, 0x06	; 6
     834:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
     838:	8b e2       	ldi	r24, 0x2B	; 43
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <PAGE2+0x1c>
     840:	00 c0       	rjmp	.+0      	; 0x842 <PAGE2+0x22>
     842:	00 00       	nop
		_delay_us(100);
		
		LCD_COMMAND(FIRST_LINE_START);
     844:	80 e8       	ldi	r24, 0x80	; 128
     846:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p2_1 , u8Statement_p2_1_size);
     84a:	61 e1       	ldi	r22, 0x11	; 17
     84c:	84 ef       	ldi	r24, 0xF4	; 244
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_DATA_STRING>
		
		LCD_COMMAND(SECOND_LINE_START);
     854:	80 ec       	ldi	r24, 0xC0	; 192
     856:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p2_2 , u8Statement_p2_2_size);
     85a:	61 e1       	ldi	r22, 0x11	; 17
     85c:	83 ee       	ldi	r24, 0xE3	; 227
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_DATA_STRING>
		
		do
		{
			BUTTON0_READ(&u8Button0_reading);
     864:	8c e4       	ldi	r24, 0x4C	; 76
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	0e 94 04 05 	call	0xa08	; 0xa08 <BUTTON0_READ>
			BUTTON1_READ(&u8Button1_reading);
     86c:	8b e4       	ldi	r24, 0x4B	; 75
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 3b 05 	call	0xa76	; 0xa76 <BUTTON1_READ>
			BUTTON2_READ(&u8Button2_reading);
     874:	8a e4       	ldi	r24, 0x4A	; 74
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 72 05 	call	0xae4	; 0xae4 <BUTTON2_READ>
			
		} while (u8Button0_reading == 0 && u8Button1_reading == 0 && u8Button2_reading == 0);
     87c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8Button0_reading>
     880:	81 11       	cpse	r24, r1
     882:	08 c0       	rjmp	.+16     	; 0x894 <__stack+0x35>
     884:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8Button1_reading>
     888:	81 11       	cpse	r24, r1
     88a:	04 c0       	rjmp	.+8      	; 0x894 <__stack+0x35>
     88c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8Button2_reading>
     890:	88 23       	and	r24, r24
     892:	41 f3       	breq	.-48     	; 0x864 <__stack+0x5>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     894:	9f e7       	ldi	r25, 0x7F	; 127
     896:	2c ef       	ldi	r18, 0xFC	; 252
     898:	8a e0       	ldi	r24, 0x0A	; 10
     89a:	91 50       	subi	r25, 0x01	; 1
     89c:	20 40       	sbci	r18, 0x00	; 0
     89e:	80 40       	sbci	r24, 0x00	; 0
     8a0:	e1 f7       	brne	.-8      	; 0x89a <__stack+0x3b>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <__stack+0x45>
     8a4:	00 00       	nop
		
		_delay_ms(DELAY_BETWEEN_ACTIONS_ms);
		
		if (u8Button0_reading != 0)
     8a6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8Button0_reading>
     8aa:	88 23       	and	r24, r24
     8ac:	e9 f0       	breq	.+58     	; 0x8e8 <__stack+0x89>
		{
			LCD_COMMAND(CLEAR_DISPLAY);
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8b4:	8f e6       	ldi	r24, 0x6F	; 111
     8b6:	97 e1       	ldi	r25, 0x17	; 23
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <__stack+0x59>
     8bc:	00 c0       	rjmp	.+0      	; 0x8be <__stack+0x5f>
     8be:	00 00       	nop
			_delay_us(2000);
			LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     8c0:	86 e0       	ldi	r24, 0x06	; 6
     8c2:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
     8c6:	8b e2       	ldi	r24, 0x2B	; 43
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <__stack+0x6b>
     8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <__stack+0x71>
     8d0:	00 00       	nop
			_delay_us(100);
			
			LCD_COMMAND(FIRST_LINE_START);
     8d2:	80 e8       	ldi	r24, 0x80	; 128
     8d4:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
			LCD_DATA_STRING(u8Statement_test , u8Statement_test_size);
     8d8:	61 e1       	ldi	r22, 0x11	; 17
     8da:	80 eb       	ldi	r24, 0xB0	; 176
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_DATA_STRING>
			
			LEDS_FLASH();
     8e2:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LEDS_FLASH>
     8e6:	9c cf       	rjmp	.-200    	; 0x820 <PAGE2>
		}
		
		else if (u8Button1_reading != 0)
     8e8:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8Button1_reading>
     8ec:	88 23       	and	r24, r24
     8ee:	e9 f0       	breq	.+58     	; 0x92a <__stack+0xcb>
		{
			LCD_COMMAND(CLEAR_DISPLAY);
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
     8f6:	8f e6       	ldi	r24, 0x6F	; 111
     8f8:	97 e1       	ldi	r25, 0x17	; 23
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <__stack+0x9b>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <__stack+0xa1>
     900:	00 00       	nop
			_delay_us(2000);
			LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     902:	86 e0       	ldi	r24, 0x06	; 6
     904:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
     908:	8b e2       	ldi	r24, 0x2B	; 43
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <__stack+0xad>
     910:	00 c0       	rjmp	.+0      	; 0x912 <__stack+0xb3>
     912:	00 00       	nop
			_delay_us(100);
			
			LCD_COMMAND(FIRST_LINE_START);
     914:	80 e8       	ldi	r24, 0x80	; 128
     916:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
			LCD_DATA_STRING(u8Statement_test , u8Statement_test_size);
     91a:	61 e1       	ldi	r22, 0x11	; 17
     91c:	80 eb       	ldi	r24, 0xB0	; 176
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_DATA_STRING>
			
			RELAY_FLICKER();
     924:	0e 94 08 0a 	call	0x1410	; 0x1410 <RELAY_FLICKER>
     928:	7b cf       	rjmp	.-266    	; 0x820 <PAGE2>
		else if (u8Button2_reading != 0)
		{
			u8Next_page ++;
		}
		
	} while (u8Next_page == 0);
     92a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8Button2_reading>
     92e:	88 23       	and	r24, r24
     930:	09 f4       	brne	.+2      	; 0x934 <__stack+0xd5>
     932:	76 cf       	rjmp	.-276    	; 0x820 <PAGE2>
		
}
     934:	08 95       	ret

00000936 <PAGE3>:
	
	uint8_t u8Next_page = 0;
	
	do
	{
		LCD_COMMAND(CLEAR_DISPLAY);
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
     93c:	8f e6       	ldi	r24, 0x6F	; 111
     93e:	97 e1       	ldi	r25, 0x17	; 23
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <PAGE3+0xa>
     944:	00 c0       	rjmp	.+0      	; 0x946 <PAGE3+0x10>
     946:	00 00       	nop
		_delay_us(2000);
		LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     948:	86 e0       	ldi	r24, 0x06	; 6
     94a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
     94e:	8b e2       	ldi	r24, 0x2B	; 43
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	f1 f7       	brne	.-4      	; 0x952 <PAGE3+0x1c>
     956:	00 c0       	rjmp	.+0      	; 0x958 <PAGE3+0x22>
     958:	00 00       	nop
		_delay_us(100);
		
		LCD_COMMAND(FIRST_LINE_START);
     95a:	80 e8       	ldi	r24, 0x80	; 128
     95c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p3_1 , u8Statement_p3_1_size);
     960:	61 e1       	ldi	r22, 0x11	; 17
     962:	82 ed       	ldi	r24, 0xD2	; 210
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_DATA_STRING>
		
		LCD_COMMAND(SECOND_LINE_START);
     96a:	80 ec       	ldi	r24, 0xC0	; 192
     96c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
		LCD_DATA_STRING(u8Statement_p3_2 , u8Statement_p3_2_size);
     970:	61 e1       	ldi	r22, 0x11	; 17
     972:	81 ec       	ldi	r24, 0xC1	; 193
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_DATA_STRING>
		
		do
		{
			BUTTON0_READ(&u8Button0_reading);
     97a:	8c e4       	ldi	r24, 0x4C	; 76
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0e 94 04 05 	call	0xa08	; 0xa08 <BUTTON0_READ>
			BUTTON2_READ(&u8Button2_reading);
     982:	8a e4       	ldi	r24, 0x4A	; 74
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	0e 94 72 05 	call	0xae4	; 0xae4 <BUTTON2_READ>
			
		} while (u8Button0_reading == 0 && u8Button2_reading == 0);
     98a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8Button0_reading>
     98e:	81 11       	cpse	r24, r1
     990:	04 c0       	rjmp	.+8      	; 0x99a <PAGE3+0x64>
     992:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8Button2_reading>
     996:	88 23       	and	r24, r24
     998:	81 f3       	breq	.-32     	; 0x97a <PAGE3+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     99a:	9f e7       	ldi	r25, 0x7F	; 127
     99c:	2c ef       	ldi	r18, 0xFC	; 252
     99e:	8a e0       	ldi	r24, 0x0A	; 10
     9a0:	91 50       	subi	r25, 0x01	; 1
     9a2:	20 40       	sbci	r18, 0x00	; 0
     9a4:	80 40       	sbci	r24, 0x00	; 0
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <PAGE3+0x6a>
     9a8:	00 c0       	rjmp	.+0      	; 0x9aa <PAGE3+0x74>
     9aa:	00 00       	nop
		
		_delay_ms(DELAY_BETWEEN_ACTIONS_ms);
		
		if (u8Button0_reading != 0)
     9ac:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8Button0_reading>
     9b0:	88 23       	and	r24, r24
     9b2:	e9 f0       	breq	.+58     	; 0x9ee <PAGE3+0xb8>
		{
			LCD_COMMAND(CLEAR_DISPLAY);
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ba:	8f e6       	ldi	r24, 0x6F	; 111
     9bc:	97 e1       	ldi	r25, 0x17	; 23
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	f1 f7       	brne	.-4      	; 0x9be <PAGE3+0x88>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <PAGE3+0x8e>
     9c4:	00 00       	nop
			_delay_us(2000);
			LCD_COMMAND(SHIFT_CURSOR_RIGHT);
     9c6:	86 e0       	ldi	r24, 0x06	; 6
     9c8:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
     9cc:	8b e2       	ldi	r24, 0x2B	; 43
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	f1 f7       	brne	.-4      	; 0x9d0 <PAGE3+0x9a>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <PAGE3+0xa0>
     9d6:	00 00       	nop
			_delay_us(100);
			
			LCD_COMMAND(FIRST_LINE_START);
     9d8:	80 e8       	ldi	r24, 0x80	; 128
     9da:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
			LCD_DATA_STRING(u8Statement_test , u8Statement_test_size);
     9de:	61 e1       	ldi	r22, 0x11	; 17
     9e0:	80 eb       	ldi	r24, 0xB0	; 176
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_DATA_STRING>
			
			BUZZER_FLICKER();
     9e8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <BUZZER_FLICKER>
     9ec:	a4 cf       	rjmp	.-184    	; 0x936 <PAGE3>
		else if (u8Button2_reading != 0)
		{
			u8Next_page ++;
		}
		
	} while (u8Next_page == 0);
     9ee:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8Button2_reading>
     9f2:	88 23       	and	r24, r24
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <PAGE3+0xc2>
     9f6:	9f cf       	rjmp	.-194    	; 0x936 <PAGE3>
	
}
     9f8:	08 95       	ret

000009fa <LCD_TEST>:
static uint8_t u8Button1_reading = 0;
static uint8_t u8Button2_reading = 0;

extern void LCD_TEST()
{
	HOME_PAGE();
     9fa:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <HOME_PAGE>
	PAGE2();
     9fe:	0e 94 10 04 	call	0x820	; 0x820 <PAGE2>
	PAGE3();
     a02:	0e 94 9b 04 	call	0x936	; 0x936 <PAGE3>
     a06:	08 95       	ret

00000a08 <BUTTON0_READ>:
 */ 

#include "BUTTON_INTERFACE.h"

extern void BUTTON0_READ(uint8_t *pu8Reading)
{
     a08:	ef 92       	push	r14
     a0a:	ff 92       	push	r15
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	1f 92       	push	r1
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	7c 01       	movw	r14, r24
	uint8_t u8Temp = 0;
     a1c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Num_of_correct_checks = 0;
	
	Pin_read(BUTTON0_PIN , BUTTON0_PIN_NUMBER , &u8Temp);
     a1e:	ae 01       	movw	r20, r28
     a20:	4f 5f       	subi	r20, 0xFF	; 255
     a22:	5f 4f       	sbci	r21, 0xFF	; 255
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	80 e3       	ldi	r24, 0x30	; 48
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
	
	if (u8Temp != 0)
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	88 23       	and	r24, r24
     a32:	b9 f0       	breq	.+46     	; 0xa62 <BUTTON0_READ+0x5a>
     a34:	16 e9       	ldi	r17, 0x96	; 150
     a36:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
		{
			Pin_read(BUTTON0_PIN , BUTTON0_PIN_NUMBER , &u8Temp);
     a38:	ae 01       	movw	r20, r28
     a3a:	4f 5f       	subi	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	80 e3       	ldi	r24, 0x30	; 48
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
			
			if (u8Temp != 0)
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	81 11       	cpse	r24, r1
			{
				u8Num_of_correct_checks ++ ;
     a4c:	0f 5f       	subi	r16, 0xFF	; 255
     a4e:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(BUTTON0_PIN , BUTTON0_PIN_NUMBER , &u8Temp);
	
	if (u8Temp != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
     a50:	99 f7       	brne	.-26     	; 0xa38 <BUTTON0_READ+0x30>
			{
				
			}
		}
		
		if (u8Num_of_correct_checks == NUMBER_OF_CHECKS)
     a52:	06 39       	cpi	r16, 0x96	; 150
     a54:	19 f4       	brne	.+6      	; 0xa5c <BUTTON0_READ+0x54>
		{
			*pu8Reading = u8Temp;
     a56:	f7 01       	movw	r30, r14
     a58:	80 83       	st	Z, r24
     a5a:	05 c0       	rjmp	.+10     	; 0xa66 <BUTTON0_READ+0x5e>
		}
		else
		{
			*pu8Reading = 0;
     a5c:	f7 01       	movw	r30, r14
     a5e:	10 82       	st	Z, r1
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <BUTTON0_READ+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
     a62:	f7 01       	movw	r30, r14
     a64:	10 82       	st	Z, r1
	}
	
}
     a66:	0f 90       	pop	r0
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	1f 91       	pop	r17
     a6e:	0f 91       	pop	r16
     a70:	ff 90       	pop	r15
     a72:	ef 90       	pop	r14
     a74:	08 95       	ret

00000a76 <BUTTON1_READ>:

extern void BUTTON1_READ(uint8_t *pu8Reading)
{
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	1f 92       	push	r1
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	7c 01       	movw	r14, r24
	uint8_t u8Temp = 0;
     a8a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Num_of_correct_checks = 0;
	
	Pin_read(BUTTON1_PIN , BUTTON1_PIN_NUMBER , &u8Temp);
     a8c:	ae 01       	movw	r20, r28
     a8e:	4f 5f       	subi	r20, 0xFF	; 255
     a90:	5f 4f       	sbci	r21, 0xFF	; 255
     a92:	61 e0       	ldi	r22, 0x01	; 1
     a94:	80 e3       	ldi	r24, 0x30	; 48
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
	
	if (u8Temp != 0)
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	88 23       	and	r24, r24
     aa0:	b9 f0       	breq	.+46     	; 0xad0 <BUTTON1_READ+0x5a>
     aa2:	16 e9       	ldi	r17, 0x96	; 150
     aa4:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
		{
			Pin_read(BUTTON1_PIN , BUTTON1_PIN_NUMBER , &u8Temp);
     aa6:	ae 01       	movw	r20, r28
     aa8:	4f 5f       	subi	r20, 0xFF	; 255
     aaa:	5f 4f       	sbci	r21, 0xFF	; 255
     aac:	61 e0       	ldi	r22, 0x01	; 1
     aae:	80 e3       	ldi	r24, 0x30	; 48
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
			
			if (u8Temp != 0)
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	81 11       	cpse	r24, r1
			{
				u8Num_of_correct_checks ++ ;
     aba:	0f 5f       	subi	r16, 0xFF	; 255
     abc:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(BUTTON1_PIN , BUTTON1_PIN_NUMBER , &u8Temp);
	
	if (u8Temp != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
     abe:	99 f7       	brne	.-26     	; 0xaa6 <BUTTON1_READ+0x30>
			{
				
			}
		}
		
		if (u8Num_of_correct_checks == NUMBER_OF_CHECKS)
     ac0:	06 39       	cpi	r16, 0x96	; 150
     ac2:	19 f4       	brne	.+6      	; 0xaca <BUTTON1_READ+0x54>
		{
			*pu8Reading = u8Temp;
     ac4:	f7 01       	movw	r30, r14
     ac6:	80 83       	st	Z, r24
     ac8:	05 c0       	rjmp	.+10     	; 0xad4 <BUTTON1_READ+0x5e>
		}
		else
		{
			*pu8Reading = 0;
     aca:	f7 01       	movw	r30, r14
     acc:	10 82       	st	Z, r1
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <BUTTON1_READ+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
     ad0:	f7 01       	movw	r30, r14
     ad2:	10 82       	st	Z, r1
	}
}
     ad4:	0f 90       	pop	r0
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	08 95       	ret

00000ae4 <BUTTON2_READ>:

extern void BUTTON2_READ(uint8_t *pu8Reading)
{
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	1f 92       	push	r1
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	7c 01       	movw	r14, r24
	uint8_t u8Temp = 0;
     af8:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Num_of_correct_checks = 0;
	
	Pin_read(BUTTON2_PIN , BUTTON2_PIN_NUMBER , &u8Temp);
     afa:	ae 01       	movw	r20, r28
     afc:	4f 5f       	subi	r20, 0xFF	; 255
     afe:	5f 4f       	sbci	r21, 0xFF	; 255
     b00:	62 e0       	ldi	r22, 0x02	; 2
     b02:	80 e3       	ldi	r24, 0x30	; 48
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
	
	if (u8Temp != 0)
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	88 23       	and	r24, r24
     b0e:	b9 f0       	breq	.+46     	; 0xb3e <BUTTON2_READ+0x5a>
     b10:	16 e9       	ldi	r17, 0x96	; 150
     b12:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
		{
			Pin_read(BUTTON2_PIN , BUTTON2_PIN_NUMBER , &u8Temp);
     b14:	ae 01       	movw	r20, r28
     b16:	4f 5f       	subi	r20, 0xFF	; 255
     b18:	5f 4f       	sbci	r21, 0xFF	; 255
     b1a:	62 e0       	ldi	r22, 0x02	; 2
     b1c:	80 e3       	ldi	r24, 0x30	; 48
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
			
			if (u8Temp != 0)
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	81 11       	cpse	r24, r1
			{
				u8Num_of_correct_checks ++ ;
     b28:	0f 5f       	subi	r16, 0xFF	; 255
     b2a:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(BUTTON2_PIN , BUTTON2_PIN_NUMBER , &u8Temp);
	
	if (u8Temp != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_CHECKS ; u8Count ++)
     b2c:	99 f7       	brne	.-26     	; 0xb14 <BUTTON2_READ+0x30>
			{
				
			}
		}
		
		if (u8Num_of_correct_checks == NUMBER_OF_CHECKS)
     b2e:	06 39       	cpi	r16, 0x96	; 150
     b30:	19 f4       	brne	.+6      	; 0xb38 <BUTTON2_READ+0x54>
		{
			*pu8Reading = u8Temp;
     b32:	f7 01       	movw	r30, r14
     b34:	80 83       	st	Z, r24
     b36:	05 c0       	rjmp	.+10     	; 0xb42 <BUTTON2_READ+0x5e>
		}
		else
		{
			*pu8Reading = 0;
     b38:	f7 01       	movw	r30, r14
     b3a:	10 82       	st	Z, r1
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <BUTTON2_READ+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
     b3e:	f7 01       	movw	r30, r14
     b40:	10 82       	st	Z, r1
	}
     b42:	0f 90       	pop	r0
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	08 95       	ret

00000b52 <BUZZER_ON>:
 */ 
#include "BUZZER_INTERFACE.h"

extern void BUZZER_ON()
{
	Pin_set(BUZZER_PORT , BUZZER_PIN_NUMBER);
     b52:	64 e0       	ldi	r22, 0x04	; 4
     b54:	82 e3       	ldi	r24, 0x32	; 50
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 81 0a 	call	0x1502	; 0x1502 <Pin_set>
     b5c:	08 95       	ret

00000b5e <BUZZER_OFF>:
}

extern void BUZZER_OFF()
{
	Pin_reset(BUZZER_PORT , BUZZER_PIN_NUMBER);
     b5e:	64 e0       	ldi	r22, 0x04	; 4
     b60:	82 e3       	ldi	r24, 0x32	; 50
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 8d 0a 	call	0x151a	; 0x151a <Pin_reset>
     b68:	08 95       	ret

00000b6a <BUZZER_FLICKER>:
}

extern void BUZZER_FLICKER()
{
     b6a:	cf 93       	push	r28
     b6c:	c3 e0       	ldi	r28, 0x03	; 3
	uint8_t u8Count = 0;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_BUZZER_FLICKERS ; u8Count ++)
	{
		BUZZER_ON();
     b6e:	0e 94 a9 05 	call	0xb52	; 0xb52 <BUZZER_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b72:	2f e7       	ldi	r18, 0x7F	; 127
     b74:	8c ef       	ldi	r24, 0xFC	; 252
     b76:	9a e0       	ldi	r25, 0x0A	; 10
     b78:	21 50       	subi	r18, 0x01	; 1
     b7a:	80 40       	sbci	r24, 0x00	; 0
     b7c:	90 40       	sbci	r25, 0x00	; 0
     b7e:	e1 f7       	brne	.-8      	; 0xb78 <BUZZER_FLICKER+0xe>
     b80:	00 c0       	rjmp	.+0      	; 0xb82 <BUZZER_FLICKER+0x18>
     b82:	00 00       	nop
		_delay_ms(BUZZER_FLICKERING_PERIOD);
		BUZZER_OFF();
     b84:	0e 94 af 05 	call	0xb5e	; 0xb5e <BUZZER_OFF>
     b88:	2f e7       	ldi	r18, 0x7F	; 127
     b8a:	8c ef       	ldi	r24, 0xFC	; 252
     b8c:	9a e0       	ldi	r25, 0x0A	; 10
     b8e:	21 50       	subi	r18, 0x01	; 1
     b90:	80 40       	sbci	r24, 0x00	; 0
     b92:	90 40       	sbci	r25, 0x00	; 0
     b94:	e1 f7       	brne	.-8      	; 0xb8e <BUZZER_FLICKER+0x24>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <BUZZER_FLICKER+0x2e>
     b98:	00 00       	nop
     b9a:	c1 50       	subi	r28, 0x01	; 1

extern void BUZZER_FLICKER()
{
	uint8_t u8Count = 0;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_BUZZER_FLICKERS ; u8Count ++)
     b9c:	41 f7       	brne	.-48     	; 0xb6e <BUZZER_FLICKER+0x4>
		BUZZER_ON();
		_delay_ms(BUZZER_FLICKERING_PERIOD);
		BUZZER_OFF();
		_delay_ms(BUZZER_FLICKERING_PERIOD);
	}
     b9e:	cf 91       	pop	r28
     ba0:	08 95       	ret

00000ba2 <POWER_ROW1>:

#include "KEYPAD_INTERFACE.h"

extern void POWER_ROW1()
{
	Pin_set(ROW1_PORT , ROW1_PIN_NUMBER);
     ba2:	64 e0       	ldi	r22, 0x04	; 4
     ba4:	85 e3       	ldi	r24, 0x35	; 53
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 81 0a 	call	0x1502	; 0x1502 <Pin_set>
     bac:	08 95       	ret

00000bae <POWER_ROW2>:
}

extern void POWER_ROW2()
{
	Pin_set(ROW2_PORT , ROW2_PIN_NUMBER);
     bae:	65 e0       	ldi	r22, 0x05	; 5
     bb0:	85 e3       	ldi	r24, 0x35	; 53
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 81 0a 	call	0x1502	; 0x1502 <Pin_set>
     bb8:	08 95       	ret

00000bba <POWER_ROW3>:
}

extern void POWER_ROW3()
{
	Pin_set(ROW3_PORT , ROW3_PIN_NUMBER);
     bba:	66 e0       	ldi	r22, 0x06	; 6
     bbc:	85 e3       	ldi	r24, 0x35	; 53
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 81 0a 	call	0x1502	; 0x1502 <Pin_set>
     bc4:	08 95       	ret

00000bc6 <POWER_ROW4>:
}

extern void POWER_ROW4()
{
	Pin_set(ROW4_PORT , ROW4_PIN_NUMBER);
     bc6:	67 e0       	ldi	r22, 0x07	; 7
     bc8:	85 e3       	ldi	r24, 0x35	; 53
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 81 0a 	call	0x1502	; 0x1502 <Pin_set>
     bd0:	08 95       	ret

00000bd2 <POWER_ALL_ROWS>:
}

extern void POWER_ALL_ROWS()
{
	POWER_ROW1();
     bd2:	0e 94 d1 05 	call	0xba2	; 0xba2 <POWER_ROW1>
	POWER_ROW2();
     bd6:	0e 94 d7 05 	call	0xbae	; 0xbae <POWER_ROW2>
	POWER_ROW3();
     bda:	0e 94 dd 05 	call	0xbba	; 0xbba <POWER_ROW3>
	POWER_ROW4();
     bde:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <POWER_ROW4>
     be2:	08 95       	ret

00000be4 <GROUND_ALL_ROWS>:
}

extern void GROUND_ALL_ROWS()
{
	Pin_reset(ROW1_PORT , ROW1_PIN_NUMBER);
     be4:	64 e0       	ldi	r22, 0x04	; 4
     be6:	85 e3       	ldi	r24, 0x35	; 53
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 8d 0a 	call	0x151a	; 0x151a <Pin_reset>
	Pin_reset(ROW2_PORT , ROW2_PIN_NUMBER);
     bee:	65 e0       	ldi	r22, 0x05	; 5
     bf0:	85 e3       	ldi	r24, 0x35	; 53
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 8d 0a 	call	0x151a	; 0x151a <Pin_reset>
	Pin_reset(ROW3_PORT , ROW3_PIN_NUMBER);
     bf8:	66 e0       	ldi	r22, 0x06	; 6
     bfa:	85 e3       	ldi	r24, 0x35	; 53
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 8d 0a 	call	0x151a	; 0x151a <Pin_reset>
	Pin_reset(ROW4_PORT , ROW4_PIN_NUMBER);
     c02:	67 e0       	ldi	r22, 0x07	; 7
     c04:	85 e3       	ldi	r24, 0x35	; 53
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 8d 0a 	call	0x151a	; 0x151a <Pin_reset>
     c0c:	08 95       	ret

00000c0e <READ_ROW1>:
}

extern void READ_ROW1(uint8_t *pu8Reading)
{
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	1f 92       	push	r1
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	7c 01       	movw	r14, r24
	uint8_t u8Reading = 0;
     c22:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Number_of_correct_checks = 0;
	
	Pin_read(ROW1_PIN , ROW1_PIN_NUMBER , &u8Reading);
     c24:	ae 01       	movw	r20, r28
     c26:	4f 5f       	subi	r20, 0xFF	; 255
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	64 e0       	ldi	r22, 0x04	; 4
     c2c:	83 e3       	ldi	r24, 0x33	; 51
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
	
	if (u8Reading != 0)
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	88 23       	and	r24, r24
     c38:	b9 f0       	breq	.+46     	; 0xc68 <READ_ROW1+0x5a>
     c3a:	16 e9       	ldi	r17, 0x96	; 150
     c3c:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
		{
			Pin_read(ROW1_PIN , ROW1_PIN_NUMBER , &u8Reading);
     c3e:	ae 01       	movw	r20, r28
     c40:	4f 5f       	subi	r20, 0xFF	; 255
     c42:	5f 4f       	sbci	r21, 0xFF	; 255
     c44:	64 e0       	ldi	r22, 0x04	; 4
     c46:	83 e3       	ldi	r24, 0x33	; 51
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
			
			if (u8Reading != 0)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	81 11       	cpse	r24, r1
			{
				u8Number_of_correct_checks ++ ;
     c52:	0f 5f       	subi	r16, 0xFF	; 255
     c54:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(ROW1_PIN , ROW1_PIN_NUMBER , &u8Reading);
	
	if (u8Reading != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
     c56:	99 f7       	brne	.-26     	; 0xc3e <READ_ROW1+0x30>
			{
				
			}
		}
		
		if (u8Number_of_correct_checks == NUMBER_OF_KEYPAD_CHECKS)
     c58:	06 39       	cpi	r16, 0x96	; 150
     c5a:	19 f4       	brne	.+6      	; 0xc62 <READ_ROW1+0x54>
		{
			*pu8Reading = u8Reading ;
     c5c:	f7 01       	movw	r30, r14
     c5e:	80 83       	st	Z, r24
     c60:	05 c0       	rjmp	.+10     	; 0xc6c <READ_ROW1+0x5e>
		}
		else
		{
			*pu8Reading = 0;
     c62:	f7 01       	movw	r30, r14
     c64:	10 82       	st	Z, r1
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <READ_ROW1+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
     c68:	f7 01       	movw	r30, r14
     c6a:	10 82       	st	Z, r1
	}
	
}
     c6c:	0f 90       	pop	r0
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	08 95       	ret

00000c7c <READ_ROW2>:

extern void READ_ROW2(uint8_t *pu8Reading)
{
     c7c:	ef 92       	push	r14
     c7e:	ff 92       	push	r15
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	1f 92       	push	r1
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	7c 01       	movw	r14, r24
	uint8_t u8Reading = 0;
     c90:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Number_of_correct_checks = 0;
	
	Pin_read(ROW2_PIN , ROW2_PIN_NUMBER , &u8Reading);
     c92:	ae 01       	movw	r20, r28
     c94:	4f 5f       	subi	r20, 0xFF	; 255
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	65 e0       	ldi	r22, 0x05	; 5
     c9a:	83 e3       	ldi	r24, 0x33	; 51
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
	
	if (u8Reading != 0)
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	88 23       	and	r24, r24
     ca6:	b9 f0       	breq	.+46     	; 0xcd6 <READ_ROW2+0x5a>
     ca8:	16 e9       	ldi	r17, 0x96	; 150
     caa:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
		{
			Pin_read(ROW2_PIN , ROW2_PIN_NUMBER , &u8Reading);
     cac:	ae 01       	movw	r20, r28
     cae:	4f 5f       	subi	r20, 0xFF	; 255
     cb0:	5f 4f       	sbci	r21, 0xFF	; 255
     cb2:	65 e0       	ldi	r22, 0x05	; 5
     cb4:	83 e3       	ldi	r24, 0x33	; 51
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
			
			if (u8Reading != 0)
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	81 11       	cpse	r24, r1
			{
				u8Number_of_correct_checks ++ ;
     cc0:	0f 5f       	subi	r16, 0xFF	; 255
     cc2:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(ROW2_PIN , ROW2_PIN_NUMBER , &u8Reading);
	
	if (u8Reading != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
     cc4:	99 f7       	brne	.-26     	; 0xcac <READ_ROW2+0x30>
			{
				
			}
		}
		
		if (u8Number_of_correct_checks == NUMBER_OF_KEYPAD_CHECKS)
     cc6:	06 39       	cpi	r16, 0x96	; 150
     cc8:	19 f4       	brne	.+6      	; 0xcd0 <READ_ROW2+0x54>
		{
			*pu8Reading = u8Reading ;
     cca:	f7 01       	movw	r30, r14
     ccc:	80 83       	st	Z, r24
     cce:	05 c0       	rjmp	.+10     	; 0xcda <READ_ROW2+0x5e>
		}
		else
		{
			*pu8Reading = 0;
     cd0:	f7 01       	movw	r30, r14
     cd2:	10 82       	st	Z, r1
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <READ_ROW2+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
     cd6:	f7 01       	movw	r30, r14
     cd8:	10 82       	st	Z, r1
	}
	
}
     cda:	0f 90       	pop	r0
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	08 95       	ret

00000cea <READ_ROW3>:

extern void READ_ROW3(uint8_t *pu8Reading)
{
     cea:	ef 92       	push	r14
     cec:	ff 92       	push	r15
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	1f 92       	push	r1
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	7c 01       	movw	r14, r24
	uint8_t u8Reading = 0;
     cfe:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Number_of_correct_checks = 0;
	
	Pin_read(ROW3_PIN , ROW3_PIN_NUMBER , &u8Reading);
     d00:	ae 01       	movw	r20, r28
     d02:	4f 5f       	subi	r20, 0xFF	; 255
     d04:	5f 4f       	sbci	r21, 0xFF	; 255
     d06:	66 e0       	ldi	r22, 0x06	; 6
     d08:	83 e3       	ldi	r24, 0x33	; 51
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
	
	if (u8Reading != 0)
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	88 23       	and	r24, r24
     d14:	b9 f0       	breq	.+46     	; 0xd44 <READ_ROW3+0x5a>
     d16:	16 e9       	ldi	r17, 0x96	; 150
     d18:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
		{
			Pin_read(ROW3_PIN , ROW3_PIN_NUMBER , &u8Reading);
     d1a:	ae 01       	movw	r20, r28
     d1c:	4f 5f       	subi	r20, 0xFF	; 255
     d1e:	5f 4f       	sbci	r21, 0xFF	; 255
     d20:	66 e0       	ldi	r22, 0x06	; 6
     d22:	83 e3       	ldi	r24, 0x33	; 51
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
			
			if (u8Reading != 0)
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	81 11       	cpse	r24, r1
			{
				u8Number_of_correct_checks ++ ;
     d2e:	0f 5f       	subi	r16, 0xFF	; 255
     d30:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(ROW3_PIN , ROW3_PIN_NUMBER , &u8Reading);
	
	if (u8Reading != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
     d32:	99 f7       	brne	.-26     	; 0xd1a <READ_ROW3+0x30>
			{
				
			}
		}
		
		if (u8Number_of_correct_checks == NUMBER_OF_KEYPAD_CHECKS)
     d34:	06 39       	cpi	r16, 0x96	; 150
     d36:	19 f4       	brne	.+6      	; 0xd3e <READ_ROW3+0x54>
		{
			*pu8Reading = u8Reading ;
     d38:	f7 01       	movw	r30, r14
     d3a:	80 83       	st	Z, r24
     d3c:	05 c0       	rjmp	.+10     	; 0xd48 <READ_ROW3+0x5e>
		}
		else
		{
			*pu8Reading = 0;
     d3e:	f7 01       	movw	r30, r14
     d40:	10 82       	st	Z, r1
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <READ_ROW3+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
     d44:	f7 01       	movw	r30, r14
     d46:	10 82       	st	Z, r1
	}
	
}
     d48:	0f 90       	pop	r0
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	08 95       	ret

00000d58 <READ_ROW4>:

extern void READ_ROW4(uint8_t *pu8Reading)
{
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	1f 92       	push	r1
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	7c 01       	movw	r14, r24
	uint8_t u8Reading = 0;
     d6c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Number_of_correct_checks = 0;
	
	Pin_read(ROW4_PIN , ROW4_PIN_NUMBER , &u8Reading);
     d6e:	ae 01       	movw	r20, r28
     d70:	4f 5f       	subi	r20, 0xFF	; 255
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	67 e0       	ldi	r22, 0x07	; 7
     d76:	83 e3       	ldi	r24, 0x33	; 51
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
	
	if (u8Reading != 0)
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	88 23       	and	r24, r24
     d82:	b9 f0       	breq	.+46     	; 0xdb2 <READ_ROW4+0x5a>
     d84:	16 e9       	ldi	r17, 0x96	; 150
     d86:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
		{
			Pin_read(ROW4_PIN , ROW4_PIN_NUMBER , &u8Reading);
     d88:	ae 01       	movw	r20, r28
     d8a:	4f 5f       	subi	r20, 0xFF	; 255
     d8c:	5f 4f       	sbci	r21, 0xFF	; 255
     d8e:	67 e0       	ldi	r22, 0x07	; 7
     d90:	83 e3       	ldi	r24, 0x33	; 51
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
			
			if (u8Reading != 0)
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	81 11       	cpse	r24, r1
			{
				u8Number_of_correct_checks ++ ;
     d9c:	0f 5f       	subi	r16, 0xFF	; 255
     d9e:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(ROW4_PIN , ROW4_PIN_NUMBER , &u8Reading);
	
	if (u8Reading != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
     da0:	99 f7       	brne	.-26     	; 0xd88 <READ_ROW4+0x30>
			{
				
			}
		}
		
		if (u8Number_of_correct_checks == NUMBER_OF_KEYPAD_CHECKS)
     da2:	06 39       	cpi	r16, 0x96	; 150
     da4:	19 f4       	brne	.+6      	; 0xdac <READ_ROW4+0x54>
		{
			*pu8Reading = u8Reading ;
     da6:	f7 01       	movw	r30, r14
     da8:	80 83       	st	Z, r24
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <READ_ROW4+0x5e>
		}
		else
		{
			*pu8Reading = 0;
     dac:	f7 01       	movw	r30, r14
     dae:	10 82       	st	Z, r1
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <READ_ROW4+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
     db2:	f7 01       	movw	r30, r14
     db4:	10 82       	st	Z, r1
	}
	
}
     db6:	0f 90       	pop	r0
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ff 90       	pop	r15
     dc2:	ef 90       	pop	r14
     dc4:	08 95       	ret

00000dc6 <SET_ROWS_INPUT>:

extern void SET_ROWS_INPUT()
{
	Pin_mode(ROW1_PORT , ROW1_DDR , ROW1_PIN_NUMBER , INPUT);
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	44 e0       	ldi	r20, 0x04	; 4
     dca:	64 e3       	ldi	r22, 0x34	; 52
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	85 e3       	ldi	r24, 0x35	; 53
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(ROW2_PORT , ROW2_DDR , ROW2_PIN_NUMBER , INPUT);
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	45 e0       	ldi	r20, 0x05	; 5
     dda:	64 e3       	ldi	r22, 0x34	; 52
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	85 e3       	ldi	r24, 0x35	; 53
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(ROW3_PORT , ROW3_DDR , ROW3_PIN_NUMBER , INPUT);
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	46 e0       	ldi	r20, 0x06	; 6
     dea:	64 e3       	ldi	r22, 0x34	; 52
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	85 e3       	ldi	r24, 0x35	; 53
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(ROW4_PORT , ROW4_DDR , ROW4_PIN_NUMBER , INPUT);
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	47 e0       	ldi	r20, 0x07	; 7
     dfa:	64 e3       	ldi	r22, 0x34	; 52
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	85 e3       	ldi	r24, 0x35	; 53
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
     e06:	08 95       	ret

00000e08 <SET_ROWS_OUTPUT>:

}

extern void SET_ROWS_OUTPUT()
{
	Pin_mode(ROW1_PORT , ROW1_DDR , ROW1_PIN_NUMBER , OUTPUT);
     e08:	21 e0       	ldi	r18, 0x01	; 1
     e0a:	44 e0       	ldi	r20, 0x04	; 4
     e0c:	64 e3       	ldi	r22, 0x34	; 52
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	85 e3       	ldi	r24, 0x35	; 53
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(ROW2_PORT , ROW2_DDR , ROW2_PIN_NUMBER , OUTPUT);
     e18:	21 e0       	ldi	r18, 0x01	; 1
     e1a:	45 e0       	ldi	r20, 0x05	; 5
     e1c:	64 e3       	ldi	r22, 0x34	; 52
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	85 e3       	ldi	r24, 0x35	; 53
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(ROW3_PORT , ROW3_DDR , ROW3_PIN_NUMBER , OUTPUT);
     e28:	21 e0       	ldi	r18, 0x01	; 1
     e2a:	46 e0       	ldi	r20, 0x06	; 6
     e2c:	64 e3       	ldi	r22, 0x34	; 52
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	85 e3       	ldi	r24, 0x35	; 53
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(ROW4_PORT , ROW4_DDR , ROW4_PIN_NUMBER , OUTPUT);
     e38:	21 e0       	ldi	r18, 0x01	; 1
     e3a:	47 e0       	ldi	r20, 0x07	; 7
     e3c:	64 e3       	ldi	r22, 0x34	; 52
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	85 e3       	ldi	r24, 0x35	; 53
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
     e48:	08 95       	ret

00000e4a <POWER_COLUMN1>:

}

extern void POWER_COLUMN1()
{
	Pin_set(COLUMN1_PORT , COLUMN1_PIN_NUMBER);
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	85 e3       	ldi	r24, 0x35	; 53
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 81 0a 	call	0x1502	; 0x1502 <Pin_set>
     e54:	08 95       	ret

00000e56 <POWER_COLUMN2>:
}

extern void POWER_COLUMN2()
{
	Pin_set(COLUMN2_PORT , COLUMN2_PIN_NUMBER);
     e56:	61 e0       	ldi	r22, 0x01	; 1
     e58:	85 e3       	ldi	r24, 0x35	; 53
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 81 0a 	call	0x1502	; 0x1502 <Pin_set>
     e60:	08 95       	ret

00000e62 <POWER_COLUMN3>:
}

extern void POWER_COLUMN3()
{
	Pin_set(COLUMN3_PORT , COLUMN3_PIN_NUMBER);
     e62:	62 e0       	ldi	r22, 0x02	; 2
     e64:	85 e3       	ldi	r24, 0x35	; 53
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 81 0a 	call	0x1502	; 0x1502 <Pin_set>
     e6c:	08 95       	ret

00000e6e <POWER_COLUMN4>:
}

extern void POWER_COLUMN4()
{
	Pin_set(COLUMN4_PORT , COLUMN4_PIN_NUMBER);
     e6e:	63 e0       	ldi	r22, 0x03	; 3
     e70:	85 e3       	ldi	r24, 0x35	; 53
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 81 0a 	call	0x1502	; 0x1502 <Pin_set>
     e78:	08 95       	ret

00000e7a <POWER_ALL_COLUMNS>:
}

extern void POWER_ALL_COLUMNS()
{
	POWER_COLUMN1();
     e7a:	0e 94 25 07 	call	0xe4a	; 0xe4a <POWER_COLUMN1>
	POWER_COLUMN2();
     e7e:	0e 94 2b 07 	call	0xe56	; 0xe56 <POWER_COLUMN2>
	POWER_COLUMN3();
     e82:	0e 94 31 07 	call	0xe62	; 0xe62 <POWER_COLUMN3>
	POWER_COLUMN4();
     e86:	0e 94 37 07 	call	0xe6e	; 0xe6e <POWER_COLUMN4>
     e8a:	08 95       	ret

00000e8c <GROUND_ALL_COLUMNS>:
}

extern void GROUND_ALL_COLUMNS()
{
	Pin_reset(COLUMN1_PORT , COLUMN1_PIN_NUMBER);
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	85 e3       	ldi	r24, 0x35	; 53
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 8d 0a 	call	0x151a	; 0x151a <Pin_reset>
	Pin_reset(COLUMN2_PORT , COLUMN2_PIN_NUMBER);
     e96:	61 e0       	ldi	r22, 0x01	; 1
     e98:	85 e3       	ldi	r24, 0x35	; 53
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 8d 0a 	call	0x151a	; 0x151a <Pin_reset>
	Pin_reset(COLUMN3_PORT , COLUMN3_PIN_NUMBER);
     ea0:	62 e0       	ldi	r22, 0x02	; 2
     ea2:	85 e3       	ldi	r24, 0x35	; 53
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 8d 0a 	call	0x151a	; 0x151a <Pin_reset>
	Pin_reset(COLUMN4_PORT , COLUMN4_PIN_NUMBER);
     eaa:	63 e0       	ldi	r22, 0x03	; 3
     eac:	85 e3       	ldi	r24, 0x35	; 53
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 8d 0a 	call	0x151a	; 0x151a <Pin_reset>
     eb4:	08 95       	ret

00000eb6 <READ_COLUMN1>:
}

extern void READ_COLUMN1(uint8_t *pu8Reading)
{
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	1f 92       	push	r1
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	7c 01       	movw	r14, r24
	uint8_t u8Reading = 0;
     eca:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Number_of_correct_checks = 0;
	
	Pin_read(COLUMN1_PIN , COLUMN1_PIN_NUMBER , &u8Reading);
     ecc:	ae 01       	movw	r20, r28
     ece:	4f 5f       	subi	r20, 0xFF	; 255
     ed0:	5f 4f       	sbci	r21, 0xFF	; 255
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	83 e3       	ldi	r24, 0x33	; 51
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
	
	if (u8Reading != 0)
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	88 23       	and	r24, r24
     ee0:	b9 f0       	breq	.+46     	; 0xf10 <READ_COLUMN1+0x5a>
     ee2:	16 e9       	ldi	r17, 0x96	; 150
     ee4:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
		{
			Pin_read(COLUMN1_PIN , COLUMN1_PIN_NUMBER , &u8Reading);
     ee6:	ae 01       	movw	r20, r28
     ee8:	4f 5f       	subi	r20, 0xFF	; 255
     eea:	5f 4f       	sbci	r21, 0xFF	; 255
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	83 e3       	ldi	r24, 0x33	; 51
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
			
			if (u8Reading != 0)
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	81 11       	cpse	r24, r1
			{
				u8Number_of_correct_checks ++ ;
     efa:	0f 5f       	subi	r16, 0xFF	; 255
     efc:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(COLUMN1_PIN , COLUMN1_PIN_NUMBER , &u8Reading);
	
	if (u8Reading != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
     efe:	99 f7       	brne	.-26     	; 0xee6 <READ_COLUMN1+0x30>
			{
				
			}
		}
		
		if (u8Number_of_correct_checks == NUMBER_OF_KEYPAD_CHECKS)
     f00:	06 39       	cpi	r16, 0x96	; 150
     f02:	19 f4       	brne	.+6      	; 0xf0a <READ_COLUMN1+0x54>
		{
			*pu8Reading = u8Reading ; 
     f04:	f7 01       	movw	r30, r14
     f06:	80 83       	st	Z, r24
     f08:	05 c0       	rjmp	.+10     	; 0xf14 <READ_COLUMN1+0x5e>
		}
		else
		{
			*pu8Reading = 0;
     f0a:	f7 01       	movw	r30, r14
     f0c:	10 82       	st	Z, r1
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <READ_COLUMN1+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
     f10:	f7 01       	movw	r30, r14
     f12:	10 82       	st	Z, r1
	}
	
	
}
     f14:	0f 90       	pop	r0
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	ff 90       	pop	r15
     f20:	ef 90       	pop	r14
     f22:	08 95       	ret

00000f24 <READ_COLUMN2>:

extern void READ_COLUMN2(uint8_t *pu8Reading)
{
     f24:	ef 92       	push	r14
     f26:	ff 92       	push	r15
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	1f 92       	push	r1
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	7c 01       	movw	r14, r24
	uint8_t u8Reading = 0;
     f38:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Number_of_correct_checks = 0;
	
	Pin_read(COLUMN2_PIN , COLUMN2_PIN_NUMBER , &u8Reading);
     f3a:	ae 01       	movw	r20, r28
     f3c:	4f 5f       	subi	r20, 0xFF	; 255
     f3e:	5f 4f       	sbci	r21, 0xFF	; 255
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	83 e3       	ldi	r24, 0x33	; 51
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
	
	if (u8Reading != 0)
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	88 23       	and	r24, r24
     f4e:	b9 f0       	breq	.+46     	; 0xf7e <READ_COLUMN2+0x5a>
     f50:	16 e9       	ldi	r17, 0x96	; 150
     f52:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
		{
			Pin_read(COLUMN2_PIN , COLUMN2_PIN_NUMBER , &u8Reading);
     f54:	ae 01       	movw	r20, r28
     f56:	4f 5f       	subi	r20, 0xFF	; 255
     f58:	5f 4f       	sbci	r21, 0xFF	; 255
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	83 e3       	ldi	r24, 0x33	; 51
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
			
			if (u8Reading != 0)
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	81 11       	cpse	r24, r1
			{
				u8Number_of_correct_checks ++ ;
     f68:	0f 5f       	subi	r16, 0xFF	; 255
     f6a:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(COLUMN2_PIN , COLUMN2_PIN_NUMBER , &u8Reading);
	
	if (u8Reading != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
     f6c:	99 f7       	brne	.-26     	; 0xf54 <READ_COLUMN2+0x30>
			{
				
			}
		}
		
		if (u8Number_of_correct_checks == NUMBER_OF_KEYPAD_CHECKS)
     f6e:	06 39       	cpi	r16, 0x96	; 150
     f70:	19 f4       	brne	.+6      	; 0xf78 <READ_COLUMN2+0x54>
		{
			*pu8Reading = u8Reading ;
     f72:	f7 01       	movw	r30, r14
     f74:	80 83       	st	Z, r24
     f76:	05 c0       	rjmp	.+10     	; 0xf82 <READ_COLUMN2+0x5e>
		}
		else
		{
			*pu8Reading = 0;
     f78:	f7 01       	movw	r30, r14
     f7a:	10 82       	st	Z, r1
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <READ_COLUMN2+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
     f7e:	f7 01       	movw	r30, r14
     f80:	10 82       	st	Z, r1
	}
}
     f82:	0f 90       	pop	r0
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	ff 90       	pop	r15
     f8e:	ef 90       	pop	r14
     f90:	08 95       	ret

00000f92 <READ_COLUMN3>:

extern void READ_COLUMN3(uint8_t *pu8Reading)
{
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	1f 92       	push	r1
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	7c 01       	movw	r14, r24
	uint8_t u8Reading = 0;
     fa6:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Number_of_correct_checks = 0;
	
	Pin_read(COLUMN3_PIN , COLUMN3_PIN_NUMBER , &u8Reading);
     fa8:	ae 01       	movw	r20, r28
     faa:	4f 5f       	subi	r20, 0xFF	; 255
     fac:	5f 4f       	sbci	r21, 0xFF	; 255
     fae:	62 e0       	ldi	r22, 0x02	; 2
     fb0:	83 e3       	ldi	r24, 0x33	; 51
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
	
	if (u8Reading != 0)
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	88 23       	and	r24, r24
     fbc:	b9 f0       	breq	.+46     	; 0xfec <READ_COLUMN3+0x5a>
     fbe:	16 e9       	ldi	r17, 0x96	; 150
     fc0:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
		{
			Pin_read(COLUMN3_PIN , COLUMN3_PIN_NUMBER , &u8Reading);
     fc2:	ae 01       	movw	r20, r28
     fc4:	4f 5f       	subi	r20, 0xFF	; 255
     fc6:	5f 4f       	sbci	r21, 0xFF	; 255
     fc8:	62 e0       	ldi	r22, 0x02	; 2
     fca:	83 e3       	ldi	r24, 0x33	; 51
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
			
			if (u8Reading != 0)
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	81 11       	cpse	r24, r1
			{
				u8Number_of_correct_checks ++ ;
     fd6:	0f 5f       	subi	r16, 0xFF	; 255
     fd8:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(COLUMN3_PIN , COLUMN3_PIN_NUMBER , &u8Reading);
	
	if (u8Reading != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
     fda:	99 f7       	brne	.-26     	; 0xfc2 <READ_COLUMN3+0x30>
			{
				
			}
		}
		
		if (u8Number_of_correct_checks == NUMBER_OF_KEYPAD_CHECKS)
     fdc:	06 39       	cpi	r16, 0x96	; 150
     fde:	19 f4       	brne	.+6      	; 0xfe6 <READ_COLUMN3+0x54>
		{
			*pu8Reading = u8Reading ;
     fe0:	f7 01       	movw	r30, r14
     fe2:	80 83       	st	Z, r24
     fe4:	05 c0       	rjmp	.+10     	; 0xff0 <READ_COLUMN3+0x5e>
		}
		else
		{
			*pu8Reading = 0;
     fe6:	f7 01       	movw	r30, r14
     fe8:	10 82       	st	Z, r1
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <READ_COLUMN3+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
     fec:	f7 01       	movw	r30, r14
     fee:	10 82       	st	Z, r1
	}
}
     ff0:	0f 90       	pop	r0
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	ff 90       	pop	r15
     ffc:	ef 90       	pop	r14
     ffe:	08 95       	ret

00001000 <READ_COLUMN4>:

extern void READ_COLUMN4(uint8_t *pu8Reading)
{
    1000:	ef 92       	push	r14
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	1f 92       	push	r1
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	7c 01       	movw	r14, r24
	uint8_t u8Reading = 0;
    1014:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Count = 0;
	uint8_t u8Number_of_correct_checks = 0;
	
	Pin_read(COLUMN4_PIN , COLUMN4_PIN_NUMBER , &u8Reading);
    1016:	ae 01       	movw	r20, r28
    1018:	4f 5f       	subi	r20, 0xFF	; 255
    101a:	5f 4f       	sbci	r21, 0xFF	; 255
    101c:	63 e0       	ldi	r22, 0x03	; 3
    101e:	83 e3       	ldi	r24, 0x33	; 51
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
	
	if (u8Reading != 0)
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	88 23       	and	r24, r24
    102a:	b9 f0       	breq	.+46     	; 0x105a <READ_COLUMN4+0x5a>
    102c:	16 e9       	ldi	r17, 0x96	; 150
    102e:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
		{
			Pin_read(COLUMN4_PIN , COLUMN4_PIN_NUMBER , &u8Reading);
    1030:	ae 01       	movw	r20, r28
    1032:	4f 5f       	subi	r20, 0xFF	; 255
    1034:	5f 4f       	sbci	r21, 0xFF	; 255
    1036:	63 e0       	ldi	r22, 0x03	; 3
    1038:	83 e3       	ldi	r24, 0x33	; 51
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Pin_read>
			
			if (u8Reading != 0)
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	81 11       	cpse	r24, r1
			{
				u8Number_of_correct_checks ++ ;
    1044:	0f 5f       	subi	r16, 0xFF	; 255
    1046:	11 50       	subi	r17, 0x01	; 1
	
	Pin_read(COLUMN4_PIN , COLUMN4_PIN_NUMBER , &u8Reading);
	
	if (u8Reading != 0)
	{
		for (u8Count = 0 ; u8Count < NUMBER_OF_KEYPAD_CHECKS ; u8Count ++)
    1048:	99 f7       	brne	.-26     	; 0x1030 <READ_COLUMN4+0x30>
			{
				
			}
		}
		
		if (u8Number_of_correct_checks == NUMBER_OF_KEYPAD_CHECKS)
    104a:	06 39       	cpi	r16, 0x96	; 150
    104c:	19 f4       	brne	.+6      	; 0x1054 <READ_COLUMN4+0x54>
		{
			*pu8Reading = u8Reading ;
    104e:	f7 01       	movw	r30, r14
    1050:	80 83       	st	Z, r24
    1052:	05 c0       	rjmp	.+10     	; 0x105e <READ_COLUMN4+0x5e>
		}
		else
		{
			*pu8Reading = 0;
    1054:	f7 01       	movw	r30, r14
    1056:	10 82       	st	Z, r1
    1058:	02 c0       	rjmp	.+4      	; 0x105e <READ_COLUMN4+0x5e>
		}
	}
	else
	{
		*pu8Reading = 0;
    105a:	f7 01       	movw	r30, r14
    105c:	10 82       	st	Z, r1
	}
}
    105e:	0f 90       	pop	r0
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	08 95       	ret

0000106e <SET_COLUMNS_INPUT>:

extern void SET_COLUMNS_INPUT()
{
	Pin_mode(COLUMN1_PORT , COLUMN1_DDR , COLUMN1_PIN_NUMBER , INPUT);
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	64 e3       	ldi	r22, 0x34	; 52
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	85 e3       	ldi	r24, 0x35	; 53
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(COLUMN2_PORT , COLUMN2_DDR , COLUMN2_PIN_NUMBER , INPUT);
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	41 e0       	ldi	r20, 0x01	; 1
    1082:	64 e3       	ldi	r22, 0x34	; 52
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	85 e3       	ldi	r24, 0x35	; 53
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(COLUMN3_PORT , COLUMN3_DDR , COLUMN3_PIN_NUMBER , INPUT);
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	42 e0       	ldi	r20, 0x02	; 2
    1092:	64 e3       	ldi	r22, 0x34	; 52
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	85 e3       	ldi	r24, 0x35	; 53
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(COLUMN4_PORT , COLUMN4_DDR , COLUMN4_PIN_NUMBER , INPUT);
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	43 e0       	ldi	r20, 0x03	; 3
    10a2:	64 e3       	ldi	r22, 0x34	; 52
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	85 e3       	ldi	r24, 0x35	; 53
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
    10ae:	08 95       	ret

000010b0 <SET_COLUMNS_OUTPUT>:
}

extern void SET_COLUMNS_OUTPUT()
{
	Pin_mode(COLUMN1_PORT , COLUMN1_DDR , COLUMN1_PIN_NUMBER , OUTPUT);
    10b0:	21 e0       	ldi	r18, 0x01	; 1
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	64 e3       	ldi	r22, 0x34	; 52
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	85 e3       	ldi	r24, 0x35	; 53
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(COLUMN2_PORT , COLUMN2_DDR , COLUMN2_PIN_NUMBER , OUTPUT);
    10c0:	21 e0       	ldi	r18, 0x01	; 1
    10c2:	41 e0       	ldi	r20, 0x01	; 1
    10c4:	64 e3       	ldi	r22, 0x34	; 52
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	85 e3       	ldi	r24, 0x35	; 53
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(COLUMN3_PORT , COLUMN3_DDR , COLUMN3_PIN_NUMBER , OUTPUT);
    10d0:	21 e0       	ldi	r18, 0x01	; 1
    10d2:	42 e0       	ldi	r20, 0x02	; 2
    10d4:	64 e3       	ldi	r22, 0x34	; 52
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	85 e3       	ldi	r24, 0x35	; 53
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(COLUMN4_PORT , COLUMN4_DDR , COLUMN4_PIN_NUMBER , OUTPUT);
    10e0:	21 e0       	ldi	r18, 0x01	; 1
    10e2:	43 e0       	ldi	r20, 0x03	; 3
    10e4:	64 e3       	ldi	r22, 0x34	; 52
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	85 e3       	ldi	r24, 0x35	; 53
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
    10f0:	08 95       	ret

000010f2 <RW_STATE>:
 */ 

#include "LCD_INTERFACE.h"

extern void RW_STATE(uint8_t u8State)
{
    10f2:	cf 93       	push	r28
    10f4:	c8 2f       	mov	r28, r24
	Pin_mode(RW_PORT, RW_DDR , RW_PIN_NUMBER , OUTPUT);
    10f6:	21 e0       	ldi	r18, 0x01	; 1
    10f8:	42 e0       	ldi	r20, 0x02	; 2
    10fa:	67 e3       	ldi	r22, 0x37	; 55
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	88 e3       	ldi	r24, 0x38	; 56
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>

	if (u8State == RW_WRITE)
    1106:	c1 11       	cpse	r28, r1
    1108:	06 c0       	rjmp	.+12     	; 0x1116 <RW_STATE+0x24>
	{
		Pin_reset(RW_PORT , RW_PIN_NUMBER);
    110a:	62 e0       	ldi	r22, 0x02	; 2
    110c:	88 e3       	ldi	r24, 0x38	; 56
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 8d 0a 	call	0x151a	; 0x151a <Pin_reset>
    1114:	07 c0       	rjmp	.+14     	; 0x1124 <RW_STATE+0x32>
	}
	else if (u8State == RW_READ)
    1116:	c1 30       	cpi	r28, 0x01	; 1
    1118:	29 f4       	brne	.+10     	; 0x1124 <RW_STATE+0x32>
	{
		Pin_set(RW_PORT , RW_PIN_NUMBER);
    111a:	62 e0       	ldi	r22, 0x02	; 2
    111c:	88 e3       	ldi	r24, 0x38	; 56
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 81 0a 	call	0x1502	; 0x1502 <Pin_set>
	}
	else
	{
		
	}
}
    1124:	cf 91       	pop	r28
    1126:	08 95       	ret

00001128 <RS_STATE>:

extern void RS_STATE(uint8_t u8State)
{
    1128:	cf 93       	push	r28
    112a:	c8 2f       	mov	r28, r24
	Pin_mode(RS_PORT, RS_DDR , RS_PIN_NUMBER , OUTPUT);
    112c:	21 e0       	ldi	r18, 0x01	; 1
    112e:	41 e0       	ldi	r20, 0x01	; 1
    1130:	67 e3       	ldi	r22, 0x37	; 55
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	88 e3       	ldi	r24, 0x38	; 56
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>

	if (u8State == RS_COMMAND)
    113c:	c1 11       	cpse	r28, r1
    113e:	06 c0       	rjmp	.+12     	; 0x114c <RS_STATE+0x24>
	{
		Pin_reset(RS_PORT , RS_PIN_NUMBER);
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	88 e3       	ldi	r24, 0x38	; 56
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 8d 0a 	call	0x151a	; 0x151a <Pin_reset>
    114a:	07 c0       	rjmp	.+14     	; 0x115a <RS_STATE+0x32>
	}
	else if (u8State == RS_DATA)
    114c:	c1 30       	cpi	r28, 0x01	; 1
    114e:	29 f4       	brne	.+10     	; 0x115a <RS_STATE+0x32>
	{
		Pin_set(RS_PORT , RS_PIN_NUMBER);
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	88 e3       	ldi	r24, 0x38	; 56
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 81 0a 	call	0x1502	; 0x1502 <Pin_set>
	}
	else
	{
		
	}
}
    115a:	cf 91       	pop	r28
    115c:	08 95       	ret

0000115e <ENABLE_STATE>:

extern void ENABLE_STATE(uint8_t u8State)
{
    115e:	cf 93       	push	r28
    1160:	c8 2f       	mov	r28, r24
	Pin_mode(ENABLE_PORT, ENABLE_DDR , ENABLE_PIN_NUMBER , OUTPUT);
    1162:	21 e0       	ldi	r18, 0x01	; 1
    1164:	43 e0       	ldi	r20, 0x03	; 3
    1166:	67 e3       	ldi	r22, 0x37	; 55
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	88 e3       	ldi	r24, 0x38	; 56
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>

	if (u8State == ENABLE_LOW)
    1172:	c1 11       	cpse	r28, r1
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <ENABLE_STATE+0x24>
	{
		Pin_reset(ENABLE_PORT , ENABLE_PIN_NUMBER);
    1176:	63 e0       	ldi	r22, 0x03	; 3
    1178:	88 e3       	ldi	r24, 0x38	; 56
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 8d 0a 	call	0x151a	; 0x151a <Pin_reset>
    1180:	07 c0       	rjmp	.+14     	; 0x1190 <ENABLE_STATE+0x32>
	}
	else if (u8State == ENABLE_HIGH)
    1182:	c1 30       	cpi	r28, 0x01	; 1
    1184:	29 f4       	brne	.+10     	; 0x1190 <ENABLE_STATE+0x32>
	{
		Pin_set(ENABLE_PORT , ENABLE_PIN_NUMBER);
    1186:	63 e0       	ldi	r22, 0x03	; 3
    1188:	88 e3       	ldi	r24, 0x38	; 56
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 81 0a 	call	0x1502	; 0x1502 <Pin_set>
	}
	else
	{
		
	}
}
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret

00001194 <HIGH_TO_LOW_PULSE>:

extern void HIGH_TO_LOW_PULSE()
{
	ENABLE_STATE(ENABLE_HIGH);
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	0e 94 af 08 	call	0x115e	; 0x115e <ENABLE_STATE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    119a:	84 e1       	ldi	r24, 0x14	; 20
    119c:	8a 95       	dec	r24
    119e:	f1 f7       	brne	.-4      	; 0x119c <HIGH_TO_LOW_PULSE+0x8>
	_delay_us(PULSE_WIDTH);
	ENABLE_STATE(ENABLE_LOW);
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	0e 94 af 08 	call	0x115e	; 0x115e <ENABLE_STATE>
    11a6:	80 e5       	ldi	r24, 0x50	; 80
    11a8:	8a 95       	dec	r24
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <HIGH_TO_LOW_PULSE+0x14>
    11ac:	08 95       	ret

000011ae <LCD_COMMAND>:
	_delay_us(20);  
}

extern void LCD_COMMAND(uint8_t u8Command)
{
    11ae:	cf 93       	push	r28
    11b0:	c8 2f       	mov	r28, r24
	*((unsigned int *)(D4_PORT)) =(*((unsigned int *)(D4_PORT)) & 0x0F) | (u8Command & 0xF0) ;
    11b2:	8b b3       	in	r24, 0x1b	; 27
    11b4:	9c b3       	in	r25, 0x1c	; 28
    11b6:	8f 70       	andi	r24, 0x0F	; 15
    11b8:	99 27       	eor	r25, r25
    11ba:	2c 2f       	mov	r18, r28
    11bc:	20 7f       	andi	r18, 0xF0	; 240
    11be:	82 2b       	or	r24, r18
    11c0:	9c bb       	out	0x1c, r25	; 28
    11c2:	8b bb       	out	0x1b, r24	; 27
	RS_STATE(RS_COMMAND);
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	0e 94 94 08 	call	0x1128	; 0x1128 <RS_STATE>
	RW_STATE(RW_WRITE);
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 79 08 	call	0x10f2	; 0x10f2 <RW_STATE>
	HIGH_TO_LOW_PULSE();
    11d0:	0e 94 ca 08 	call	0x1194	; 0x1194 <HIGH_TO_LOW_PULSE>
	
	 *((unsigned int *)(D4_PORT)) = u8Command << 4;
    11d4:	20 e1       	ldi	r18, 0x10	; 16
    11d6:	c2 9f       	mul	r28, r18
    11d8:	c0 01       	movw	r24, r0
    11da:	11 24       	eor	r1, r1
    11dc:	9c bb       	out	0x1c, r25	; 28
    11de:	8b bb       	out	0x1b, r24	; 27
	 HIGH_TO_LOW_PULSE();
    11e0:	0e 94 ca 08 	call	0x1194	; 0x1194 <HIGH_TO_LOW_PULSE>
}
    11e4:	cf 91       	pop	r28
    11e6:	08 95       	ret

000011e8 <LCD_DATA>:

extern void LCD_DATA(uint8_t u8Data)
{
    11e8:	cf 93       	push	r28
    11ea:	c8 2f       	mov	r28, r24
	*((unsigned int *)(D4_PORT)) = (*((unsigned int *)(D4_PORT)) & 0x0F) | (u8Data & 0xF0) ;
    11ec:	8b b3       	in	r24, 0x1b	; 27
    11ee:	9c b3       	in	r25, 0x1c	; 28
    11f0:	8f 70       	andi	r24, 0x0F	; 15
    11f2:	99 27       	eor	r25, r25
    11f4:	2c 2f       	mov	r18, r28
    11f6:	20 7f       	andi	r18, 0xF0	; 240
    11f8:	82 2b       	or	r24, r18
    11fa:	9c bb       	out	0x1c, r25	; 28
    11fc:	8b bb       	out	0x1b, r24	; 27
	RS_STATE(RS_DATA);
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	0e 94 94 08 	call	0x1128	; 0x1128 <RS_STATE>
	RW_STATE(RW_WRITE);
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	0e 94 79 08 	call	0x10f2	; 0x10f2 <RW_STATE>
	HIGH_TO_LOW_PULSE();
    120a:	0e 94 ca 08 	call	0x1194	; 0x1194 <HIGH_TO_LOW_PULSE>
	
	*((unsigned int *)(D4_PORT)) = u8Data << 4;
    120e:	20 e1       	ldi	r18, 0x10	; 16
    1210:	c2 9f       	mul	r28, r18
    1212:	c0 01       	movw	r24, r0
    1214:	11 24       	eor	r1, r1
    1216:	9c bb       	out	0x1c, r25	; 28
    1218:	8b bb       	out	0x1b, r24	; 27
	HIGH_TO_LOW_PULSE();
    121a:	0e 94 ca 08 	call	0x1194	; 0x1194 <HIGH_TO_LOW_PULSE>
}
    121e:	cf 91       	pop	r28
    1220:	08 95       	ret

00001222 <LCD_DATA_STRING>:

extern void LCD_DATA_STRING(uint8_t *pu8Data , uint8_t u8Size)
{
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
	uint8_t u8Count = 0;
	
	for (u8Count = 0; u8Count < u8Size ; u8Count ++)
    122a:	66 23       	and	r22, r22
    122c:	71 f0       	breq	.+28     	; 0x124a <LCD_DATA_STRING+0x28>
    122e:	ec 01       	movw	r28, r24
    1230:	61 50       	subi	r22, 0x01	; 1
    1232:	06 2f       	mov	r16, r22
    1234:	10 e0       	ldi	r17, 0x00	; 0
    1236:	0f 5f       	subi	r16, 0xFF	; 255
    1238:	1f 4f       	sbci	r17, 0xFF	; 255
    123a:	08 0f       	add	r16, r24
    123c:	19 1f       	adc	r17, r25
	{
		LCD_DATA(pu8Data[u8Count]);
    123e:	89 91       	ld	r24, Y+
    1240:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCD_DATA>

extern void LCD_DATA_STRING(uint8_t *pu8Data , uint8_t u8Size)
{
	uint8_t u8Count = 0;
	
	for (u8Count = 0; u8Count < u8Size ; u8Count ++)
    1244:	c0 17       	cp	r28, r16
    1246:	d1 07       	cpc	r29, r17
    1248:	d1 f7       	brne	.-12     	; 0x123e <LCD_DATA_STRING+0x1c>
	{
		LCD_DATA(pu8Data[u8Count]);
	}
}
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	1f 91       	pop	r17
    1250:	0f 91       	pop	r16
    1252:	08 95       	ret

00001254 <LCD_INIT>:

extern void LCD_INIT()
{
	Pin_mode(RW_PORT, RW_DDR , RW_PIN_NUMBER , OUTPUT);
    1254:	21 e0       	ldi	r18, 0x01	; 1
    1256:	42 e0       	ldi	r20, 0x02	; 2
    1258:	67 e3       	ldi	r22, 0x37	; 55
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	88 e3       	ldi	r24, 0x38	; 56
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(RS_PORT, RS_DDR , RS_PIN_NUMBER , OUTPUT);
    1264:	21 e0       	ldi	r18, 0x01	; 1
    1266:	41 e0       	ldi	r20, 0x01	; 1
    1268:	67 e3       	ldi	r22, 0x37	; 55
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	88 e3       	ldi	r24, 0x38	; 56
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(ENABLE_PORT, ENABLE_DDR , ENABLE_PIN_NUMBER , OUTPUT);
    1274:	21 e0       	ldi	r18, 0x01	; 1
    1276:	43 e0       	ldi	r20, 0x03	; 3
    1278:	67 e3       	ldi	r22, 0x37	; 55
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	88 e3       	ldi	r24, 0x38	; 56
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	
	Pin_mode(D4_PORT, D4_DDR , D4_PIN_NUMBER , OUTPUT);
    1284:	21 e0       	ldi	r18, 0x01	; 1
    1286:	44 e0       	ldi	r20, 0x04	; 4
    1288:	6a e3       	ldi	r22, 0x3A	; 58
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	8b e3       	ldi	r24, 0x3B	; 59
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(D5_PORT, D5_DDR , D5_PIN_NUMBER , OUTPUT);
    1294:	21 e0       	ldi	r18, 0x01	; 1
    1296:	45 e0       	ldi	r20, 0x05	; 5
    1298:	6a e3       	ldi	r22, 0x3A	; 58
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	8b e3       	ldi	r24, 0x3B	; 59
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(D6_PORT, D6_DDR , D6_PIN_NUMBER , OUTPUT);
    12a4:	21 e0       	ldi	r18, 0x01	; 1
    12a6:	46 e0       	ldi	r20, 0x06	; 6
    12a8:	6a e3       	ldi	r22, 0x3A	; 58
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	8b e3       	ldi	r24, 0x3B	; 59
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(D7_PORT, D7_DDR , D7_PIN_NUMBER , OUTPUT);
    12b4:	21 e0       	ldi	r18, 0x01	; 1
    12b6:	47 e0       	ldi	r20, 0x07	; 7
    12b8:	6a e3       	ldi	r22, 0x3A	; 58
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	8b e3       	ldi	r24, 0x3B	; 59
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	
	ENABLE_STATE(ENABLE_LOW);
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	0e 94 af 08 	call	0x115e	; 0x115e <ENABLE_STATE>
    12ca:	8f e6       	ldi	r24, 0x6F	; 111
    12cc:	97 e1       	ldi	r25, 0x17	; 23
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <LCD_INIT+0x7a>
    12d2:	00 c0       	rjmp	.+0      	; 0x12d4 <LCD_INIT+0x80>
    12d4:	00 00       	nop
	_delay_us(2000);
	
	LCD_COMMAND(INITIALIZE_COMMAND_1); 
    12d6:	83 e3       	ldi	r24, 0x33	; 51
    12d8:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
    12dc:	8b e2       	ldi	r24, 0x2B	; 43
    12de:	91 e0       	ldi	r25, 0x01	; 1
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <LCD_INIT+0x8c>
    12e4:	00 c0       	rjmp	.+0      	; 0x12e6 <LCD_INIT+0x92>
    12e6:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(INITIALIZE_COMMAND_2); 
    12e8:	82 e3       	ldi	r24, 0x32	; 50
    12ea:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
    12ee:	8b e2       	ldi	r24, 0x2B	; 43
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <LCD_INIT+0x9e>
    12f6:	00 c0       	rjmp	.+0      	; 0x12f8 <LCD_INIT+0xa4>
    12f8:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(BIT_MODE4); 
    12fa:	88 e2       	ldi	r24, 0x28	; 40
    12fc:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
    1300:	8b e2       	ldi	r24, 0x2B	; 43
    1302:	91 e0       	ldi	r25, 0x01	; 1
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <LCD_INIT+0xb0>
    1308:	00 c0       	rjmp	.+0      	; 0x130a <LCD_INIT+0xb6>
    130a:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(DISPLAY_ON_CURSOR_BLINKING); 
    130c:	8f e0       	ldi	r24, 0x0F	; 15
    130e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
    1312:	8b e2       	ldi	r24, 0x2B	; 43
    1314:	91 e0       	ldi	r25, 0x01	; 1
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	f1 f7       	brne	.-4      	; 0x1316 <LCD_INIT+0xc2>
    131a:	00 c0       	rjmp	.+0      	; 0x131c <LCD_INIT+0xc8>
    131c:	00 00       	nop
	_delay_us(100);
	LCD_COMMAND(CLEAR_DISPLAY); 
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
    1324:	8f e6       	ldi	r24, 0x6F	; 111
    1326:	97 e1       	ldi	r25, 0x17	; 23
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	f1 f7       	brne	.-4      	; 0x1328 <LCD_INIT+0xd4>
    132c:	00 c0       	rjmp	.+0      	; 0x132e <LCD_INIT+0xda>
    132e:	00 00       	nop
	_delay_us(2000);
	LCD_COMMAND(SHIFT_CURSOR_RIGHT); 
    1330:	86 e0       	ldi	r24, 0x06	; 6
    1332:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_COMMAND>
    1336:	8b e2       	ldi	r24, 0x2B	; 43
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	f1 f7       	brne	.-4      	; 0x133a <LCD_INIT+0xe6>
    133e:	00 c0       	rjmp	.+0      	; 0x1340 <LCD_INIT+0xec>
    1340:	00 00       	nop
    1342:	08 95       	ret

00001344 <LED_ON>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	31 f4       	brne	.+12     	; 0x1354 <LED_ON+0x10>
    1348:	65 e0       	ldi	r22, 0x05	; 5
    134a:	82 e3       	ldi	r24, 0x32	; 50
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 81 0a 	call	0x1502	; 0x1502 <Pin_set>
    1352:	08 95       	ret
    1354:	82 30       	cpi	r24, 0x02	; 2
    1356:	31 f4       	brne	.+12     	; 0x1364 <LED_ON+0x20>
    1358:	66 e0       	ldi	r22, 0x06	; 6
    135a:	82 e3       	ldi	r24, 0x32	; 50
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 81 0a 	call	0x1502	; 0x1502 <Pin_set>
    1362:	08 95       	ret
    1364:	83 30       	cpi	r24, 0x03	; 3
    1366:	29 f4       	brne	.+10     	; 0x1372 <LED_ON+0x2e>
    1368:	67 e0       	ldi	r22, 0x07	; 7
    136a:	82 e3       	ldi	r24, 0x32	; 50
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	0e 94 81 0a 	call	0x1502	; 0x1502 <Pin_set>
    1372:	08 95       	ret

00001374 <LED_OFF>:
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	31 f4       	brne	.+12     	; 0x1384 <LED_OFF+0x10>
    1378:	65 e0       	ldi	r22, 0x05	; 5
    137a:	82 e3       	ldi	r24, 0x32	; 50
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	0e 94 8d 0a 	call	0x151a	; 0x151a <Pin_reset>
    1382:	08 95       	ret
    1384:	82 30       	cpi	r24, 0x02	; 2
    1386:	31 f4       	brne	.+12     	; 0x1394 <LED_OFF+0x20>
    1388:	66 e0       	ldi	r22, 0x06	; 6
    138a:	82 e3       	ldi	r24, 0x32	; 50
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	0e 94 8d 0a 	call	0x151a	; 0x151a <Pin_reset>
    1392:	08 95       	ret
    1394:	83 30       	cpi	r24, 0x03	; 3
    1396:	29 f4       	brne	.+10     	; 0x13a2 <LED_OFF+0x2e>
    1398:	67 e0       	ldi	r22, 0x07	; 7
    139a:	82 e3       	ldi	r24, 0x32	; 50
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 8d 0a 	call	0x151a	; 0x151a <Pin_reset>
    13a2:	08 95       	ret

000013a4 <LEDS_FLASH>:
		
	}
}

extern void LEDS_FLASH()
{
    13a4:	cf 93       	push	r28
    13a6:	c5 e0       	ldi	r28, 0x05	; 5
	uint8_t u8Count = 0 ;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_LEDS_FLICKERS ; u8Count ++)
	{
		LED_ON(LED1);
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	0e 94 a2 09 	call	0x1344	; 0x1344 <LED_ON>
		LED_ON(LED2);
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	0e 94 a2 09 	call	0x1344	; 0x1344 <LED_ON>
		LED_ON(LED3);
    13b4:	83 e0       	ldi	r24, 0x03	; 3
    13b6:	0e 94 a2 09 	call	0x1344	; 0x1344 <LED_ON>
    13ba:	2f e7       	ldi	r18, 0x7F	; 127
    13bc:	8f e4       	ldi	r24, 0x4F	; 79
    13be:	92 e1       	ldi	r25, 0x12	; 18
    13c0:	21 50       	subi	r18, 0x01	; 1
    13c2:	80 40       	sbci	r24, 0x00	; 0
    13c4:	90 40       	sbci	r25, 0x00	; 0
    13c6:	e1 f7       	brne	.-8      	; 0x13c0 <LEDS_FLASH+0x1c>
    13c8:	00 c0       	rjmp	.+0      	; 0x13ca <LEDS_FLASH+0x26>
    13ca:	00 00       	nop
		_delay_ms(LEDS_FLASHING_PERIOD);
		LED_OFF(LED1);
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	0e 94 ba 09 	call	0x1374	; 0x1374 <LED_OFF>
		LED_OFF(LED2);
    13d2:	82 e0       	ldi	r24, 0x02	; 2
    13d4:	0e 94 ba 09 	call	0x1374	; 0x1374 <LED_OFF>
		LED_OFF(LED3);
    13d8:	83 e0       	ldi	r24, 0x03	; 3
    13da:	0e 94 ba 09 	call	0x1374	; 0x1374 <LED_OFF>
    13de:	2f e7       	ldi	r18, 0x7F	; 127
    13e0:	8f e4       	ldi	r24, 0x4F	; 79
    13e2:	92 e1       	ldi	r25, 0x12	; 18
    13e4:	21 50       	subi	r18, 0x01	; 1
    13e6:	80 40       	sbci	r24, 0x00	; 0
    13e8:	90 40       	sbci	r25, 0x00	; 0
    13ea:	e1 f7       	brne	.-8      	; 0x13e4 <LEDS_FLASH+0x40>
    13ec:	00 c0       	rjmp	.+0      	; 0x13ee <LEDS_FLASH+0x4a>
    13ee:	00 00       	nop
    13f0:	c1 50       	subi	r28, 0x01	; 1

extern void LEDS_FLASH()
{
	uint8_t u8Count = 0 ;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_LEDS_FLICKERS ; u8Count ++)
    13f2:	d1 f6       	brne	.-76     	; 0x13a8 <LEDS_FLASH+0x4>
		LED_OFF(LED1);
		LED_OFF(LED2);
		LED_OFF(LED3);
		_delay_ms(LEDS_FLASHING_PERIOD);	
	}
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <RELAY_ON>:

#include "RELAY_INTERFACE.h"

extern void RELAY_ON()
{
	Pin_set(RELAY_PORT , RELAY_PIN_NUMBER);
    13f8:	63 e0       	ldi	r22, 0x03	; 3
    13fa:	82 e3       	ldi	r24, 0x32	; 50
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 81 0a 	call	0x1502	; 0x1502 <Pin_set>
    1402:	08 95       	ret

00001404 <RELAY_OFF>:
}

extern void RELAY_OFF()
{
	Pin_reset(RELAY_PORT , RELAY_PIN_NUMBER);
    1404:	63 e0       	ldi	r22, 0x03	; 3
    1406:	82 e3       	ldi	r24, 0x32	; 50
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 8d 0a 	call	0x151a	; 0x151a <Pin_reset>
    140e:	08 95       	ret

00001410 <RELAY_FLICKER>:
}

extern void RELAY_FLICKER()
{
    1410:	cf 93       	push	r28
    1412:	c5 e0       	ldi	r28, 0x05	; 5
	uint8_t u8Count = 0;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_RELAY_FLICKERS ; u8Count ++)
	{
		RELAY_ON();
    1414:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <RELAY_ON>
    1418:	2f e7       	ldi	r18, 0x7F	; 127
    141a:	8f e4       	ldi	r24, 0x4F	; 79
    141c:	92 e1       	ldi	r25, 0x12	; 18
    141e:	21 50       	subi	r18, 0x01	; 1
    1420:	80 40       	sbci	r24, 0x00	; 0
    1422:	90 40       	sbci	r25, 0x00	; 0
    1424:	e1 f7       	brne	.-8      	; 0x141e <RELAY_FLICKER+0xe>
    1426:	00 c0       	rjmp	.+0      	; 0x1428 <RELAY_FLICKER+0x18>
    1428:	00 00       	nop
		_delay_ms(RELAY_FLICKERING_PERIOD);
		RELAY_OFF();
    142a:	0e 94 02 0a 	call	0x1404	; 0x1404 <RELAY_OFF>
    142e:	2f e7       	ldi	r18, 0x7F	; 127
    1430:	8f e4       	ldi	r24, 0x4F	; 79
    1432:	92 e1       	ldi	r25, 0x12	; 18
    1434:	21 50       	subi	r18, 0x01	; 1
    1436:	80 40       	sbci	r24, 0x00	; 0
    1438:	90 40       	sbci	r25, 0x00	; 0
    143a:	e1 f7       	brne	.-8      	; 0x1434 <RELAY_FLICKER+0x24>
    143c:	00 c0       	rjmp	.+0      	; 0x143e <RELAY_FLICKER+0x2e>
    143e:	00 00       	nop
    1440:	c1 50       	subi	r28, 0x01	; 1

extern void RELAY_FLICKER()
{
	uint8_t u8Count = 0;
	
	for (u8Count = 0 ; u8Count < NUMBER_OF_RELAY_FLICKERS ; u8Count ++)
    1442:	41 f7       	brne	.-48     	; 0x1414 <RELAY_FLICKER+0x4>
		_delay_ms(RELAY_FLICKERING_PERIOD);
		RELAY_OFF();
		_delay_ms(RELAY_FLICKERING_PERIOD);
	}
	
    1444:	cf 91       	pop	r28
    1446:	08 95       	ret

00001448 <main>:
int main(void)
{	
	// OUTPUTS
	
		// LEDS
	Pin_mode(LED1_PORT , LED1_DDR , LED1_PIN_NUMBER , OUTPUT);
    1448:	21 e0       	ldi	r18, 0x01	; 1
    144a:	45 e0       	ldi	r20, 0x05	; 5
    144c:	61 e3       	ldi	r22, 0x31	; 49
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	82 e3       	ldi	r24, 0x32	; 50
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(LED2_PORT , LED2_DDR , LED2_PIN_NUMBER , OUTPUT);
    1458:	21 e0       	ldi	r18, 0x01	; 1
    145a:	46 e0       	ldi	r20, 0x06	; 6
    145c:	61 e3       	ldi	r22, 0x31	; 49
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	82 e3       	ldi	r24, 0x32	; 50
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(LED3_PORT , LED3_DDR , LED3_PIN_NUMBER , OUTPUT);
    1468:	21 e0       	ldi	r18, 0x01	; 1
    146a:	47 e0       	ldi	r20, 0x07	; 7
    146c:	61 e3       	ldi	r22, 0x31	; 49
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	82 e3       	ldi	r24, 0x32	; 50
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
		
		//BUZZER
	Pin_mode(BUZZER_PORT , BUZZER_DDR , BUZZER_PIN_NUMBER , OUTPUT);
    1478:	21 e0       	ldi	r18, 0x01	; 1
    147a:	44 e0       	ldi	r20, 0x04	; 4
    147c:	61 e3       	ldi	r22, 0x31	; 49
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	82 e3       	ldi	r24, 0x32	; 50
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
		
		//RELAY
	Pin_mode(RELAY_PORT , RELAY_DDR , RELAY_PIN_NUMBER , OUTPUT);
    1488:	21 e0       	ldi	r18, 0x01	; 1
    148a:	43 e0       	ldi	r20, 0x03	; 3
    148c:	61 e3       	ldi	r22, 0x31	; 49
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	82 e3       	ldi	r24, 0x32	; 50
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(SEGMENT_D_PORT , SEGMENT_D_DDR , SEGMENT_D_PIN_NUMBER , OUTPUT);
	*/
	// INPUTS

		// BUTTONS
	Pin_mode(BUTTON0_PORT , BUTTON0_DDR , BUTTON0_PIN_NUMBER , INPUT);
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	61 e3       	ldi	r22, 0x31	; 49
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	82 e3       	ldi	r24, 0x32	; 50
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(BUTTON1_PORT , BUTTON1_DDR , BUTTON1_PIN_NUMBER , INPUT);
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	41 e0       	ldi	r20, 0x01	; 1
    14ac:	61 e3       	ldi	r22, 0x31	; 49
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	82 e3       	ldi	r24, 0x32	; 50
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>
	Pin_mode(BUTTON2_PORT , BUTTON2_DDR , BUTTON2_PIN_NUMBER , INPUT);
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	42 e0       	ldi	r20, 0x02	; 2
    14bc:	61 e3       	ldi	r22, 0x31	; 49
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	82 e3       	ldi	r24, 0x32	; 50
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Pin_mode>

	// Setting initial states
	
	LED_OFF(LED1);
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	0e 94 ba 09 	call	0x1374	; 0x1374 <LED_OFF>
	LED_OFF(LED2);
    14ce:	82 e0       	ldi	r24, 0x02	; 2
    14d0:	0e 94 ba 09 	call	0x1374	; 0x1374 <LED_OFF>
	LED_OFF(LED3);
    14d4:	83 e0       	ldi	r24, 0x03	; 3
    14d6:	0e 94 ba 09 	call	0x1374	; 0x1374 <LED_OFF>
	BUZZER_OFF();
    14da:	0e 94 af 05 	call	0xb5e	; 0xb5e <BUZZER_OFF>
	RELAY_OFF();
    14de:	0e 94 02 0a 	call	0x1404	; 0x1404 <RELAY_OFF>
	/*SEGMENT_RESET();*/
	LCD_INIT();
    14e2:	0e 94 2a 09 	call	0x1254	; 0x1254 <LCD_INIT>
		
	
	while (1)
	{
		
		if (gu8ID_right != 0 && gu8Password_right != 0)
    14e6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <gu8ID_right>
    14ea:	88 23       	and	r24, r24
    14ec:	39 f0       	breq	.+14     	; 0x14fc <main+0xb4>
    14ee:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <gu8Password_right>
    14f2:	88 23       	and	r24, r24
    14f4:	19 f0       	breq	.+6      	; 0x14fc <main+0xb4>
		{
			LCD_TEST();
    14f6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_TEST>
    14fa:	f5 cf       	rjmp	.-22     	; 0x14e6 <main+0x9e>
		} 
		else
		{
			KEYPAD_WITH_LCD();
    14fc:	0e 94 cd 01 	call	0x39a	; 0x39a <KEYPAD_WITH_LCD>
    1500:	f2 cf       	rjmp	.-28     	; 0x14e6 <main+0x9e>

00001502 <Pin_set>:
	(*(volatile uint8_t *) (PORT_address)) &= ~(1<<Pin_index);
}

extern void Pin_toggle( unsigned int PORT_address , uint8_t Pin_index)
{
	(*(volatile uint8_t *) (PORT_address)) ^= (1<<Pin_index);
    1502:	fc 01       	movw	r30, r24
    1504:	40 81       	ld	r20, Z
    1506:	21 e0       	ldi	r18, 0x01	; 1
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <Pin_set+0xe>
    150c:	22 0f       	add	r18, r18
    150e:	33 1f       	adc	r19, r19
    1510:	6a 95       	dec	r22
    1512:	e2 f7       	brpl	.-8      	; 0x150c <Pin_set+0xa>
    1514:	24 2b       	or	r18, r20
    1516:	20 83       	st	Z, r18
    1518:	08 95       	ret

0000151a <Pin_reset>:
    151a:	fc 01       	movw	r30, r24
    151c:	90 81       	ld	r25, Z
    151e:	21 e0       	ldi	r18, 0x01	; 1
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <Pin_reset+0xe>
    1524:	22 0f       	add	r18, r18
    1526:	33 1f       	adc	r19, r19
    1528:	6a 95       	dec	r22
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <Pin_reset+0xa>
    152c:	20 95       	com	r18
    152e:	29 23       	and	r18, r25
    1530:	20 83       	st	Z, r18
    1532:	08 95       	ret

00001534 <Pin_mode>:
}

extern void Pin_mode(unsigned int PORT_address , unsigned int DDR_address , uint8_t Pin_index , uint8_t Pin_state)
{
	if (Pin_state == INPUT)
    1534:	21 11       	cpse	r18, r1
    1536:	12 c0       	rjmp	.+36     	; 0x155c <Pin_mode+0x28>
	{
		(*(volatile uint8_t *)(DDR_address)) &= ~(1<<Pin_index) ;
    1538:	fb 01       	movw	r30, r22
    153a:	50 81       	ld	r21, Z
    153c:	21 e0       	ldi	r18, 0x01	; 1
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <Pin_mode+0x12>
    1542:	22 0f       	add	r18, r18
    1544:	33 1f       	adc	r19, r19
    1546:	4a 95       	dec	r20
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <Pin_mode+0xe>
    154a:	32 2f       	mov	r19, r18
    154c:	30 95       	com	r19
    154e:	35 23       	and	r19, r21
    1550:	30 83       	st	Z, r19
		(*(volatile uint8_t *)(PORT_address)) |= (1<<Pin_index); // To activate the pull up resistor
    1552:	fc 01       	movw	r30, r24
    1554:	30 81       	ld	r19, Z
    1556:	23 2b       	or	r18, r19
    1558:	20 83       	st	Z, r18
    155a:	08 95       	ret
	}
	else if (Pin_state == OUTPUT)
    155c:	21 30       	cpi	r18, 0x01	; 1
    155e:	59 f4       	brne	.+22     	; 0x1576 <Pin_mode+0x42>
	{
		(*(volatile uint8_t *)(DDR_address )) |= (1<<Pin_index) ;
    1560:	fb 01       	movw	r30, r22
    1562:	20 81       	ld	r18, Z
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 c0       	rjmp	.+4      	; 0x156e <Pin_mode+0x3a>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	4a 95       	dec	r20
    1570:	e2 f7       	brpl	.-8      	; 0x156a <Pin_mode+0x36>
    1572:	82 2b       	or	r24, r18
    1574:	80 83       	st	Z, r24
    1576:	08 95       	ret

00001578 <Pin_read>:

extern void Pin_read(unsigned int PIN_address , uint8_t u8Pin_index , volatile uint8_t *pu8PORT_reading)
{
	uint8_t u8Temp = 0;
	
	u8Temp = (*(volatile uint8_t *)(PIN_address)) & (1 << u8Pin_index) ;
    1578:	fc 01       	movw	r30, r24
    157a:	20 81       	ld	r18, Z
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <Pin_read+0xe>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	6a 95       	dec	r22
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <Pin_read+0xa>
    158a:	82 23       	and	r24, r18
	
	*pu8PORT_reading = u8Temp ;
    158c:	fa 01       	movw	r30, r20
    158e:	80 83       	st	Z, r24
    1590:	08 95       	ret

00001592 <__vector_11>:
{
	TCIMSK |= (1 << TOIE0);
}

ISR(TIMER0_OVF_vect)
{
    1592:	1f 92       	push	r1
    1594:	0f 92       	push	r0
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	0f 92       	push	r0
    159a:	11 24       	eor	r1, r1
    159c:	8f 93       	push	r24
	gu8Flag ++ ;
    159e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <gu8Flag>
    15a2:	8f 5f       	subi	r24, 0xFF	; 255
    15a4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <gu8Flag>
    15a8:	8f 91       	pop	r24
    15aa:	0f 90       	pop	r0
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	0f 90       	pop	r0
    15b0:	1f 90       	pop	r1
    15b2:	18 95       	reti

000015b4 <_exit>:
    15b4:	f8 94       	cli

000015b6 <__stop_program>:
    15b6:	ff cf       	rjmp	.-2      	; 0x15b6 <__stop_program>
