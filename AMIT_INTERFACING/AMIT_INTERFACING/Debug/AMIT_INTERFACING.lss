
AMIT_INTERFACING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ef  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000655  00000000  00000000  00000b97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032f  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  0000151c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000132  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001a92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include "PORT_DIO.h"


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	unsigned int uiReading = 0;
  76:	1a 82       	std	Y+2, r1	; 0x02
  78:	19 82       	std	Y+1, r1	; 0x01
	
	DIO_Pin_in(DDRD ,0);
  7a:	60 e0       	ldi	r22, 0x00	; 0
  7c:	70 e0       	ldi	r23, 0x00	; 0
  7e:	81 e3       	ldi	r24, 0x31	; 49
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_Pin_in>
	DIO_Pin_out(DDRD , 5);
  86:	65 e0       	ldi	r22, 0x05	; 5
  88:	70 e0       	ldi	r23, 0x00	; 0
  8a:	81 e3       	ldi	r24, 0x31	; 49
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 7c 00 	call	0xf8	; 0xf8 <DIO_Pin_out>
		
    while (1) 
    {
		DIO_Pin_read(PIND , 0 , &uiReading);
  92:	ae 01       	movw	r20, r28
  94:	4f 5f       	subi	r20, 0xFF	; 255
  96:	5f 4f       	sbci	r21, 0xFF	; 255
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	80 e3       	ldi	r24, 0x30	; 48
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 a3 00 	call	0x146	; 0x146 <DIO_Pin_read>
		
			if (uiReading != 0)
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	9a 81       	ldd	r25, Y+2	; 0x02
  a8:	89 2b       	or	r24, r25
  aa:	99 f3       	breq	.-26     	; 0x92 <main+0x26>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	89 ef       	ldi	r24, 0xF9	; 249
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x46>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x50>
  bc:	00 00       	nop
			{	
				_delay_ms(20);
				DIO_Pin_read(PIND , 0 , &uiReading);
  be:	ae 01       	movw	r20, r28
  c0:	4f 5f       	subi	r20, 0xFF	; 255
  c2:	5f 4f       	sbci	r21, 0xFF	; 255
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	80 e3       	ldi	r24, 0x30	; 48
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 a3 00 	call	0x146	; 0x146 <DIO_Pin_read>
				
				if (uiReading != 0)
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	9a 81       	ldd	r25, Y+2	; 0x02
  d4:	89 2b       	or	r24, r25
  d6:	e9 f2       	breq	.-70     	; 0x92 <main+0x26>
				{
					DIO_Pin_toggle(PORTD , 5 );
  d8:	65 e0       	ldi	r22, 0x05	; 5
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	82 e3       	ldi	r24, 0x32	; 50
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_Pin_toggle>
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	81 ee       	ldi	r24, 0xE1	; 225
  e8:	94 e0       	ldi	r25, 0x04	; 4
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x7e>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x88>
  f4:	00 00       	nop
  f6:	cd cf       	rjmp	.-102    	; 0x92 <main+0x26>

000000f8 <DIO_Pin_out>:
	{
		UTIL_CLEAR_PIN(uPort_address , uPin_number);	
	}
	else
	{
		UTIL_SET_PIN(uPort_address , uPin_number);
  f8:	fc 01       	movw	r30, r24
  fa:	40 81       	ld	r20, Z
  fc:	51 81       	ldd	r21, Z+1	; 0x01
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_Pin_out+0x10>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_Pin_out+0xc>
 10c:	24 2b       	or	r18, r20
 10e:	35 2b       	or	r19, r21
 110:	31 83       	std	Z+1, r19	; 0x01
 112:	20 83       	st	Z, r18
 114:	08 95       	ret

00000116 <DIO_Pin_in>:
 116:	fc 01       	movw	r30, r24
 118:	20 81       	ld	r18, Z
 11a:	31 81       	ldd	r19, Z+1	; 0x01
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_Pin_in+0x10>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_Pin_in+0xc>
 12a:	ac 01       	movw	r20, r24
 12c:	40 95       	com	r20
 12e:	50 95       	com	r21
 130:	24 23       	and	r18, r20
 132:	35 23       	and	r19, r21
 134:	31 83       	std	Z+1, r19	; 0x01
 136:	20 83       	st	Z, r18
 138:	21 81       	ldd	r18, Z+1	; 0x01
 13a:	32 81       	ldd	r19, Z+2	; 0x02
 13c:	82 2b       	or	r24, r18
 13e:	93 2b       	or	r25, r19
 140:	92 83       	std	Z+2, r25	; 0x02
 142:	81 83       	std	Z+1, r24	; 0x01
 144:	08 95       	ret

00000146 <DIO_Pin_read>:
 146:	fc 01       	movw	r30, r24
 148:	20 81       	ld	r18, Z
 14a:	31 81       	ldd	r19, Z+1	; 0x01
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_Pin_read+0x10>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_Pin_read+0xc>
 15a:	82 23       	and	r24, r18
 15c:	93 23       	and	r25, r19
 15e:	fa 01       	movw	r30, r20
 160:	91 83       	std	Z+1, r25	; 0x01
 162:	80 83       	st	Z, r24
 164:	08 95       	ret

00000166 <DIO_Pin_toggle>:
	}
}

extern void DIO_Pin_toggle(unsigned int uPort_address , unsigned int uPin_number )
{
	UTIL_TOGGLE_PIN(uPort_address , uPin_number);
 166:	fc 01       	movw	r30, r24
 168:	40 81       	ld	r20, Z
 16a:	51 81       	ldd	r21, Z+1	; 0x01
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Pin_toggle+0x10>
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Pin_toggle+0xc>
 17a:	24 27       	eor	r18, r20
 17c:	35 27       	eor	r19, r21
 17e:	31 83       	std	Z+1, r19	; 0x01
 180:	20 83       	st	Z, r18
 182:	08 95       	ret

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
