
AMIT_INTERFACING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000242  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000002b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c00  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b2  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000420  00000000  00000000  0000168e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c9  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000239  00000000  00000000  00001f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000021c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Led_ON>:

#include "Amit_Led.h"

extern void Led_ON(unsigned int ledNum)
{
	switch (ledNum)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	91 05       	cpc	r25, r1
  80:	99 f0       	breq	.+38     	; 0xa8 <Led_ON+0x2c>
  82:	18 f0       	brcs	.+6      	; 0x8a <Led_ON+0xe>
  84:	02 97       	sbiw	r24, 0x02	; 2
  86:	f9 f0       	breq	.+62     	; 0xc6 <Led_ON+0x4a>
  88:	08 95       	ret
	{
		default:
		break;
		case(AMIT_LEDNUM_0):
		DIO_pinOUT(AMIT_DDR_LED0 , AMIT_PIN_LED0);
  8a:	65 e0       	ldi	r22, 0x05	; 5
  8c:	70 e0       	ldi	r23, 0x00	; 0
  8e:	81 e3       	ldi	r24, 0x31	; 49
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_pinOUT>
		DIO_pinWRITE(AMIT_PORT_LED0 , AMIT_PIN_LED0 , LEDON);
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	65 e0       	ldi	r22, 0x05	; 5
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	82 e3       	ldi	r24, 0x32	; 50
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_pinWRITE>
		break;
  a6:	08 95       	ret
		case(AMIT_LEDNUM_1):
		DIO_pinOUT(AMIT_DDR_LED1 , AMIT_PIN_LED1);
  a8:	66 e0       	ldi	r22, 0x06	; 6
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	81 e3       	ldi	r24, 0x31	; 49
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_pinOUT>
		DIO_pinWRITE(AMIT_PORT_LED1 , AMIT_PIN_LED1 , LEDON);
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	66 e0       	ldi	r22, 0x06	; 6
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	82 e3       	ldi	r24, 0x32	; 50
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_pinWRITE>
		break;
  c4:	08 95       	ret
		case(AMIT_LEDNUM_2):
		DIO_pinOUT(AMIT_DDR_LED1 , AMIT_PIN_LED0);
  c6:	65 e0       	ldi	r22, 0x05	; 5
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	81 e3       	ldi	r24, 0x31	; 49
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_pinOUT>
		DIO_pinWRITE(AMIT_PORT_LED1 , AMIT_PIN_LED1 , LEDON);
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	66 e0       	ldi	r22, 0x06	; 6
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	82 e3       	ldi	r24, 0x32	; 50
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_pinWRITE>
  e2:	08 95       	ret

000000e4 <Led_OFF>:
	}
}

extern void Led_OFF(unsigned int ledNum)
{
	switch (ledNum)
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	91 05       	cpc	r25, r1
  e8:	99 f0       	breq	.+38     	; 0x110 <Led_OFF+0x2c>
  ea:	18 f0       	brcs	.+6      	; 0xf2 <Led_OFF+0xe>
  ec:	02 97       	sbiw	r24, 0x02	; 2
  ee:	f9 f0       	breq	.+62     	; 0x12e <Led_OFF+0x4a>
  f0:	08 95       	ret
	{
		default:
		break;
		case(AMIT_LEDNUM_0):
		DIO_pinOUT(AMIT_DDR_LED0 , AMIT_PIN_LED0);
  f2:	65 e0       	ldi	r22, 0x05	; 5
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	81 e3       	ldi	r24, 0x31	; 49
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_pinOUT>
		DIO_pinWRITE(AMIT_PORT_LED0 , AMIT_PIN_LED0 , LEDOFF);
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	65 e0       	ldi	r22, 0x05	; 5
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	82 e3       	ldi	r24, 0x32	; 50
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_pinWRITE>
		break;
 10e:	08 95       	ret
		case(AMIT_LEDNUM_1):
		DIO_pinOUT(AMIT_DDR_LED1 , AMIT_PIN_LED1);
 110:	66 e0       	ldi	r22, 0x06	; 6
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	81 e3       	ldi	r24, 0x31	; 49
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_pinOUT>
		DIO_pinWRITE(AMIT_PORT_LED1 , AMIT_PIN_LED1 , LEDOFF);
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	66 e0       	ldi	r22, 0x06	; 6
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	82 e3       	ldi	r24, 0x32	; 50
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_pinWRITE>
		break;
 12c:	08 95       	ret
		case(AMIT_LEDNUM_2):
		DIO_pinOUT(AMIT_DDR_LED1 , AMIT_PIN_LED0);
 12e:	65 e0       	ldi	r22, 0x05	; 5
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	81 e3       	ldi	r24, 0x31	; 49
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_pinOUT>
		DIO_pinWRITE(AMIT_PORT_LED1 , AMIT_PIN_LED1 , LEDOFF);
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	66 e0       	ldi	r22, 0x06	; 6
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_pinWRITE>
 14a:	08 95       	ret

0000014c <main>:
{  

    /* Replace with your application code */
    while (1) 
{	
Led_ON(AMIT_LEDNUM_0);
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 3e 00 	call	0x7c	; 0x7c <Led_ON>
T0_Delay_ms(500);
 154:	84 ef       	ldi	r24, 0xF4	; 244
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <T0_Delay_ms>
Led_OFF(AMIT_LEDNUM_0);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 72 00 	call	0xe4	; 0xe4 <Led_OFF>
T0_Delay_ms(500);
 164:	84 ef       	ldi	r24, 0xF4	; 244
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <T0_Delay_ms>
 16c:	ef cf       	rjmp	.-34     	; 0x14c <main>

0000016e <DIO_pinOUT>:
UTIL_SETPIN(port_address,pin_number);
}
extern void DIO_pinIN(unsigned int port_address, unsigned int pin_number)
{
 UTIL_CLEARPIN(port_address,pin_number);
 UTIL_SETPIN(port_address + 1,pin_number); //Activate pull up resistor of this pin (port address + 1 is the address of the specified port based in the address of the DDRx sent)
 16e:	fc 01       	movw	r30, r24
 170:	40 81       	ld	r20, Z
 172:	51 81       	ldd	r21, Z+1	; 0x01
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_pinOUT+0x10>
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_pinOUT+0xc>
 182:	24 2b       	or	r18, r20
 184:	35 2b       	or	r19, r21
 186:	31 83       	std	Z+1, r19	; 0x01
 188:	20 83       	st	Z, r18
 18a:	08 95       	ret

0000018c <DIO_pinWRITE>:

}
extern void DIO_pinWRITE(unsigned int port_address, unsigned int pin_number, unsigned int value)
{
 if(value == 0)
 18c:	45 2b       	or	r20, r21
 18e:	89 f4       	brne	.+34     	; 0x1b2 <DIO_pinWRITE+0x26>
 {
   UTIL_CLEARPIN(port_address, pin_number);
 190:	fc 01       	movw	r30, r24
 192:	40 81       	ld	r20, Z
 194:	51 81       	ldd	r21, Z+1	; 0x01
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_pinWRITE+0x14>
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_pinWRITE+0x10>
 1a4:	20 95       	com	r18
 1a6:	30 95       	com	r19
 1a8:	24 23       	and	r18, r20
 1aa:	35 23       	and	r19, r21
 1ac:	31 83       	std	Z+1, r19	; 0x01
 1ae:	20 83       	st	Z, r18
 1b0:	08 95       	ret
 }
 else
 {
   UTIL_SETPIN(port_address, pin_number);
 1b2:	fc 01       	movw	r30, r24
 1b4:	40 81       	ld	r20, Z
 1b6:	51 81       	ldd	r21, Z+1	; 0x01
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_pinWRITE+0x36>
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_pinWRITE+0x32>
 1c6:	24 2b       	or	r18, r20
 1c8:	35 2b       	or	r19, r21
 1ca:	31 83       	std	Z+1, r19	; 0x01
 1cc:	20 83       	st	Z, r18
 1ce:	08 95       	ret

000001d0 <T0_Delay_ms>:

static void T0_INIT(void);
volatile static unsigned char gu8_msFlag = 0; 

extern void T0_Delay_ms(unsigned int i32_delay)
{   
 1d0:	9c 01       	movw	r18, r24
	}
	
}

static void T0_INIT(void)
{   gu8_msFlag = 0;
 1d2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	T0_CR = 0x03;
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	94 bf       	out	0x34, r25	; 52
 1dc:	83 bf       	out	0x33, r24	; 51
    T0_CNT = 0x06;
 1de:	86 e0       	ldi	r24, 0x06	; 6
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	93 bf       	out	0x33, r25	; 51
 1e4:	82 bf       	out	0x32, r24	; 50
	T0_INTMSK |= (1<<(TOIE0));
 1e6:	89 b7       	in	r24, 0x39	; 57
 1e8:	9a b7       	in	r25, 0x3a	; 58
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	9a bf       	out	0x3a, r25	; 58
 1ee:	89 bf       	out	0x39, r24	; 57
	
	sei();
 1f0:	78 94       	sei

extern void T0_Delay_ms(unsigned int i32_delay)
{   
	T0_INIT();
	
	while (i32_delay != 0)
 1f2:	21 15       	cp	r18, r1
 1f4:	31 05       	cpc	r19, r1
 1f6:	59 f0       	breq	.+22     	; 0x20e <T0_Delay_ms+0x3e>
	{   
		
		while (gu8_msFlag == 0);
 1f8:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
 1fc:	99 23       	and	r25, r25
 1fe:	e1 f3       	breq	.-8      	; 0x1f8 <T0_Delay_ms+0x28>
			i32_delay--;
 200:	21 50       	subi	r18, 0x01	; 1
 202:	31 09       	sbc	r19, r1
			gu8_msFlag = 0;
 204:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>

extern void T0_Delay_ms(unsigned int i32_delay)
{   
	T0_INIT();
	
	while (i32_delay != 0)
 208:	21 15       	cp	r18, r1
 20a:	31 05       	cpc	r19, r1
 20c:	a9 f7       	brne	.-22     	; 0x1f8 <T0_Delay_ms+0x28>
 20e:	08 95       	ret

00000210 <__vector_11>:
	sei();

}

ISR(TIMER0_OVF_vect)
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
	gu8_msFlag++;
 21e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 222:	8f 5f       	subi	r24, 0xFF	; 255
 224:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	T0_CNT = 0x06;
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	93 bf       	out	0x33, r25	; 51
 22e:	82 bf       	out	0x32, r24	; 50
	
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
