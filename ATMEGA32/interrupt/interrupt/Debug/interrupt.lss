
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067a  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a5  00000000  00000000  0000084a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000291  00000000  00000000  00000def  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001080  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032f  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d9  00000000  00000000  000013f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main(void)
{
    GICR|=(1<<INT0);
  6c:	8b b7       	in	r24, 0x3b	; 59
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	8b bf       	out	0x3b, r24	; 59
	MCUCR&=~(1<<ISC00);
  72:	85 b7       	in	r24, 0x35	; 53
  74:	8e 7f       	andi	r24, 0xFE	; 254
  76:	85 bf       	out	0x35, r24	; 53
	MCUCR|=(1<<ISC01);
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	82 60       	ori	r24, 0x02	; 2
  7c:	85 bf       	out	0x35, r24	; 53
	DDRD|=(1<<5);
  7e:	8d 9a       	sbi	0x11, 5	; 17
	DDRD&=~(1<<0);
  80:	88 98       	cbi	0x11, 0	; 17
	DDRD|=(1<<6)|(1<<7);
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 6c       	ori	r24, 0xC0	; 192
  86:	81 bb       	out	0x11, r24	; 17
	sei();
  88:	78 94       	sei

    while (1) 
    {
		PORTD|=(1<<6)|(1<<7);
  8a:	82 b3       	in	r24, 0x12	; 18
  8c:	80 6c       	ori	r24, 0xC0	; 192
  8e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f e5       	ldi	r18, 0x5F	; 95
  92:	8a ee       	ldi	r24, 0xEA	; 234
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x2a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x34>
  a0:	00 00       	nop
  a2:	f3 cf       	rjmp	.-26     	; 0x8a <main+0x1e>

000000a4 <__vector_1>:
		_delay_ms(300);
    }
}

ISR(INT0_vect){
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
	PORTD|=(1<<5);
  b2:	95 9a       	sbi	0x12, 5	; 18
  b4:	8f e4       	ldi	r24, 0x4F	; 79
  b6:	93 ec       	ldi	r25, 0xC3	; 195
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <__vector_1+0x14>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <__vector_1+0x1a>
  be:	00 00       	nop
	_delay_ms(200);
	PORTD^=(1<<6)^(1<<7);
  c0:	92 b3       	in	r25, 0x12	; 18
  c2:	80 ec       	ldi	r24, 0xC0	; 192
  c4:	89 27       	eor	r24, r25
  c6:	82 bb       	out	0x12, r24	; 18
  c8:	8f e4       	ldi	r24, 0x4F	; 79
  ca:	93 ec       	ldi	r25, 0xC3	; 195
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <__vector_1+0x28>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <__vector_1+0x2e>
  d2:	00 00       	nop
		_delay_ms(200);

}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
