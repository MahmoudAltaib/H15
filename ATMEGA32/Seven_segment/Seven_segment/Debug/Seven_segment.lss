
Seven_segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000065a  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059a  00000000  00000000  0000082e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c7  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000342  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000013f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
    PORTD|=(1<<0);
  6c:	90 9a       	sbi	0x12, 0	; 18
    PORTD|=(1<<1);
  6e:	91 9a       	sbi	0x12, 1	; 18
    
    DDRD&=~(1<<0);
  70:	88 98       	cbi	0x11, 0	; 17
    DDRD&=~(1<<1);
  72:	89 98       	cbi	0x11, 1	; 17
	PORTC&=~(1<<3);
  74:	ab 98       	cbi	0x15, 3	; 21
	PORTC&=~(1<<2);
  76:	aa 98       	cbi	0x15, 2	; 21
	DDRC|=(1<<3);
  78:	a3 9a       	sbi	0x14, 3	; 20
	DDRC|=(1<<2);
  7a:	a2 9a       	sbi	0x14, 2	; 20
    {
		int pin6_value;
		int pin7_value;
		int i;
		pin6_value= (( PIND ) & 1);
		if ( pin6_value == 1 )
  7c:	80 9b       	sbis	0x10, 0	; 16
  7e:	1a c0       	rjmp	.+52     	; 0xb4 <main+0x48>
		{
			i++;
  80:	01 96       	adiw	r24, 0x01	; 1
			PORTC&=~(1<<4);   //
  82:	ac 98       	cbi	0x15, 4	; 21
			PORTC&=~(1<<5);
  84:	ad 98       	cbi	0x15, 5	; 21
			PORTC&=~(1<<6);
  86:	ae 98       	cbi	0x15, 6	; 21
			PORTC&=~(1<<7);
  88:	af 98       	cbi	0x15, 7	; 21
			PORTC|=(i<<4);     //
  8a:	45 b3       	in	r20, 0x15	; 21
  8c:	9c 01       	movw	r18, r24
  8e:	22 95       	swap	r18
  90:	32 95       	swap	r19
  92:	30 7f       	andi	r19, 0xF0	; 240
  94:	32 27       	eor	r19, r18
  96:	20 7f       	andi	r18, 0xF0	; 240
  98:	32 27       	eor	r19, r18
  9a:	24 2b       	or	r18, r20
  9c:	25 bb       	out	0x15, r18	; 21
			
			PORTC|=(1<<3);
  9e:	ab 9a       	sbi	0x15, 3	; 21
			PORTC|=(1<<2);
  a0:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	35 ea       	ldi	r19, 0xA5	; 165
  a6:	4e e0       	ldi	r20, 0x0E	; 14
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	30 40       	sbci	r19, 0x00	; 0
  ac:	40 40       	sbci	r20, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x3c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x46>
  b2:	00 00       	nop
			_delay_ms(300);
			
		}
		pin7_value=((PIND>>1) & 1);
		if (pin7_value == 1)
  b4:	81 9b       	sbis	0x10, 1	; 16
  b6:	e2 cf       	rjmp	.-60     	; 0x7c <main+0x10>
		{    
				i--;
  b8:	01 97       	sbiw	r24, 0x01	; 1
			PORTC&=~(1<<4);  //
  ba:	ac 98       	cbi	0x15, 4	; 21
			PORTC&=~(1<<5);
  bc:	ad 98       	cbi	0x15, 5	; 21
			PORTC&=~(1<<6);
  be:	ae 98       	cbi	0x15, 6	; 21
			PORTC&=~(1<<7);
  c0:	af 98       	cbi	0x15, 7	; 21
			PORTC|=(i<<4);   //
  c2:	45 b3       	in	r20, 0x15	; 21
  c4:	9c 01       	movw	r18, r24
  c6:	22 95       	swap	r18
  c8:	32 95       	swap	r19
  ca:	30 7f       	andi	r19, 0xF0	; 240
  cc:	32 27       	eor	r19, r18
  ce:	20 7f       	andi	r18, 0xF0	; 240
  d0:	32 27       	eor	r19, r18
  d2:	24 2b       	or	r18, r20
  d4:	25 bb       	out	0x15, r18	; 21
			
			PORTC|=(1<<3);
  d6:	ab 9a       	sbi	0x15, 3	; 21
			PORTC|=(1<<2);
  d8:	aa 9a       	sbi	0x15, 2	; 21
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	35 ea       	ldi	r19, 0xA5	; 165
  de:	4e e0       	ldi	r20, 0x0E	; 14
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	30 40       	sbci	r19, 0x00	; 0
  e4:	40 40       	sbci	r20, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x74>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x7e>
  ea:	00 00       	nop
  ec:	c7 cf       	rjmp	.-114    	; 0x7c <main+0x10>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
