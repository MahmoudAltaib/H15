
interrupt2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000015e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000596  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000520  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000220  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ec  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001249  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:



int main(void)
{
	GICR=(1<<INT0);
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	8b bf       	out	0x3b, r24	; 59
	MCUCR=(1<<ISC00)|(1<<ISC01);
  80:	83 e0       	ldi	r24, 0x03	; 3
  82:	85 bf       	out	0x35, r24	; 53

	//MCUCR|=(1<<ISC01);
	DDRD|=(1<<5)|(1<<6)|(1<<7);
  84:	81 b3       	in	r24, 0x11	; 17
  86:	80 6e       	ori	r24, 0xE0	; 224
  88:	81 bb       	out	0x11, r24	; 17
	DDRD&=~(1<<2);
  8a:	8a 98       	cbi	0x11, 2	; 17
	PORTD|=(1<<6)|(1<<7);
  8c:	82 b3       	in	r24, 0x12	; 18
  8e:	80 6c       	ori	r24, 0xC0	; 192
  90:	82 bb       	out	0x12, r24	; 18
	
	sei();
  92:	78 94       	sei
  94:	ff cf       	rjmp	.-2      	; 0x94 <main+0x18>

00000096 <__vector_1>:
    {
    }
}

ISR(INT0_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	static int led_0=0;
	//_delay_ms(500);
	if(led_0==0)
  a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  ac:	00 97       	sbiw	r24, 0x00	; 0
  ae:	51 f4       	brne	.+20     	; 0xc4 <__vector_1+0x2e>
	{
		PORTD&=~(1<<6);
  b0:	96 98       	cbi	0x12, 6	; 18
		PORTD&=~(1<<7);
  b2:	97 98       	cbi	0x12, 7	; 18
		PORTD|=(1<<5);
  b4:	95 9a       	sbi	0x12, 5	; 18
		led_0=1;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  c2:	0a c0       	rjmp	.+20     	; 0xd8 <__vector_1+0x42>
	}
	else if(led_0==1)
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	41 f4       	brne	.+16     	; 0xd8 <__vector_1+0x42>
	{
		PORTD|=(1<<6)|(1<<7);
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	80 6c       	ori	r24, 0xC0	; 192
  cc:	82 bb       	out	0x12, r24	; 18
		PORTD&=~(1<<5);
  ce:	95 98       	cbi	0x12, 5	; 18
		led_0=0;
  d0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  d4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		
	}
}
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
