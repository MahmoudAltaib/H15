
try.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007da  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000641  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036a  00000000  00000000  00001063  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036e  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d7  00000000  00000000  000017a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 76 00 	call	0xec	; 0xec <main>
  64:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Pin_mode>:

#include "functions.h"

extern uint8_t Pin_mode(uint8_t u8Port_index , uint8_t u8Pin_index , uint8_t u8Mode)
{
	if (u8Mode == OUTPUT)
  6c:	41 30       	cpi	r20, 0x01	; 1
  6e:	71 f4       	brne	.+28     	; 0x8c <Pin_mode+0x20>
	{
		*((volatile uint8_t *)(u8Port_index-1)) |= (1<<u8Pin_index); 
  70:	e8 2f       	mov	r30, r24
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	22 91       	ld	r18, -Z
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	02 c0       	rjmp	.+4      	; 0x80 <Pin_mode+0x14>
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
  80:	6a 95       	dec	r22
  82:	e2 f7       	brpl	.-8      	; 0x7c <Pin_mode+0x10>
  84:	82 2b       	or	r24, r18
  86:	80 83       	st	Z, r24
	else
	{
		return 0;
	}
	
	return 1;
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	08 95       	ret
{
	if (u8Mode == OUTPUT)
	{
		*((volatile uint8_t *)(u8Port_index-1)) |= (1<<u8Pin_index); 
	}
	else if (u8Mode == INPUT)
  8c:	41 11       	cpse	r20, r1
  8e:	0f c0       	rjmp	.+30     	; 0xae <Pin_mode+0x42>
	{
		*((volatile uint8_t *)(u8Port_index-1)) &= ~(1<<u8Pin_index);
  90:	e8 2f       	mov	r30, r24
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	22 91       	ld	r18, -Z
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <Pin_mode+0x34>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <Pin_mode+0x30>
  a4:	80 95       	com	r24
  a6:	82 23       	and	r24, r18
  a8:	80 83       	st	Z, r24
	else
	{
		return 0;
	}
	
	return 1;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	08 95       	ret
	{
		*((volatile uint8_t *)(u8Port_index-1)) &= ~(1<<u8Pin_index);
	}
	else
	{
		return 0;
  ae:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return 1;
}
  b0:	08 95       	ret

000000b2 <Set_bit>:


extern uint8_t Set_bit(uint8_t u8Port_index , uint8_t u8Pin_index)
{
	*((volatile uint8_t *)u8Port_index) |= (1<<u8Pin_index);
  b2:	e8 2f       	mov	r30, r24
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <Set_bit+0x10>
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <Set_bit+0xc>
  c6:	28 2b       	or	r18, r24
  c8:	20 83       	st	Z, r18
	return 1;
}
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	08 95       	ret

000000ce <Reset_bit>:

extern uint8_t Reset_bit (uint8_t u8Port_index , uint8_t u8Pin_index)
{
	*((volatile uint8_t *)u8Port_index) &= ~(1<<u8Pin_index);
  ce:	e8 2f       	mov	r30, r24
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <Reset_bit+0x10>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <Reset_bit+0xc>
  e2:	20 95       	com	r18
  e4:	28 23       	and	r18, r24
  e6:	20 83       	st	Z, r18
	return 1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	08 95       	ret

000000ec <main>:
 */ 
#include "functions.h"

int main(void)
{
	Pin_mode(D,5,OUTPUT);
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	65 e0       	ldi	r22, 0x05	; 5
  f0:	82 e3       	ldi	r24, 0x32	; 50
  f2:	0e 94 36 00 	call	0x6c	; 0x6c <Pin_mode>
	Reset_bit(D,5);
  f6:	65 e0       	ldi	r22, 0x05	; 5
  f8:	82 e3       	ldi	r24, 0x32	; 50
  fa:	0e 94 67 00 	call	0xce	; 0xce <Reset_bit>
	
    while (1) 
    {
		Set_bit(D,5);
  fe:	65 e0       	ldi	r22, 0x05	; 5
 100:	82 e3       	ldi	r24, 0x32	; 50
 102:	0e 94 59 00 	call	0xb2	; 0xb2 <Set_bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	83 ec       	ldi	r24, 0xC3	; 195
 10a:	99 e0       	ldi	r25, 0x09	; 9
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x20>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x2a>
 116:	00 00       	nop
		_delay_ms(200);
		Reset_bit(D,5);
 118:	65 e0       	ldi	r22, 0x05	; 5
 11a:	82 e3       	ldi	r24, 0x32	; 50
 11c:	0e 94 67 00 	call	0xce	; 0xce <Reset_bit>
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	83 ec       	ldi	r24, 0xC3	; 195
 124:	99 e0       	ldi	r25, 0x09	; 9
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x3a>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x44>
 130:	00 00       	nop
 132:	e5 cf       	rjmp	.-54     	; 0xfe <main+0x12>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
