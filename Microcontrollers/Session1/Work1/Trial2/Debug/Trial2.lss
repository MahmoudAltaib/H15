
Trial2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f05  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b6  00000000  00000000  000013d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c5  00000000  00000000  00001a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00002050  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ef  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005da  00000000  00000000  00002517  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002af1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  64:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Set_bit>:
	{
		Reset_bit(PORT_address , u8Pin_index);
		return 1;
	}
	return 0;
}
  6c:	e8 2f       	mov	r30, r24
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	21 e0       	ldi	r18, 0x01	; 1
  74:	30 e0       	ldi	r19, 0x00	; 0
  76:	02 c0       	rjmp	.+4      	; 0x7c <Set_bit+0x10>
  78:	22 0f       	add	r18, r18
  7a:	33 1f       	adc	r19, r19
  7c:	6a 95       	dec	r22
  7e:	e2 f7       	brpl	.-8      	; 0x78 <Set_bit+0xc>
  80:	28 2b       	or	r18, r24
  82:	20 83       	st	Z, r18
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	08 95       	ret

00000088 <Reset_bit>:
  88:	e8 2f       	mov	r30, r24
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <Reset_bit+0x10>
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	6a 95       	dec	r22
  9a:	e2 f7       	brpl	.-8      	; 0x94 <Reset_bit+0xc>
  9c:	20 95       	com	r18
  9e:	28 23       	and	r18, r24
  a0:	20 83       	st	Z, r18
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	08 95       	ret

000000a6 <Pin_mode>:
  a6:	41 11       	cpse	r20, r1
  a8:	0f c0       	rjmp	.+30     	; 0xc8 <Pin_mode+0x22>
  aa:	e8 2f       	mov	r30, r24
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	22 91       	ld	r18, -Z
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <Pin_mode+0x14>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <Pin_mode+0x10>
  be:	80 95       	com	r24
  c0:	82 23       	and	r24, r18
  c2:	80 83       	st	Z, r24
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	08 95       	ret
  c8:	41 30       	cpi	r20, 0x01	; 1
  ca:	71 f4       	brne	.+28     	; 0xe8 <Pin_mode+0x42>
  cc:	e8 2f       	mov	r30, r24
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	22 91       	ld	r18, -Z
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <Pin_mode+0x36>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <Pin_mode+0x32>
  e0:	82 2b       	or	r24, r18
  e2:	80 83       	st	Z, r24
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	08 95       	ret
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	08 95       	ret

000000ec <Pin_read>:

extern uint8_t Pin_read(uint8_t PORT_address , uint8_t u8Pin_index )
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	1f 92       	push	r1
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t u8Pin_reading = 0 ;
  f6:	19 82       	std	Y+1, r1	; 0x01
	
	u8Pin_reading = (*(volatile uint8_t *)(PORT_address - 2)) & (1<<u8Pin_index) ;
  f8:	e8 2f       	mov	r30, r24
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	32 97       	sbiw	r30, 0x02	; 2
  fe:	20 81       	ld	r18, Z
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <Pin_read+0x1e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <Pin_read+0x1a>
 10e:	82 23       	and	r24, r18
 110:	89 83       	std	Y+1, r24	; 0x01
	
	if (u8Pin_reading ==0)
 112:	99 81       	ldd	r25, Y+1	; 0x01
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	91 11       	cpse	r25, r1
 118:	01 c0       	rjmp	.+2      	; 0x11c <Pin_read+0x30>
 11a:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 1;
	}
}
 11c:	0f 90       	pop	r0
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <Clear_7SEG>:
extern void Clear_7SEG()
{
	
	Reset_bit(C , 4);
 124:	64 e0       	ldi	r22, 0x04	; 4
 126:	85 e3       	ldi	r24, 0x35	; 53
 128:	0e 94 44 00 	call	0x88	; 0x88 <Reset_bit>
	Reset_bit(C , 5);
 12c:	65 e0       	ldi	r22, 0x05	; 5
 12e:	85 e3       	ldi	r24, 0x35	; 53
 130:	0e 94 44 00 	call	0x88	; 0x88 <Reset_bit>
	Reset_bit(C , 6);
 134:	66 e0       	ldi	r22, 0x06	; 6
 136:	85 e3       	ldi	r24, 0x35	; 53
 138:	0e 94 44 00 	call	0x88	; 0x88 <Reset_bit>
	Reset_bit(C , 7);
 13c:	67 e0       	ldi	r22, 0x07	; 7
 13e:	85 e3       	ldi	r24, 0x35	; 53
 140:	0e 94 44 00 	call	0x88	; 0x88 <Reset_bit>
 144:	08 95       	ret

00000146 <main>:

int main(void)
{
	uint8_t u8Temp = 0;
	
	Pin_mode(C , 2 , OUTPUT);
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	85 e3       	ldi	r24, 0x35	; 53
 14c:	0e 94 53 00 	call	0xa6	; 0xa6 <Pin_mode>
	Pin_mode(C , 3 , OUTPUT); 
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	63 e0       	ldi	r22, 0x03	; 3
 154:	85 e3       	ldi	r24, 0x35	; 53
 156:	0e 94 53 00 	call	0xa6	; 0xa6 <Pin_mode>
	Pin_mode(C , 4 , OUTPUT); 
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	64 e0       	ldi	r22, 0x04	; 4
 15e:	85 e3       	ldi	r24, 0x35	; 53
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <Pin_mode>
	Pin_mode(C , 5 , OUTPUT); 
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	65 e0       	ldi	r22, 0x05	; 5
 168:	85 e3       	ldi	r24, 0x35	; 53
 16a:	0e 94 53 00 	call	0xa6	; 0xa6 <Pin_mode>
	Pin_mode(C , 6 , OUTPUT);  
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	66 e0       	ldi	r22, 0x06	; 6
 172:	85 e3       	ldi	r24, 0x35	; 53
 174:	0e 94 53 00 	call	0xa6	; 0xa6 <Pin_mode>
	Pin_mode(C , 7 , OUTPUT);  
 178:	41 e0       	ldi	r20, 0x01	; 1
 17a:	67 e0       	ldi	r22, 0x07	; 7
 17c:	85 e3       	ldi	r24, 0x35	; 53
 17e:	0e 94 53 00 	call	0xa6	; 0xa6 <Pin_mode>
	
	Pin_mode(D , 0 , INPUT);
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	82 e3       	ldi	r24, 0x32	; 50
 188:	0e 94 53 00 	call	0xa6	; 0xa6 <Pin_mode>
	Pin_mode(D , 1 , INPUT);
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	82 e3       	ldi	r24, 0x32	; 50
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <Pin_mode>
	Pin_mode(D , 2 , INPUT);
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	82 e3       	ldi	r24, 0x32	; 50
 19c:	0e 94 53 00 	call	0xa6	; 0xa6 <Pin_mode>
	
	Set_bit(C , 2);
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	85 e3       	ldi	r24, 0x35	; 53
 1a4:	0e 94 36 00 	call	0x6c	; 0x6c <Set_bit>
	Reset_bit(C , 3);
 1a8:	63 e0       	ldi	r22, 0x03	; 3
 1aa:	85 e3       	ldi	r24, 0x35	; 53
 1ac:	0e 94 44 00 	call	0x88	; 0x88 <Reset_bit>
	Reset_bit(C , 4);
 1b0:	64 e0       	ldi	r22, 0x04	; 4
 1b2:	85 e3       	ldi	r24, 0x35	; 53
 1b4:	0e 94 44 00 	call	0x88	; 0x88 <Reset_bit>
	Reset_bit(C , 5);
 1b8:	65 e0       	ldi	r22, 0x05	; 5
 1ba:	85 e3       	ldi	r24, 0x35	; 53
 1bc:	0e 94 44 00 	call	0x88	; 0x88 <Reset_bit>
	Reset_bit(C , 6);
 1c0:	66 e0       	ldi	r22, 0x06	; 6
 1c2:	85 e3       	ldi	r24, 0x35	; 53
 1c4:	0e 94 44 00 	call	0x88	; 0x88 <Reset_bit>
	Reset_bit(C , 7);
 1c8:	67 e0       	ldi	r22, 0x07	; 7
 1ca:	85 e3       	ldi	r24, 0x35	; 53
 1cc:	0e 94 44 00 	call	0x88	; 0x88 <Reset_bit>
	
	*(volatile uint8_t *)(C) |= (u8Temp << 4) ;
 1d0:	85 b3       	in	r24, 0x15	; 21
 1d2:	85 bb       	out	0x15, r24	; 21

#include "Functions.h"

int main(void)
{
	uint8_t u8Temp = 0;
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
	*(volatile uint8_t *)(C) |= (u8Temp << 4) ;
	
	while (1)
	{
		
		if (Pin_read(D , 0) == 1)
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	82 e3       	ldi	r24, 0x32	; 50
 1da:	0e 94 76 00 	call	0xec	; 0xec <Pin_read>
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	99 f5       	brne	.+102    	; 0x248 <main+0x102>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	30 e7       	ldi	r19, 0x70	; 112
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	30 40       	sbci	r19, 0x00	; 0
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0xa2>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0xac>
 1f2:	00 00       	nop
		{
			_delay_ms(50);
			if ((Pin_read(D , 0) == 1))
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	82 e3       	ldi	r24, 0x32	; 50
 1f8:	0e 94 76 00 	call	0xec	; 0xec <Pin_read>
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	21 f5       	brne	.+72     	; 0x248 <main+0x102>
			{
				if (u8Temp == 9)
 200:	c9 30       	cpi	r28, 0x09	; 9
 202:	79 f4       	brne	.+30     	; 0x222 <main+0xdc>
				{
					u8Temp = 0 ;
					Clear_7SEG();
 204:	0e 94 92 00 	call	0x124	; 0x124 <Clear_7SEG>
					*(volatile uint8_t *)(C) |= (u8Temp << 4) ;
 208:	85 b3       	in	r24, 0x15	; 21
 20a:	85 bb       	out	0x15, r24	; 21
 20c:	9f ef       	ldi	r25, 0xFF	; 255
 20e:	20 e7       	ldi	r18, 0x70	; 112
 210:	32 e0       	ldi	r19, 0x02	; 2
 212:	91 50       	subi	r25, 0x01	; 1
 214:	20 40       	sbci	r18, 0x00	; 0
 216:	30 40       	sbci	r19, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <main+0xcc>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0xd6>
 21c:	00 00       	nop
			_delay_ms(50);
			if ((Pin_read(D , 0) == 1))
			{
				if (u8Temp == 9)
				{
					u8Temp = 0 ;
 21e:	c0 e0       	ldi	r28, 0x00	; 0
 220:	13 c0       	rjmp	.+38     	; 0x248 <main+0x102>
					_delay_ms(50);
					
				}
				else
				{
					u8Temp ++ ;
 222:	cf 5f       	subi	r28, 0xFF	; 255
					Clear_7SEG();
 224:	0e 94 92 00 	call	0x124	; 0x124 <Clear_7SEG>
					*(volatile uint8_t *)(C) |= (u8Temp << 4) ;
 228:	25 b3       	in	r18, 0x15	; 21
 22a:	30 e1       	ldi	r19, 0x10	; 16
 22c:	c3 9f       	mul	r28, r19
 22e:	c0 01       	movw	r24, r0
 230:	11 24       	eor	r1, r1
 232:	82 2b       	or	r24, r18
 234:	85 bb       	out	0x15, r24	; 21
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	90 e7       	ldi	r25, 0x70	; 112
 23a:	22 e0       	ldi	r18, 0x02	; 2
 23c:	81 50       	subi	r24, 0x01	; 1
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	20 40       	sbci	r18, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0xf6>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x100>
 246:	00 00       	nop
		{
			
		}
			
	
	if (Pin_read(D , 1) == 1)
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	82 e3       	ldi	r24, 0x32	; 50
 24c:	0e 94 76 00 	call	0xec	; 0xec <Pin_read>
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	09 f0       	breq	.+2      	; 0x256 <main+0x110>
 254:	74 c0       	rjmp	.+232    	; 0x33e <main+0x1f8>
 256:	3f ef       	ldi	r19, 0xFF	; 255
 258:	80 e7       	ldi	r24, 0x70	; 112
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	31 50       	subi	r19, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0x116>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x120>
 266:	00 00       	nop
	{
		_delay_ms(50);
		if ((Pin_read(D , 1) == 1))
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	82 e3       	ldi	r24, 0x32	; 50
 26c:	0e 94 76 00 	call	0xec	; 0xec <Pin_read>
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	09 f0       	breq	.+2      	; 0x276 <main+0x130>
 274:	64 c0       	rjmp	.+200    	; 0x33e <main+0x1f8>
		{
			if (u8Temp == 0)
 276:	c1 11       	cpse	r28, r1
 278:	4f c0       	rjmp	.+158    	; 0x318 <main+0x1d2>
			{
				Reset_bit(C,2);
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	85 e3       	ldi	r24, 0x35	; 53
 27e:	0e 94 44 00 	call	0x88	; 0x88 <Reset_bit>
 282:	2f ef       	ldi	r18, 0xFF	; 255
 284:	35 ea       	ldi	r19, 0xA5	; 165
 286:	8e e0       	ldi	r24, 0x0E	; 14
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	30 40       	sbci	r19, 0x00	; 0
 28c:	80 40       	sbci	r24, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0x142>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x14c>
 292:	00 00       	nop
				_delay_ms(300);
				Set_bit(C,2);
 294:	62 e0       	ldi	r22, 0x02	; 2
 296:	85 e3       	ldi	r24, 0x35	; 53
 298:	0e 94 36 00 	call	0x6c	; 0x6c <Set_bit>
 29c:	9f ef       	ldi	r25, 0xFF	; 255
 29e:	25 ea       	ldi	r18, 0xA5	; 165
 2a0:	3e e0       	ldi	r19, 0x0E	; 14
 2a2:	91 50       	subi	r25, 0x01	; 1
 2a4:	20 40       	sbci	r18, 0x00	; 0
 2a6:	30 40       	sbci	r19, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0x15c>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x166>
 2ac:	00 00       	nop
				_delay_ms(300);
				
				Reset_bit(C,2);
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	85 e3       	ldi	r24, 0x35	; 53
 2b2:	0e 94 44 00 	call	0x88	; 0x88 <Reset_bit>
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	95 ea       	ldi	r25, 0xA5	; 165
 2ba:	2e e0       	ldi	r18, 0x0E	; 14
 2bc:	81 50       	subi	r24, 0x01	; 1
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	20 40       	sbci	r18, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <main+0x176>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x180>
 2c6:	00 00       	nop
				_delay_ms(300);
				Set_bit(C,2);
 2c8:	62 e0       	ldi	r22, 0x02	; 2
 2ca:	85 e3       	ldi	r24, 0x35	; 53
 2cc:	0e 94 36 00 	call	0x6c	; 0x6c <Set_bit>
 2d0:	3f ef       	ldi	r19, 0xFF	; 255
 2d2:	85 ea       	ldi	r24, 0xA5	; 165
 2d4:	9e e0       	ldi	r25, 0x0E	; 14
 2d6:	31 50       	subi	r19, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x190>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x19a>
 2e0:	00 00       	nop
				_delay_ms(300);
				
				Reset_bit(C,2);
 2e2:	62 e0       	ldi	r22, 0x02	; 2
 2e4:	85 e3       	ldi	r24, 0x35	; 53
 2e6:	0e 94 44 00 	call	0x88	; 0x88 <Reset_bit>
 2ea:	2f ef       	ldi	r18, 0xFF	; 255
 2ec:	35 ea       	ldi	r19, 0xA5	; 165
 2ee:	8e e0       	ldi	r24, 0x0E	; 14
 2f0:	21 50       	subi	r18, 0x01	; 1
 2f2:	30 40       	sbci	r19, 0x00	; 0
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <main+0x1aa>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0x1b4>
 2fa:	00 00       	nop
				_delay_ms(300);
				Set_bit(C,2);
 2fc:	62 e0       	ldi	r22, 0x02	; 2
 2fe:	85 e3       	ldi	r24, 0x35	; 53
 300:	0e 94 36 00 	call	0x6c	; 0x6c <Set_bit>
 304:	9f ef       	ldi	r25, 0xFF	; 255
 306:	25 ea       	ldi	r18, 0xA5	; 165
 308:	3e e0       	ldi	r19, 0x0E	; 14
 30a:	91 50       	subi	r25, 0x01	; 1
 30c:	20 40       	sbci	r18, 0x00	; 0
 30e:	30 40       	sbci	r19, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <main+0x1c4>
 312:	00 c0       	rjmp	.+0      	; 0x314 <main+0x1ce>
 314:	00 00       	nop
 316:	13 c0       	rjmp	.+38     	; 0x33e <main+0x1f8>
				_delay_ms(300);
				
			}
			else
			{
				u8Temp -- ;
 318:	c1 50       	subi	r28, 0x01	; 1
				Clear_7SEG();
 31a:	0e 94 92 00 	call	0x124	; 0x124 <Clear_7SEG>
				
				*(volatile uint8_t *)(C) |= (u8Temp << 4) ;
 31e:	25 b3       	in	r18, 0x15	; 21
 320:	30 e1       	ldi	r19, 0x10	; 16
 322:	c3 9f       	mul	r28, r19
 324:	c0 01       	movw	r24, r0
 326:	11 24       	eor	r1, r1
 328:	82 2b       	or	r24, r18
 32a:	85 bb       	out	0x15, r24	; 21
 32c:	8f ef       	ldi	r24, 0xFF	; 255
 32e:	90 e7       	ldi	r25, 0x70	; 112
 330:	22 e0       	ldi	r18, 0x02	; 2
 332:	81 50       	subi	r24, 0x01	; 1
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	20 40       	sbci	r18, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <main+0x1ec>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0x1f6>
 33c:	00 00       	nop
	{
		
	}
	
	
	if (Pin_read(D , 2) == 1)
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	82 e3       	ldi	r24, 0x32	; 50
 342:	0e 94 76 00 	call	0xec	; 0xec <Pin_read>
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	09 f0       	breq	.+2      	; 0x34c <main+0x206>
 34a:	45 cf       	rjmp	.-374    	; 0x1d6 <main+0x90>
 34c:	3f ef       	ldi	r19, 0xFF	; 255
 34e:	80 e7       	ldi	r24, 0x70	; 112
 350:	92 e0       	ldi	r25, 0x02	; 2
 352:	31 50       	subi	r19, 0x01	; 1
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	90 40       	sbci	r25, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <main+0x20c>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0x216>
 35c:	00 00       	nop
	{
		_delay_ms(50);
		if ((Pin_read(D , 2) == 1))
 35e:	62 e0       	ldi	r22, 0x02	; 2
 360:	82 e3       	ldi	r24, 0x32	; 50
 362:	0e 94 76 00 	call	0xec	; 0xec <Pin_read>
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	09 f0       	breq	.+2      	; 0x36c <main+0x226>
 36a:	35 cf       	rjmp	.-406    	; 0x1d6 <main+0x90>
		{
			u8Temp = 0;
			Clear_7SEG();
 36c:	0e 94 92 00 	call	0x124	; 0x124 <Clear_7SEG>
			
			*(volatile uint8_t *)(C) |= (u8Temp << 4) ;
 370:	85 b3       	in	r24, 0x15	; 21
 372:	85 bb       	out	0x15, r24	; 21
 374:	2f ef       	ldi	r18, 0xFF	; 255
 376:	30 e7       	ldi	r19, 0x70	; 112
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	21 50       	subi	r18, 0x01	; 1
 37c:	30 40       	sbci	r19, 0x00	; 0
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <main+0x234>
 382:	00 c0       	rjmp	.+0      	; 0x384 <main+0x23e>
 384:	00 00       	nop
	if (Pin_read(D , 2) == 1)
	{
		_delay_ms(50);
		if ((Pin_read(D , 2) == 1))
		{
			u8Temp = 0;
 386:	c0 e0       	ldi	r28, 0x00	; 0
 388:	26 cf       	rjmp	.-436    	; 0x1d6 <main+0x90>

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
